Error: all.js:13
 13:   (a: number);  // Error: string ~> number
        ^ Cannot cast `a` to number because string [1] is incompatible with number [2].
  References:
    3: declare var pstr: Promise<string>;
                                 ^^^^^^ [1]: string
   13:   (a: number);  // Error: string ~> number
             ^^^^^^ [2]: number

Error: all.js:14
 14:   (b: boolean); // Error: number ~> boolean
        ^ Cannot cast `b` to boolean because number [1] is incompatible with boolean [2].
  References:
    4: declare var pnum: Promise<number>;
                                 ^^^^^^ [1]: number
   14:   (b: boolean); // Error: number ~> boolean
             ^^^^^^^ [2]: boolean

Error: all.js:15
 15:   (c: string);  // Error: boolean ~> string
        ^ Cannot cast `c` to string because boolean [1] is incompatible with string [2].
  References:
    9:   true, // non-Promise values passed through
         ^^^^ [1]: boolean
   15:   (c: string);  // Error: boolean ~> string
             ^^^^^^ [2]: string

Error: all.js:19
 19:     (x: void);  // Errors: string ~> void, number ~> void, boolean ~> void
          ^ Cannot cast `x` to undefined because boolean [1] is incompatible with undefined [2].
  References:
    9:   true, // non-Promise values passed through
         ^^^^ [1]: boolean
   19:     (x: void);  // Errors: string ~> void, number ~> void, boolean ~> void
               ^^^^ [2]: undefined

Error: all.js:19
 19:     (x: void);  // Errors: string ~> void, number ~> void, boolean ~> void
          ^ Cannot cast `x` to undefined because number [1] is incompatible with undefined [2].
  References:
    4: declare var pnum: Promise<number>;
                                 ^^^^^^ [1]: number
   19:     (x: void);  // Errors: string ~> void, number ~> void, boolean ~> void
               ^^^^ [2]: undefined

Error: all.js:19
 19:     (x: void);  // Errors: string ~> void, number ~> void, boolean ~> void
          ^ Cannot cast `x` to undefined because string [1] is incompatible with undefined [2].
  References:
    3: declare var pstr: Promise<string>;
                                 ^^^^^^ [1]: string
   19:     (x: void);  // Errors: string ~> void, number ~> void, boolean ~> void
               ^^^^ [2]: undefined

Error: all.js:24
 24: Promise.all(); // Error: expected array instead of undefined (too few arguments)
     ^^^^^^^^^^^^^ call of method `all`. Too few arguments passed to
608:     static all<T: Iterable<mixed>>(promises: T): Promise<$TupleMap<T, typeof $await>>;
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/core.js:608

Error: all.js:27
 27: Promise.all(0); // Error: expected array instead of number
                 ^ number. This type is incompatible with the expected param type of
608:     static all<T: Iterable<mixed>>(promises: T): Promise<$TupleMap<T, typeof $await>>;
                       ^^^^^^^^^^^^^^^ $Iterable. See lib: <BUILTINS>/core.js:608
  Property `@@iterator` is incompatible:
    608:     static all<T: Iterable<mixed>>(promises: T): Promise<$TupleMap<T, typeof $await>>;
                           ^^^^^^^^^^^^^^^ property `@@iterator` of `$Iterable`. Property not found in. See lib: <BUILTINS>/core.js:608
     27: Promise.all(0); // Error: expected array instead of number
                     ^ number

Error: promise.js:16
 16:   var b: string = num; // Error: number ~> string
                       ^^^ number. This type is incompatible with
 16:   var b: string = num; // Error: number ~> string
              ^^^^^^ string

Error: promise.js:25
 25:     var b: string = num; // Error: number ~> string
                         ^^^ number. This type is incompatible with
 25:     var b: string = num; // Error: number ~> string
                ^^^^^^ string

Error: promise.js:35
 35:   var b: string = num; // Error: number ~> string
                       ^^^ number. This type is incompatible with
 35:   var b: string = num; // Error: number ~> string
              ^^^^^^ string

Error: promise.js:47
 47:   var b: string = num; // Error: number ~> string
                       ^^^ number. This type is incompatible with
 47:   var b: string = num; // Error: number ~> string
              ^^^^^^ string

Error: promise.js:63
 63:   var c: string = numOrStr; // Error: number|string -> string
                       ^^^^^^^^ number. This type is incompatible with
 63:   var c: string = numOrStr; // Error: number|string -> string
              ^^^^^^ string

Error: promise.js:117
117:   var b: string = num; // Error: number ~> string
                       ^^^ number. This type is incompatible with
117:   var b: string = num; // Error: number ~> string
              ^^^^^^ string

Error: promise.js:123
123:   var b: string = num; // Error: number ~> string
                       ^^^ number. This type is incompatible with
123:   var b: string = num; // Error: number ~> string
              ^^^^^^ string

Error: promise.js:129
129:   var b: string = num; // Error: number ~> string
                       ^^^ number. This type is incompatible with
129:   var b: string = num; // Error: number ~> string
              ^^^^^^ string

Error: promise.js:161
161:     var b: number = str; // Error: string ~> number
                         ^^^ string. This type is incompatible with
161:     var b: number = str; // Error: string ~> number
                ^^^^^^ number

Error: promise.js:169
169:     var b: number = str; // Error: string ~> number
                         ^^^ string. This type is incompatible with
169:     var b: number = str; // Error: string ~> number
                ^^^^^^ number

Error: promise.js:177
177:     var b: number = str; // Error: string ~> number
                         ^^^ string. This type is incompatible with
177:     var b: number = str; // Error: string ~> number
                ^^^^^^ number

Error: promise.js:201
201:     var b: number = str; // Error: string ~> number
                         ^^^ string. This type is incompatible with
201:     var b: number = str; // Error: string ~> number
                ^^^^^^ number

Error: promise.js:209
209:     var b: number = str; // Error: string ~> number
                         ^^^ string. This type is incompatible with
209:     var b: number = str; // Error: string ~> number
                ^^^^^^ number

Error: promise.js:217
217:     var b: number = str; // Error: string ~> number
                         ^^^ string. This type is incompatible with
217:     var b: number = str; // Error: string ~> number
                ^^^^^^ number

Error: promise.js:225
225:     var b: string = num; // Error: string ~> number
                         ^^^ number. This type is incompatible with
225:     var b: string = num; // Error: string ~> number
                ^^^^^^ string

Error: promise.js:225
225:     var b: string = num; // Error: string ~> number
                         ^^^ undefined. This type is incompatible with
225:     var b: string = num; // Error: string ~> number
                ^^^^^^ string

Error: resolve_global.js:35
 35:   return Promise.resolve(0);
                      ^^^^^^^ property `resolve`. Property not found in
 35:   return Promise.resolve(0);
              ^^^^^^^ statics of `Promise`

Error: resolve_global.js:40
 40:   return 0;
       ^^^^^^^^^ async return. Expected polymorphic type instead of
 39: async function baz(): Promise<number> {
                           ^^^^^^^^^^^^^^^ statics of `Promise`

Error: resolve_void.js:3
  3: (Promise.resolve(): Promise<number>); // error
      ^^^^^^^^^^^^^^^^^ Cannot cast `Promise.resolve()` to `Promise` because in type argument `R`, undefined [1] is incompatible with number [2].
  References:
    3: (Promise.resolve(): Promise<number>); // error
        ^^^^^^^^^^^^^^^^^ [1]: undefined
    3: (Promise.resolve(): Promise<number>); // error
                                   ^^^^^^ [2]: number

Error: resolve_void.js:5
  5: (Promise.resolve(undefined): Promise<number>); // error
                      ^^^^^^^^^ Cannot cast `Promise.resolve(...)` to `Promise` because in type argument `R`, undefined [1] is incompatible with number [2].
  References:
   13: declare var undefined: void;
                              ^^^^ [1]: undefined. See lib: <BUILTINS>/core.js:13
    5: (Promise.resolve(undefined): Promise<number>); // error
                                            ^^^^^^ [2]: number


Found 28 errors
