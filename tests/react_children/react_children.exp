Error ----------------------------------------------------------------------------------------------------- api.js:11:39

Cannot call `na` with `Children.map(...)` bound to `x` because in type argument `T`, string is incompatible with number.


Error ----------------------------------------------------------------------------------------------------- api.js:11:24

Cannot call `Children.map` with function bound to `fn` because in the first argument, string is incompatible with
number.


Error ----------------------------------------------------------------------------------------------------- api.js:12:39

Cannot call `sa` with `Children.map(...)` bound to `x` because in type argument `T`, number is incompatible with string.


Error ----------------------------------------------------------------------------------------------------- api.js:14:18

Cannot call `Children.forEach` with `a` bound to `children` because in type argument `T`, null or undefined is
incompatible with number.


Error ----------------------------------------------------------------------------------------------------- api.js:16:18

Cannot call `Children.forEach` with `a` bound to `children` because in type argument `T`, null or undefined is
incompatible with string.


Error ----------------------------------------------------------------------------------------------------- api.js:16:18

Cannot call `Children.forEach` with `a` bound to `children` because in type argument `T`, number is incompatible with
string.


Error ------------------------------------------------------------------------------------------------------ api.js:19:3

Cannot call `s` with `Children.count(...)` bound to `x` because number is incompatible with string.


Error ------------------------------------------------------------------------------------------------------ api.js:22:3

Cannot call `s` with `Children.only(...)` bound to `x` because number is incompatible with string.


Error ------------------------------------------------------------------------------------------------------ api.js:25:4

Cannot call `sa` with `Children.toArray(...)` bound to `x` because in type argument `T`, number is incompatible with
string.


Error: builtin_intrinsic.js:24
     v--------
 24: <builtin>
 25:   {{a: 1, b: 2, c: 3}}
 26: </builtin>;
     ---------^ props. This type is incompatible with
390:   props: {children?: React$Node, [key: string]: any},
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/react-dom.js:390
  Property `children` is incompatible:
     25:   {{a: 1, b: 2, c: 3}}
            ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
    390:   props: {children?: React$Node, [key: string]: any},
                              ^^^^^^^^^^ union: undefined | null | boolean | number | string | `React.Element` | `React.Portal` | `Iterable`. See lib: <BUILTINS>/react-dom.js:390
      Member 6:
       18:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ React.Element. See lib: <BUILTINS>/react.js:18
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       18:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ React.Element. See lib: <BUILTINS>/react.js:18
        Property `a` is incompatible:
           25:   {{a: 1, b: 2, c: 3}}
                  ^^^^^^^^^^^^^^^^^^ property `a`. Property not found in
           18:   | React$Element<any>
                   ^^^^^^^^^^^^^^^^^^ React.Element. See lib: <BUILTINS>/react.js:18
      Member 7:
       19:   | React$Portal
               ^^^^^^^^^^^^ React.Portal. See lib: <BUILTINS>/react.js:19
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       19:   | React$Portal
               ^^^^^^^^^^^^ React.Portal. See lib: <BUILTINS>/react.js:19
      Member 8:
       20:   | Iterable<React$Node>;
               ^^^^^^^^^^^^^^^^^^^^ Iterable. See lib: <BUILTINS>/react.js:20
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       20:   | Iterable<React$Node>;
               ^^^^^^^^^^^^^^^^^^^^ $Iterable. See lib: <BUILTINS>/react.js:20
        Property `@@iterator` is incompatible:
           20:   | Iterable<React$Node>;
                   ^^^^^^^^^^^^^^^^^^^^ property `@@iterator` of `$Iterable`. Property not found in. See lib: <BUILTINS>/react.js:20
           25:   {{a: 1, b: 2, c: 3}}
                  ^^^^^^^^^^^^^^^^^^ object literal

Error ------------------------------------------------------------------------------------------------ component.js:15:2

Cannot create `MyComponent` element because property `children` is missing in props but exists in object type.


Error ------------------------------------------------------------------------------------------------ component.js:16:2

Cannot create `MyComponent` element because property `children` is missing in props but exists in object type.


Error ------------------------------------------------------------------------------------------------ component.js:18:2

Cannot create `MyComponent` element because property `children` is missing in props but exists in object type.


Error: component.js:40
     v------------
 40: <MyComponent>
 41:   {{a: 1, b: 2, c: 3}}
 42: </MyComponent>;
     -------------^ props. This type is incompatible with
  6: class MyComponent extends React.Component<{children: Node}, void> {
                                               ^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     41:   {{a: 1, b: 2, c: 3}}
            ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
      6: class MyComponent extends React.Component<{children: Node}, void> {
                                                              ^^^^ union: undefined | null | boolean | number | string | `React.Element` | `React.Portal` | `Iterable`
      Member 6:
       18:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ React.Element. See lib: <BUILTINS>/react.js:18
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       18:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ React.Element. See lib: <BUILTINS>/react.js:18
        Property `a` is incompatible:
           41:   {{a: 1, b: 2, c: 3}}
                  ^^^^^^^^^^^^^^^^^^ property `a`. Property not found in
           18:   | React$Element<any>
                   ^^^^^^^^^^^^^^^^^^ React.Element. See lib: <BUILTINS>/react.js:18
      Member 7:
       19:   | React$Portal
               ^^^^^^^^^^^^ React.Portal. See lib: <BUILTINS>/react.js:19
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       19:   | React$Portal
               ^^^^^^^^^^^^ React.Portal. See lib: <BUILTINS>/react.js:19
      Member 8:
       20:   | Iterable<React$Node>;
               ^^^^^^^^^^^^^^^^^^^^ Iterable. See lib: <BUILTINS>/react.js:20
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       20:   | Iterable<React$Node>;
               ^^^^^^^^^^^^^^^^^^^^ $Iterable. See lib: <BUILTINS>/react.js:20
        Property `@@iterator` is incompatible:
           20:   | Iterable<React$Node>;
                   ^^^^^^^^^^^^^^^^^^^^ property `@@iterator` of `$Iterable`. Property not found in. See lib: <BUILTINS>/react.js:20
           41:   {{a: 1, b: 2, c: 3}}
                  ^^^^^^^^^^^^^^^^^^ object literal

Error ------------------------------------------------------------------------------------------------------ fun.js:23:2

Cannot create `Fun` element because property `children` is missing in props but exists in object type.


Error ------------------------------------------------------------------------------------------------------ fun.js:27:6

Cannot create `Fun` element because in property `children`, children array is incompatible with `Fn`.


Error ------------------------------------------------------------------------------------------------------ fun.js:29:6

Cannot create `Fun` element because in property `children`, children array is incompatible with `Fn`.


Error ------------------------------------------------------------------------------------------------------ fun.js:30:6

Cannot create `Fun` element because in property `children`, children array is incompatible with `Fn`.


Error ----------------------------------------------------------------------------------------------------- fun.js:42:12

Cannot create `Fun` element because in property `children` and then the return value, string is incompatible with
number.


Error ------------------------------------------------------------------------------------------------------ fun.js:40:6

Cannot cast `data.bar` to string because number is incompatible with string.


Error ----------------------------------------------------------------------------------------------------- fun.js:41:11

Cannot get `data.nope` because property `nope` is missing in `Data`.


Error ------------------------------------------------------------------------------------------------------ fun.js:46:2

Cannot create `Fun` element because property `children` is missing in props but exists in object type.


Error ------------------------------------------------------------------------------------------------------ fun.js:47:2

Cannot create `Fun` element because property `children` is missing in props but exists in object type.


Error ------------------------------------------------------------------------------------------------------ fun.js:48:7

Cannot create `Fun` element because in property `children`, undefined is incompatible with `Fn`.


Error ------------------------------------------------------------------------------------------------------ fun.js:49:7

Cannot create `Fun` element because in property `children`, null is incompatible with `Fn`.


Error ------------------------------------------------------------------------------------------------------ fun.js:50:7

Cannot create `Fun` element because in property `children`, boolean is incompatible with `Fn`.


Error ------------------------------------------------------------------------------------------------------ fun.js:51:7

Cannot create `Fun` element because in property `children`, boolean is incompatible with `Fn`.


Error ------------------------------------------------------------------------------------------------------ fun.js:52:7

Cannot create `Fun` element because in property `children`, number is incompatible with `Fn`.


Error ------------------------------------------------------------------------------------------------------ fun.js:53:7

Cannot create `Fun` element because in property `children`, number is incompatible with `Fn`.


Error ------------------------------------------------------------------------------------------------------ fun.js:54:6

Cannot create `Fun` element because in property `children`, a callable signature is missing in `React.Element` but
exists in `Fn`.


Error ------------------------------------------------------------------------------------------------------ fun.js:56:2

Cannot create `Obj` element because property `children` is missing in props but exists in object type.


Error ----------------------------------------------------------------------------------------------------- fun.js:60:13

Cannot create `Obj` element because in property `children.foo`, string is incompatible with number.


Error ----------------------------------------------------------------------------------------------------- fun.js:60:23

Cannot create `Obj` element because in property `children.bar`, string is incompatible with number.


Error ------------------------------------------------------------------------------------------------------ fun.js:61:6

Cannot create `Obj` element because in property `children`, children array is incompatible with `Data`.


Error ------------------------------------------------------------------------------------------------------ fun.js:63:6

Cannot create `Obj` element because in property `children`, children array is incompatible with `Data`.


Error ------------------------------------------------------------------------------------------------------ fun.js:64:6

Cannot create `Obj` element because in property `children`, children array is incompatible with `Data`.


Error ----------------------------------------------------------------------------------------------------- fun.js:71:16

Cannot create `FunArrayOnly` element because in property `children`, function is incompatible with array type.


Error ----------------------------------------------------------------------------------------------------- fun.js:77:16

Cannot create `FunArrayOnly` element because in property `children` and then type argument `T`, array literal is
incompatible with `Fn`.


Error ----------------------------------------------------------------------------------------------------- fun.js:77:38

Cannot create `FunArrayOnly` element because in property `children` and then type argument `T`, array literal is
incompatible with `Fn`.


Error ----------------------------------------------------------------------------------------------------- fun.js:80:16

Cannot create `FunArrayOnly` element because in property `children` and then type argument `T`, array literal is
incompatible with `Fn`.


Error ------------------------------------------------------------------------------------------------------ fun.js:84:4

Cannot create `FunArrayOnly` element because in property `children`, function is incompatible with array type.


Error ---------------------------------------------------------------------------------------------------- fun.js:108:12

Cannot create `FunArray` element because in property `children` and then type argument `T`, array literal is
incompatible with `Fn`.


Error ---------------------------------------------------------------------------------------------------- fun.js:108:34

Cannot create `FunArray` element because in property `children` and then type argument `T`, array literal is
incompatible with `Fn`.


Error ---------------------------------------------------------------------------------------------------- fun.js:111:12

Cannot create `FunArray` element because in property `children` and then type argument `T`, array literal is
incompatible with `Fn`.


Error ----------------------------------------------------------------------------------------------------- fun.js:134:2

Cannot create `FunArray` element because property `children` is missing in props but exists in object type.


Error ----------------------------------------------------------------------------------------------------- fun.js:135:2

Cannot create `FunArray` element because property `children` is missing in props but exists in object type.


Error: fun.js:136
136: <FunArray>{undefined}</FunArray>; // Error: `undefined` is not allowed.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    136: <FunArray>{undefined}</FunArray>; // Error: `undefined` is not allowed.
                    ^^^^^^^^^ undefined. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: `Fn` | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      136: <FunArray>{undefined}</FunArray>; // Error: `undefined` is not allowed.
                      ^^^^^^^^^ undefined. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      136: <FunArray>{undefined}</FunArray>; // Error: `undefined` is not allowed.
                      ^^^^^^^^^ undefined. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:137
137: <FunArray>{null}</FunArray>; // Error: `null` is not allowed.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    137: <FunArray>{null}</FunArray>; // Error: `null` is not allowed.
                    ^^^^ null. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: `Fn` | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      137: <FunArray>{null}</FunArray>; // Error: `null` is not allowed.
                      ^^^^ null. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      137: <FunArray>{null}</FunArray>; // Error: `null` is not allowed.
                      ^^^^ null. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:138
138: <FunArray>{true}</FunArray>; // Error: `boolean`s are not allowed.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    138: <FunArray>{true}</FunArray>; // Error: `boolean`s are not allowed.
                    ^^^^ boolean. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: `Fn` | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      138: <FunArray>{true}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^^^ boolean. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      138: <FunArray>{true}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^^^ boolean. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:139
139: <FunArray>{false}</FunArray>; // Error: `boolean`s are not allowed.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    139: <FunArray>{false}</FunArray>; // Error: `boolean`s are not allowed.
                    ^^^^^ boolean. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: `Fn` | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      139: <FunArray>{false}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^^^^ boolean. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      139: <FunArray>{false}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^^^^ boolean. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:140
140: <FunArray>{0}</FunArray>; // Error: `boolean`s are not allowed.
     ^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    140: <FunArray>{0}</FunArray>; // Error: `boolean`s are not allowed.
                    ^ number. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: `Fn` | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      140: <FunArray>{0}</FunArray>; // Error: `boolean`s are not allowed.
                      ^ number. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      140: <FunArray>{0}</FunArray>; // Error: `boolean`s are not allowed.
                      ^ number. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:141
141: <FunArray>{42}</FunArray>; // Error: `boolean`s are not allowed.
     ^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    141: <FunArray>{42}</FunArray>; // Error: `boolean`s are not allowed.
                    ^^ number. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: `Fn` | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      141: <FunArray>{42}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^ number. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      141: <FunArray>{42}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^ number. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error ---------------------------------------------------------------------------------------------------- fun.js:142:11

Cannot create `FunArray` element because in property `children`, a callable signature is missing in `React.Element` but
exists in `Fn`.


Error ---------------------------------------------------------------------------------------------------- spread.js:7:6

A spread argument is unsupported here.


Error ----------------------------------------------------------------------------------------------------- tabs.js:26:2

Cannot create `TabBar` element because property `children` is missing in props but exists in object type.


Error: tabs.js:30
 30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                          ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                 ^^^^^^^^^^^^^^ children array. Has some incompatible type argument with
     18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
             ^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                     ^^ JSX text. This type is incompatible with
         18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                       ^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
           14:   | void
                   ^^^^ undefined
          Error:
           30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                       ^^ JSX text. This type is incompatible with
           14:   | void
                   ^^^^ undefined
          Member 2:
           15:   | null
                   ^^^^ null
          Error:
           30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                       ^^ JSX text. This type is incompatible with
           15:   | null
                   ^^^^ null
          Member 3:
           16:   | boolean
                   ^^^^^^^ boolean
          Error:
           30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                       ^^ JSX text. This type is incompatible with
           16:   | boolean
                   ^^^^^^^ boolean

Error: tabs.js:31
 31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                          ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                 ^^^^^^^^^^^^^^ children array. Has some incompatible type argument with
     18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
             ^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                           ^^ JSX text. This type is incompatible with
         18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                       ^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
           14:   | void
                   ^^^^ undefined
          Error:
           31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                             ^^ JSX text. This type is incompatible with
           14:   | void
                   ^^^^ undefined
          Member 2:
           15:   | null
                   ^^^^ null
          Error:
           31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                             ^^ JSX text. This type is incompatible with
           15:   | null
                   ^^^^ null
          Member 3:
           16:   | boolean
                   ^^^^^^^ boolean
          Error:
           31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                             ^^ JSX text. This type is incompatible with
           16:   | boolean
                   ^^^^^^^ boolean

Error: tabs.js:32
 32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                          ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                 ^^^^^^^^^^^^^^ children array. Has some incompatible type argument with
     18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
             ^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                 ^^ JSX text. This type is incompatible with
         18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                       ^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
           14:   | void
                   ^^^^ undefined
          Error:
           32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                   ^^ JSX text. This type is incompatible with
           14:   | void
                   ^^^^ undefined
          Member 2:
           15:   | null
                   ^^^^ null
          Error:
           32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                   ^^ JSX text. This type is incompatible with
           15:   | null
                   ^^^^ null
          Member 3:
           16:   | boolean
                   ^^^^^^^ boolean
          Error:
           32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                   ^^ JSX text. This type is incompatible with
           16:   | boolean
                   ^^^^^^^ boolean

Error ---------------------------------------------------------------------------------------------------- tabs.js:67:10

Cannot create `TabBar` element because in property `children.type`, `NotTab` is incompatible with `Tab`.


Error ---------------------------------------------------------------------------------------------------- tabs.js:68:10

Cannot create `TabBar` element because in property `children`, type argument `T`, and then property `type`; `NotTab` is
incompatible with `Tab`.


Error ---------------------------------------------------------------------------------------------------- tabs.js:68:19

Cannot create `TabBar` element because in property `children`, type argument `T`, and then property `type`; `NotTab` is
incompatible with `Tab`.


Error ----------------------------------------------------------------------------------------------------- tabs.js:73:4

Cannot create `TabBar` element because in property `children`, type argument `T`, and then property `type`; `NotTab` is
incompatible with `Tab`.


Error ------------------------------------------------------------------------------------------------------ text.js:9:2

Cannot create `Text` element because property `children` is missing in props but exists in object type.


Error ----------------------------------------------------------------------------------------------------- text.js:11:2

Cannot create `TextLiteral` element because property `children` is missing in props but exists in object type.


Error ----------------------------------------------------------------------------------------------------- text.js:15:2

Cannot create `Text` element because property `children` is missing in props but exists in object type.


Error ----------------------------------------------------------------------------------------------------- text.js:18:2

Cannot create `Text` element because property `children` is missing in props but exists in object type.


Error ----------------------------------------------------------------------------------------------------- text.js:19:2

Cannot create `Text` element because property `children` is missing in props but exists in object type.


Error ----------------------------------------------------------------------------------------------------- text.js:20:8

Cannot create `Text` element because in property `children`, undefined is incompatible with string.


Error ----------------------------------------------------------------------------------------------------- text.js:21:8

Cannot create `Text` element because in property `children`, null is incompatible with string.


Error ----------------------------------------------------------------------------------------------------- text.js:22:8

Cannot create `Text` element because in property `children`, boolean is incompatible with string.


Error ----------------------------------------------------------------------------------------------------- text.js:23:8

Cannot create `Text` element because in property `children`, boolean is incompatible with string.


Error ----------------------------------------------------------------------------------------------------- text.js:24:8

Cannot create `Text` element because in property `children`, number is incompatible with string.


Error ----------------------------------------------------------------------------------------------------- text.js:25:8

Cannot create `Text` element because in property `children`, number is incompatible with string.


Error ----------------------------------------------------------------------------------------------------- text.js:26:7

Cannot create `Text` element because in property `children`, `React.Element` is incompatible with string.


Error ----------------------------------------------------------------------------------------------------- text.js:35:7

Cannot create `Text` element because in property `children`, children array is incompatible with string.


Error ----------------------------------------------------------------------------------------------------- text.js:36:7

Cannot create `Text` element because in property `children`, children array is incompatible with string.


Error ----------------------------------------------------------------------------------------------------- text.js:37:7

Cannot create `Text` element because in property `children`, children array is incompatible with string.


Error ----------------------------------------------------------------------------------------------------- text.js:38:7

Cannot create `Text` element because in property `children`, children array is incompatible with string.


Error ---------------------------------------------------------------------------------------------------- text.js:48:14

Cannot create `TextLiteral` element because in property `children`, JSX text is incompatible with string enum.


Error ---------------------------------------------------------------------------------------------------- text.js:49:15

Cannot create `TextLiteral` element because in property `children`, string is incompatible with string enum.


Error ---------------------------------------------------------------------------------------------------- text.js:50:14

Cannot create `TextLiteral` element because in property `children`, JSX text is incompatible with string enum.


Error ---------------------------------------------------------------------------------------------------- text.js:51:14

Cannot create `TextLiteral` element because in property `children`, JSX text is incompatible with string enum.


Error ---------------------------------------------------------------------------------------------------- text.js:52:14

Cannot create `TextLiteral` element because in property `children`, children array is incompatible with string enum.


Error ---------------------------------------------------------------------------------------------------- text.js:53:14

Cannot create `TextLiteral` element because in property `children`, children array is incompatible with string enum.


Error ----------------------------------------------------------------------------------------------------- tuple.js:9:2

Cannot create `Tuple` element because property `children` is missing in props but exists in object type.


Error ---------------------------------------------------------------------------------------------------- tuple.js:12:8

Cannot create `Tuple` element because in property `children`, children array has an arity of 4 but tuple type has an
arity of 3.


Error ---------------------------------------------------------------------------------------------------- tuple.js:13:8

Cannot create `Tuple` element because in property `children` and then index 0, JSX text is incompatible with boolean.


Error ---------------------------------------------------------------------------------------------------- tuple.js:13:8

Cannot create `Tuple` element because in property `children`, children array has an arity of 4 but tuple type has an
arity of 3.


Error --------------------------------------------------------------------------------------------------- tuple.js:13:11

Cannot create `Tuple` element because in property `children` and then index 1, boolean is incompatible with string.


Error --------------------------------------------------------------------------------------------------- tuple.js:13:16

Cannot create `Tuple` element because in property `children` and then index 2, JSX text is incompatible with number.


Error ---------------------------------------------------------------------------------------------------- tuple.js:14:8

Cannot create `Tuple` element because in property `children`, children array has an arity of 4 but tuple type has an
arity of 3.


Error ---------------------------------------------------------------------------------------------------- tuple.js:16:8

Cannot create `Tuple` element because in property `children`, children array has an arity of 2 but tuple type has an
arity of 3.


Error ---------------------------------------------------------------------------------------------------- tuple.js:16:9

Cannot create `Tuple` element because in property `children` and then index 0, array literal is incompatible with
boolean.


Error --------------------------------------------------------------------------------------------------- tuple.js:16:28

Cannot create `Tuple` element because in property `children` and then index 1, array literal is incompatible with
string.


Error ---------------------------------------------------------------------------------------------------- tuple.js:18:9

Cannot create `Tuple` element because in property `children`, array literal has an arity of 4 but tuple type has an
arity of 3.


Error --------------------------------------------------------------------------------------------------- tuple.js:34:12

Cannot create `TupleOne` element because in property `children`, boolean is incompatible with tuple type.


Error ----------------------------------------------------------------------------------------------------- view.js:31:2

Cannot create `View` element because in property `children`, property `a` is missing in `React.Element` but exists in
object literal.


Error: view.js:35
 35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
               ^^^^^^^^^^^^^ JSX text. This type is incompatible with
     17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
                 ^^^^^^^^^^^^^ JSX text. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
                 ^^^^^^^^^^^^^ JSX text. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
                 ^^^^^^^^^^^^^ JSX text. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean

Error: view.js:36
 36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                ^^^^^^^^^^^^^^^ string. This type is incompatible with
     17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                  ^^^^^^^^^^^^^^^ string. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                  ^^^^^^^^^^^^^^^ string. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                  ^^^^^^^^^^^^^^^ string. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean

Error: view.js:37
 37: <View>{42}</View>; // Error: Numbers are not allowed as children.
     ^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                ^^ number. This type is incompatible with
     17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                  ^^ number. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                  ^^ number. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                  ^^ number. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean

Error: view.js:38
 38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
     ^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
               ^^^^^^^^^ children array. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                    ^ number. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                      ^ number. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                      ^ number. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                      ^ number. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean

Error: view.js:39
 39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                ^^^^^^^^^^^^^^^ array literal. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                     ^^^ string. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                       ^^^ string. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                       ^^^ string. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                       ^^^ string. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean

Error: view.js:39
 39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                ^^^^^^^^^^^^^^^ array literal. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                          ^^^ string. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                            ^^^ string. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                            ^^^ string. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                            ^^^ string. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean

Error: view.js:39
 39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                ^^^^^^^^^^^^^^^ array literal. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                               ^^^ string. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                                 ^^^ string. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                                 ^^^ string. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                                 ^^^ string. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean

Error: view.js:40
 40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
     ^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                ^^^^^^^^^ array literal. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                     ^ number. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                       ^ number. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                       ^ number. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                       ^ number. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean

Error: view.js:40
 40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
     ^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                ^^^^^^^^^ array literal. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                        ^ number. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                          ^ number. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                          ^ number. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                          ^ number. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean

Error: view.js:40
 40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
     ^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                ^^^^^^^^^ array literal. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                           ^ number. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                             ^ number. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                             ^ number. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                             ^ number. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean


Found 107 errors
