Error: api.js:11
 11: na(Children.map(a, (x: string) => (x: string))); // Error
                                           ^^^^^^ Cannot call `na` with `Children.map(...)` bound to `x` because in type argument `T`, string [1] is incompatible with number [2].
  References:
   11: na(Children.map(a, (x: string) => (x: string))); // Error
                                             ^^^^^^ [1]: string
   30: function na(x: Array<number>) {}
                            ^^^^^^ [2]: number

Error: api.js:11
 11: na(Children.map(a, (x: string) => (x: string))); // Error
                            ^^^^^^ Cannot call `Children.map` with function bound to `fn` because in the first argument, string [1] is incompatible with number [2].
  References:
   11: na(Children.map(a, (x: string) => (x: string))); // Error
                              ^^^^^^ [1]: string
    5: const a: ChildrenArray<?number> = [
                               ^^^^^^ [2]: number

Error: api.js:12
 12: sa(Children.map(a, (x: number) => (x: number))); // Error
                                           ^^^^^^ Cannot call `sa` with `Children.map(...)` bound to `x` because in type argument `T`, number [1] is incompatible with string [2].
  References:
   12: sa(Children.map(a, (x: number) => (x: number))); // Error
                                             ^^^^^^ [1]: number
   31: function sa(x: Array<string>) {}
                            ^^^^^^ [2]: string

Error: api.js:14
 14: Children.forEach(a, (x: number) => {}); // Error
                      ^ Cannot call `Children.forEach` with `a` bound to `children` because in type argument `T`, null or undefined [1] is incompatible with number [2].
  References:
    5: const a: ChildrenArray<?number> = [
                              ^^^^^^^ [1]: null or undefined
   14: Children.forEach(a, (x: number) => {}); // Error
                               ^^^^^^ [2]: number

Error: api.js:16
 16: Children.forEach(a, (x: string) => {}); // Error
                      ^ Cannot call `Children.forEach` with `a` bound to `children` because in type argument `T`, null or undefined [1] is incompatible with string [2].
  References:
    5: const a: ChildrenArray<?number> = [
                              ^^^^^^^ [1]: null or undefined
   16: Children.forEach(a, (x: string) => {}); // Error
                               ^^^^^^ [2]: string

Error: api.js:16
 16: Children.forEach(a, (x: string) => {}); // Error
                      ^ Cannot call `Children.forEach` with `a` bound to `children` because in type argument `T`, number [1] is incompatible with string [2].
  References:
    5: const a: ChildrenArray<?number> = [
                               ^^^^^^ [1]: number
   16: Children.forEach(a, (x: string) => {}); // Error
                               ^^^^^^ [2]: string

Error: api.js:19
 19: s(Children.count(a)); // Error
       ^^^^^^^^^^^^^^^^^ Cannot call `s` with `Children.count(...)` bound to `x` because number [1] is incompatible with string [2].
  References:
  236:     count(children: ChildrenArray<any>): number;
                                                ^^^^^^ [1]: number. See lib: <BUILTINS>/react.js:236
   29: function s(x: string) {}
                     ^^^^^^ [2]: string

Error: api.js:22
 22: s(Children.only(a)); // Error
       ^^^^^^^^^^^^^^^^ Cannot call `s` with `Children.only(...)` bound to `x` because number [1] is incompatible with string [2].
  References:
    5: const a: ChildrenArray<?number> = [
                               ^^^^^^ [1]: number
   29: function s(x: string) {}
                     ^^^^^^ [2]: string

Error: api.js:25
 25: sa(Children.toArray(a)); // Error
        ^^^^^^^^^^^^^^^^^^^ Cannot call `sa` with `Children.toArray(...)` bound to `x` because in type argument `T`, number [1] is incompatible with string [2].
  References:
    5: const a: ChildrenArray<?number> = [
                               ^^^^^^ [1]: number
   31: function sa(x: Array<string>) {}
                            ^^^^^^ [2]: string

Error: builtin_intrinsic.js:24
     v--------
 24: <builtin>
 25:   {{a: 1, b: 2, c: 3}}
 26: </builtin>;
     ---------^ props. This type is incompatible with
390:   props: {children?: React$Node, [key: string]: any},
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/react-dom.js:390
  Property `children` is incompatible:
     25:   {{a: 1, b: 2, c: 3}}
            ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
    390:   props: {children?: React$Node, [key: string]: any},
                              ^^^^^^^^^^ union: undefined | null | boolean | number | string | `React.Element` | `React.Portal` | `Iterable`. See lib: <BUILTINS>/react-dom.js:390
      Member 6:
       18:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ React.Element. See lib: <BUILTINS>/react.js:18
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       18:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ React.Element. See lib: <BUILTINS>/react.js:18
        Property `a` is incompatible:
           25:   {{a: 1, b: 2, c: 3}}
                  ^^^^^^^^^^^^^^^^^^ property `a`. Property not found in
           18:   | React$Element<any>
                   ^^^^^^^^^^^^^^^^^^ React.Element. See lib: <BUILTINS>/react.js:18
      Member 7:
       19:   | React$Portal
               ^^^^^^^^^^^^ React.Portal. See lib: <BUILTINS>/react.js:19
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       19:   | React$Portal
               ^^^^^^^^^^^^ React.Portal. See lib: <BUILTINS>/react.js:19
      Member 8:
       20:   | Iterable<React$Node>;
               ^^^^^^^^^^^^^^^^^^^^ Iterable. See lib: <BUILTINS>/react.js:20
      Error:
       25:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       20:   | Iterable<React$Node>;
               ^^^^^^^^^^^^^^^^^^^^ $Iterable. See lib: <BUILTINS>/react.js:20
        Property `@@iterator` is incompatible:
           20:   | Iterable<React$Node>;
                   ^^^^^^^^^^^^^^^^^^^^ property `@@iterator` of `$Iterable`. Property not found in. See lib: <BUILTINS>/react.js:20
           25:   {{a: 1, b: 2, c: 3}}
                  ^^^^^^^^^^^^^^^^^^ object literal

Error: component.js:15
 15: <MyComponent />; // Error: `children` is required.
      ^^^^^^^^^^^ Cannot create `MyComponent` element because property `children` is missing in props [1] but exists in object type [2].
  References:
   15: <MyComponent />; // Error: `children` is required.
       ^^^^^^^^^^^^^^^ [1]: props
    6: class MyComponent extends React.Component<{children: Node}, void> {
                                                 ^^^^^^^^^^^^^^^^ [2]: object type

Error: component.js:16
 16: <MyComponent></MyComponent>; // Error: `children` is required.
      ^^^^^^^^^^^ Cannot create `MyComponent` element because property `children` is missing in props [1] but exists in object type [2].
  References:
   16: <MyComponent></MyComponent>; // Error: `children` is required.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
    6: class MyComponent extends React.Component<{children: Node}, void> {
                                                 ^^^^^^^^^^^^^^^^ [2]: object type

Error: component.js:18
 18: <MyComponent>{}</MyComponent>; // Error: `children` is required.
      ^^^^^^^^^^^ Cannot create `MyComponent` element because property `children` is missing in props [1] but exists in object type [2].
  References:
   18: <MyComponent>{}</MyComponent>; // Error: `children` is required.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
    6: class MyComponent extends React.Component<{children: Node}, void> {
                                                 ^^^^^^^^^^^^^^^^ [2]: object type

Error: component.js:40
     v------------
 40: <MyComponent>
 41:   {{a: 1, b: 2, c: 3}}
 42: </MyComponent>;
     -------------^ props. This type is incompatible with
  6: class MyComponent extends React.Component<{children: Node}, void> {
                                               ^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     41:   {{a: 1, b: 2, c: 3}}
            ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
      6: class MyComponent extends React.Component<{children: Node}, void> {
                                                              ^^^^ union: undefined | null | boolean | number | string | `React.Element` | `React.Portal` | `Iterable`
      Member 6:
       18:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ React.Element. See lib: <BUILTINS>/react.js:18
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       18:   | React$Element<any>
               ^^^^^^^^^^^^^^^^^^ React.Element. See lib: <BUILTINS>/react.js:18
        Property `a` is incompatible:
           41:   {{a: 1, b: 2, c: 3}}
                  ^^^^^^^^^^^^^^^^^^ property `a`. Property not found in
           18:   | React$Element<any>
                   ^^^^^^^^^^^^^^^^^^ React.Element. See lib: <BUILTINS>/react.js:18
      Member 7:
       19:   | React$Portal
               ^^^^^^^^^^^^ React.Portal. See lib: <BUILTINS>/react.js:19
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       19:   | React$Portal
               ^^^^^^^^^^^^ React.Portal. See lib: <BUILTINS>/react.js:19
      Member 8:
       20:   | Iterable<React$Node>;
               ^^^^^^^^^^^^^^^^^^^^ Iterable. See lib: <BUILTINS>/react.js:20
      Error:
       41:   {{a: 1, b: 2, c: 3}}
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
       20:   | Iterable<React$Node>;
               ^^^^^^^^^^^^^^^^^^^^ $Iterable. See lib: <BUILTINS>/react.js:20
        Property `@@iterator` is incompatible:
           20:   | Iterable<React$Node>;
                   ^^^^^^^^^^^^^^^^^^^^ property `@@iterator` of `$Iterable`. Property not found in. See lib: <BUILTINS>/react.js:20
           41:   {{a: 1, b: 2, c: 3}}
                  ^^^^^^^^^^^^^^^^^^ object literal

Error: fun.js:23
 23: <Fun />; // Error: `children` is required.
      ^^^ Cannot create `Fun` element because property `children` is missing in props [1] but exists in object type [2].
  References:
   23: <Fun />; // Error: `children` is required.
       ^^^^^^^ [1]: props
   16: class Fun extends React.Component<{children: Fn}, void> {}
                                         ^^^^^^^^^^^^^^ [2]: object type

Error: fun.js:27
 27: <Fun>{() => 42}{() => 42}</Fun>; // Error: Two functions are not allowed.
          ^^^^^^^^^^^^^^^^^^^^ Cannot create `Fun` element because in property `children`, children array [1] is incompatible with `Fn` [2].
  References:
   27: <Fun>{() => 42}{() => 42}</Fun>; // Error: Two functions are not allowed.
            ^^^^^^^^^^^^^^^^^^^^ [1]: children array
   16: class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]: `Fn`

Error: fun.js:29
 29: <Fun>{() => 42}  </Fun>; // Error: Spaces make it an array.
          ^^^^^^^^^^^^ Cannot create `Fun` element because in property `children`, children array [1] is incompatible with `Fn` [2].
  References:
   29: <Fun>{() => 42}  </Fun>; // Error: Spaces make it an array.
            ^^^^^^^^^^^^ [1]: children array
   16: class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]: `Fn`

Error: fun.js:30
 30: <Fun>  {() => 42}</Fun>; // Error: Spaces make it an array.
          ^^^^^^^^^^^^ Cannot create `Fun` element because in property `children`, children array [1] is incompatible with `Fn` [2].
  References:
   30: <Fun>  {() => 42}</Fun>; // Error: Spaces make it an array.
            ^^^^^^^^^^^^ [1]: children array
   16: class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]: `Fn`

Error: fun.js:42
 42:     return '42'; // Error: Must return a number.
                ^^^^ Cannot create `Fun` element because in property `children` and then the return value, string [1] is incompatible with number [2].
  References:
   42:     return '42'; // Error: Must return a number.
                  ^^^^ [1]: string
   14: type Fn = (Data) => number;
                           ^^^^^^ [2]: number

Error: fun.js:40
 40:     (data.bar: string); // Error: `bar` is a number.
          ^^^^^^^^ Cannot cast `data.bar` to string because number [1] is incompatible with string [2].
  References:
   11:   bar: number,
              ^^^^^^ [1]: number
   40:     (data.bar: string); // Error: `bar` is a number.
                      ^^^^^^ [2]: string

Error: fun.js:41
 41:     (data.nope: boolean); // Error: `nope` does not exist.
               ^^^^ Cannot get `data.nope` because property `nope` is missing in `Data` [1].
  References:
   14: type Fn = (Data) => number;
                  ^^^^ [1]: `Data`

Error: fun.js:46
 46: <Fun>{}</Fun>; // Error: `void` is not allowed.
      ^^^ Cannot create `Fun` element because property `children` is missing in props [1] but exists in object type [2].
  References:
   46: <Fun>{}</Fun>; // Error: `void` is not allowed.
       ^^^^^^^^^^^^^ [1]: props
   16: class Fun extends React.Component<{children: Fn}, void> {}
                                         ^^^^^^^^^^^^^^ [2]: object type

Error: fun.js:47
 47: <Fun>{/* Hello, world! */}</Fun>; // Error: comments are not allowed.
      ^^^ Cannot create `Fun` element because property `children` is missing in props [1] but exists in object type [2].
  References:
   47: <Fun>{/* Hello, world! */}</Fun>; // Error: comments are not allowed.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
   16: class Fun extends React.Component<{children: Fn}, void> {}
                                         ^^^^^^^^^^^^^^ [2]: object type

Error: fun.js:48
 48: <Fun>{undefined}</Fun>; // Error: `undefined` is not allowed.
           ^^^^^^^^^ Cannot create `Fun` element because in property `children`, undefined [1] is incompatible with `Fn` [2].
  References:
   13: declare var undefined: void;
                              ^^^^ [1]: undefined. See lib: <BUILTINS>/core.js:13
   16: class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]: `Fn`

Error: fun.js:49
 49: <Fun>{null}</Fun>; // Error: `null` is not allowed.
           ^^^^ Cannot create `Fun` element because in property `children`, null [1] is incompatible with `Fn` [2].
  References:
   49: <Fun>{null}</Fun>; // Error: `null` is not allowed.
             ^^^^ [1]: null
   16: class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]: `Fn`

Error: fun.js:50
 50: <Fun>{true}</Fun>; // Error: `boolean`s are not allowed.
           ^^^^ Cannot create `Fun` element because in property `children`, boolean [1] is incompatible with `Fn` [2].
  References:
   50: <Fun>{true}</Fun>; // Error: `boolean`s are not allowed.
             ^^^^ [1]: boolean
   16: class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]: `Fn`

Error: fun.js:51
 51: <Fun>{false}</Fun>; // Error: `boolean`s are not allowed.
           ^^^^^ Cannot create `Fun` element because in property `children`, boolean [1] is incompatible with `Fn` [2].
  References:
   51: <Fun>{false}</Fun>; // Error: `boolean`s are not allowed.
             ^^^^^ [1]: boolean
   16: class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]: `Fn`

Error: fun.js:52
 52: <Fun>{0}</Fun>; // Error: `number`s are not allowed.
           ^ Cannot create `Fun` element because in property `children`, number [1] is incompatible with `Fn` [2].
  References:
   52: <Fun>{0}</Fun>; // Error: `number`s are not allowed.
             ^ [1]: number
   16: class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]: `Fn`

Error: fun.js:53
 53: <Fun>{42}</Fun>; // Error: `number`s are not allowed.
           ^^ Cannot create `Fun` element because in property `children`, number [1] is incompatible with `Fn` [2].
  References:
   53: <Fun>{42}</Fun>; // Error: `number`s are not allowed.
             ^^ [1]: number
   16: class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]: `Fn`

Error: fun.js:54
 54: <Fun><intrinsic/></Fun>; // Error: elements are not allowed.
          ^^^^^^^^^^^^ Cannot create `Fun` element because in property `children`, a callable signature is missing in `React.Element` [1] but exists in `Fn` [2].
  References:
   54: <Fun><intrinsic/></Fun>; // Error: elements are not allowed.
            ^^^^^^^^^^^^ [1]: `React.Element`
   16: class Fun extends React.Component<{children: Fn}, void> {}
                                                    ^^ [2]: `Fn`

Error: fun.js:56
 56: <Obj />; // Error: `children` is required.
      ^^^ Cannot create `Obj` element because property `children` is missing in props [1] but exists in object type [2].
  References:
   56: <Obj />; // Error: `children` is required.
       ^^^^^^^ [1]: props
   18: class Obj extends React.Component<{children: Data}, void> {}
                                         ^^^^^^^^^^^^^^^^ [2]: object type

Error: fun.js:60
 60: <Obj>{{foo: '1', bar: '2'}}</Obj>; // Error: Incorrect types.
                 ^^^ Cannot create `Obj` element because in property `children.foo`, string [1] is incompatible with number [2].
  References:
   60: <Obj>{{foo: '1', bar: '2'}}</Obj>; // Error: Incorrect types.
                   ^^^ [1]: string
   10:   foo: number,
              ^^^^^^ [2]: number

Error: fun.js:60
 60: <Obj>{{foo: '1', bar: '2'}}</Obj>; // Error: Incorrect types.
                           ^^^ Cannot create `Obj` element because in property `children.bar`, string [1] is incompatible with number [2].
  References:
   60: <Obj>{{foo: '1', bar: '2'}}</Obj>; // Error: Incorrect types.
                             ^^^ [1]: string
   11:   bar: number,
              ^^^^^^ [2]: number

Error: fun.js:61
 61: <Obj>{{foo: 1, bar: 2}}{{foo: 1, bar: 2}}</Obj>; // Error: Two objects are not
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot create `Obj` element because in property `children`, children array [1] is incompatible with `Data` [2].
  References:
   61: <Obj>{{foo: 1, bar: 2}}{{foo: 1, bar: 2}}</Obj>; // Error: Two objects are not
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: children array
   18: class Obj extends React.Component<{children: Data}, void> {}
                                                    ^^^^ [2]: `Data`

Error: fun.js:63
 63: <Obj>{{foo: 1, bar: 2}}  </Obj>; // Error: Spaces make it an array.
          ^^^^^^^^^^^^^^^^^^^^ Cannot create `Obj` element because in property `children`, children array [1] is incompatible with `Data` [2].
  References:
   63: <Obj>{{foo: 1, bar: 2}}  </Obj>; // Error: Spaces make it an array.
            ^^^^^^^^^^^^^^^^^^^^ [1]: children array
   18: class Obj extends React.Component<{children: Data}, void> {}
                                                    ^^^^ [2]: `Data`

Error: fun.js:64
 64: <Obj>  {{foo: 1, bar: 2}}</Obj>; // Error: Spaces make it an array.
          ^^^^^^^^^^^^^^^^^^^^ Cannot create `Obj` element because in property `children`, children array [1] is incompatible with `Data` [2].
  References:
   64: <Obj>  {{foo: 1, bar: 2}}</Obj>; // Error: Spaces make it an array.
            ^^^^^^^^^^^^^^^^^^^^ [1]: children array
   18: class Obj extends React.Component<{children: Data}, void> {}
                                                    ^^^^ [2]: `Data`

Error: fun.js:71
 71: <FunArrayOnly>{() => 42}</FunArrayOnly>; // Error: A single expression is not
                    ^^^^^^^^ Cannot create `FunArrayOnly` element because in property `children`, function [1] is incompatible with array type [2].
  References:
   71: <FunArrayOnly>{() => 42}</FunArrayOnly>; // Error: A single expression is not
                      ^^^^^^^^ [1]: function
   20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                             ^^^^^^^^^ [2]: array type

Error: fun.js:77
 77: <FunArrayOnly>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArrayOnly>;
                    ^^^^^^^^^^^^^^^^^^^^ Cannot create `FunArrayOnly` element because in property `children` and then type argument `T`, array literal [1] is incompatible with `Fn` [2].
  References:
   77: <FunArrayOnly>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArrayOnly>;
                      ^^^^^^^^^^^^^^^^^^^^ [1]: array literal
   20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                                   ^^ [2]: `Fn`

Error: fun.js:77
 77: <FunArrayOnly>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArrayOnly>;
                                          ^^^^^^^^^^^^^^^^^^^^ Cannot create `FunArrayOnly` element because in property `children` and then type argument `T`, array literal [1] is incompatible with `Fn` [2].
  References:
   77: <FunArrayOnly>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArrayOnly>;
                                            ^^^^^^^^^^^^^^^^^^^^ [1]: array literal
   20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                                   ^^ [2]: `Fn`

Error: fun.js:80
 80: <FunArrayOnly>{[() => 42, () => 42]}{() => 42}</FunArrayOnly>;
                    ^^^^^^^^^^^^^^^^^^^^ Cannot create `FunArrayOnly` element because in property `children` and then type argument `T`, array literal [1] is incompatible with `Fn` [2].
  References:
   80: <FunArrayOnly>{[() => 42, () => 42]}{() => 42}</FunArrayOnly>;
                      ^^^^^^^^^^^^^^^^^^^^ [1]: array literal
   20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                                   ^^ [2]: `Fn`

Error: fun.js:84
 84:   {() => 42}
        ^^^^^^^^ Cannot create `FunArrayOnly` element because in property `children`, function [1] is incompatible with array type [2].
  References:
   84:   {() => 42}
          ^^^^^^^^ [1]: function
   20: class FunArrayOnly extends React.Component<{children: Array<Fn>}, void> {}
                                                             ^^^^^^^^^ [2]: array type

Error: fun.js:108
108: <FunArray>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArray>;
                ^^^^^^^^^^^^^^^^^^^^ Cannot create `FunArray` element because in property `children` and then type argument `T`, array literal [1] is incompatible with `Fn` [2].
  References:
  108: <FunArray>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArray>;
                  ^^^^^^^^^^^^^^^^^^^^ [1]: array literal
   21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                    ^^ [2]: `Fn`

Error: fun.js:108
108: <FunArray>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArray>;
                                      ^^^^^^^^^^^^^^^^^^^^ Cannot create `FunArray` element because in property `children` and then type argument `T`, array literal [1] is incompatible with `Fn` [2].
  References:
  108: <FunArray>{[() => 42, () => 42]}{[() => 42, () => 42]}</FunArray>;
                                        ^^^^^^^^^^^^^^^^^^^^ [1]: array literal
   21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                    ^^ [2]: `Fn`

Error: fun.js:111
111: <FunArray>{[() => 42, () => 42]}{() => 42}</FunArray>;
                ^^^^^^^^^^^^^^^^^^^^ Cannot create `FunArray` element because in property `children` and then type argument `T`, array literal [1] is incompatible with `Fn` [2].
  References:
  111: <FunArray>{[() => 42, () => 42]}{() => 42}</FunArray>;
                  ^^^^^^^^^^^^^^^^^^^^ [1]: array literal
   21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                    ^^ [2]: `Fn`

Error: fun.js:134
134: <FunArray>{}</FunArray>; // Error: `void` is not allowed.
      ^^^^^^^^ Cannot create `FunArray` element because property `children` is missing in props [1] but exists in object type [2].
  References:
  134: <FunArray>{}</FunArray>; // Error: `void` is not allowed.
       ^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
   21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: fun.js:135
135: <FunArray>{/* Hello, world! */}</FunArray>; // Error: comments are not allowed.
      ^^^^^^^^ Cannot create `FunArray` element because property `children` is missing in props [1] but exists in object type [2].
  References:
  135: <FunArray>{/* Hello, world! */}</FunArray>; // Error: comments are not allowed.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
   21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: fun.js:136
136: <FunArray>{undefined}</FunArray>; // Error: `undefined` is not allowed.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    136: <FunArray>{undefined}</FunArray>; // Error: `undefined` is not allowed.
                    ^^^^^^^^^ undefined. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: `Fn` | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      136: <FunArray>{undefined}</FunArray>; // Error: `undefined` is not allowed.
                      ^^^^^^^^^ undefined. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      136: <FunArray>{undefined}</FunArray>; // Error: `undefined` is not allowed.
                      ^^^^^^^^^ undefined. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:137
137: <FunArray>{null}</FunArray>; // Error: `null` is not allowed.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    137: <FunArray>{null}</FunArray>; // Error: `null` is not allowed.
                    ^^^^ null. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: `Fn` | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      137: <FunArray>{null}</FunArray>; // Error: `null` is not allowed.
                      ^^^^ null. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      137: <FunArray>{null}</FunArray>; // Error: `null` is not allowed.
                      ^^^^ null. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:138
138: <FunArray>{true}</FunArray>; // Error: `boolean`s are not allowed.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    138: <FunArray>{true}</FunArray>; // Error: `boolean`s are not allowed.
                    ^^^^ boolean. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: `Fn` | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      138: <FunArray>{true}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^^^ boolean. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      138: <FunArray>{true}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^^^ boolean. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:139
139: <FunArray>{false}</FunArray>; // Error: `boolean`s are not allowed.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    139: <FunArray>{false}</FunArray>; // Error: `boolean`s are not allowed.
                    ^^^^^ boolean. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: `Fn` | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      139: <FunArray>{false}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^^^^ boolean. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      139: <FunArray>{false}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^^^^ boolean. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:140
140: <FunArray>{0}</FunArray>; // Error: `boolean`s are not allowed.
     ^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    140: <FunArray>{0}</FunArray>; // Error: `boolean`s are not allowed.
                    ^ number. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: `Fn` | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      140: <FunArray>{0}</FunArray>; // Error: `boolean`s are not allowed.
                      ^ number. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      140: <FunArray>{0}</FunArray>; // Error: `boolean`s are not allowed.
                      ^ number. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:141
141: <FunArray>{42}</FunArray>; // Error: `boolean`s are not allowed.
     ^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
    141: <FunArray>{42}</FunArray>; // Error: `boolean`s are not allowed.
                    ^^ number. This type is incompatible with
     21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                           ^^^^^^^^^^^^^^ union: `Fn` | array type
      Member 1:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Error:
      141: <FunArray>{42}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^ number. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                             ^^ Fn
      Member 2:
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type
      Error:
      141: <FunArray>{42}</FunArray>; // Error: `boolean`s are not allowed.
                      ^^ number. This type is incompatible with
       21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                                  ^^^^^^^^^ array type

Error: fun.js:142
142: <FunArray><intrinsic/></FunArray>; // Error: elements are not allowed.
               ^^^^^^^^^^^^ Cannot create `FunArray` element because in property `children`, a callable signature is missing in `React.Element` [1] but exists in `Fn` [2].
  References:
  142: <FunArray><intrinsic/></FunArray>; // Error: elements are not allowed.
                 ^^^^^^^^^^^^ [1]: `React.Element`
   21: class FunArray extends React.Component<{children: Fn | Array<Fn>}, void> {}
                                                         ^^ [2]: `Fn`

Error: spread.js:7
  7: <Foo>{...["a", "b"]}</Foo>
          ^^^^^^^^^^^^^^^ A spread argument is unsupported here.

Error: tabs.js:26
 26: <TabBar />; // Error: `children` is required.
      ^^^^^^ Cannot create `TabBar` element because property `children` is missing in props [1] but exists in object type [2].
  References:
   26: <TabBar />; // Error: `children` is required.
       ^^^^^^^^^^ [1]: props
   24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: tabs.js:30
 30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                          ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                 ^^^^^^^^^^^^^^ children array. Has some incompatible type argument with
     18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
             ^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                     ^^ JSX text. This type is incompatible with
         18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                       ^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
           14:   | void
                   ^^^^ undefined
          Error:
           30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                       ^^ JSX text. This type is incompatible with
           14:   | void
                   ^^^^ undefined
          Member 2:
           15:   | null
                   ^^^^ null
          Error:
           30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                       ^^ JSX text. This type is incompatible with
           15:   | null
                   ^^^^ null
          Member 3:
           16:   | boolean
                   ^^^^^^^ boolean
          Error:
           30: <TabBar>  <Tab/><Tab/></TabBar>; // Error: Spaces are strings.
                       ^^ JSX text. This type is incompatible with
           16:   | boolean
                   ^^^^^^^ boolean

Error: tabs.js:31
 31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                          ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                 ^^^^^^^^^^^^^^ children array. Has some incompatible type argument with
     18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
             ^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                           ^^ JSX text. This type is incompatible with
         18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                       ^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
           14:   | void
                   ^^^^ undefined
          Error:
           31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                             ^^ JSX text. This type is incompatible with
           14:   | void
                   ^^^^ undefined
          Member 2:
           15:   | null
                   ^^^^ null
          Error:
           31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                             ^^ JSX text. This type is incompatible with
           15:   | null
                   ^^^^ null
          Member 3:
           16:   | boolean
                   ^^^^^^^ boolean
          Error:
           31: <TabBar><Tab/>  <Tab/></TabBar>; // Error: Spaces are strings.
                             ^^ JSX text. This type is incompatible with
           16:   | boolean
                   ^^^^^^^ boolean

Error: tabs.js:32
 32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 24: class TabBar extends React.Component<{children: TabBarNode}, void> {}
                                          ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                 ^^^^^^^^^^^^^^ children array. Has some incompatible type argument with
     18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
             ^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                 ^^ JSX text. This type is incompatible with
         18:   | Array<TabBarNode>; // NOTE: This is intentionally `Array<T>` and not
                       ^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
           14:   | void
                   ^^^^ undefined
          Error:
           32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                   ^^ JSX text. This type is incompatible with
           14:   | void
                   ^^^^ undefined
          Member 2:
           15:   | null
                   ^^^^ null
          Error:
           32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                   ^^ JSX text. This type is incompatible with
           15:   | null
                   ^^^^ null
          Member 3:
           16:   | boolean
                   ^^^^^^^ boolean
          Error:
           32: <TabBar><Tab/><Tab/>  </TabBar>; // Error: Spaces are strings.
                                   ^^ JSX text. This type is incompatible with
           16:   | boolean
                   ^^^^^^^ boolean

Error: tabs.js:67
 67: <TabBar><NotTab/></TabBar>; // Error: We can only have tab components.
              ^^^^^^ Cannot create `TabBar` element because in property `children.type`, `NotTab` [1] is incompatible with `Tab` [2].
  References:
   11: class NotTab extends React.Component<{}, void> {}
             ^^^^^^ [1]: `NotTab`
   10: class Tab extends React.Component<{}, void> {}
             ^^^ [2]: `Tab`

Error: tabs.js:68
 68: <TabBar><NotTab/><NotTab/></TabBar>; // Error: We can only have tab components.
              ^^^^^^ Cannot create `TabBar` element because in property `children`, type argument `T`, and then property `type`; `NotTab` [1] is incompatible with `Tab` [2].
  References:
   11: class NotTab extends React.Component<{}, void> {}
             ^^^^^^ [1]: `NotTab`
   10: class Tab extends React.Component<{}, void> {}
             ^^^ [2]: `Tab`

Error: tabs.js:68
 68: <TabBar><NotTab/><NotTab/></TabBar>; // Error: We can only have tab components.
                       ^^^^^^ Cannot create `TabBar` element because in property `children`, type argument `T`, and then property `type`; `NotTab` [1] is incompatible with `Tab` [2].
  References:
   11: class NotTab extends React.Component<{}, void> {}
             ^^^^^^ [1]: `NotTab`
   10: class Tab extends React.Component<{}, void> {}
             ^^^ [2]: `Tab`

Error: tabs.js:73
 73:   <NotTab/>
        ^^^^^^ Cannot create `TabBar` element because in property `children`, type argument `T`, and then property `type`; `NotTab` [1] is incompatible with `Tab` [2].
  References:
   11: class NotTab extends React.Component<{}, void> {}
             ^^^^^^ [1]: `NotTab`
   10: class Tab extends React.Component<{}, void> {}
             ^^^ [2]: `Tab`

Error: text.js:9
  9: <Text />; // Error: `children` is required.
      ^^^^ Cannot create `Text` element because property `children` is missing in props [1] but exists in object type [2].
  References:
    9: <Text />; // Error: `children` is required.
       ^^^^^^^^ [1]: props
    5: class Text extends React.Component<{children: string}, void> {}
                                          ^^^^^^^^^^^^^^^^^^ [2]: object type

Error: text.js:11
 11: <TextLiteral />; // Error: `children` is required.
      ^^^^^^^^^^^ Cannot create `TextLiteral` element because property `children` is missing in props [1] but exists in object type [2].
  References:
   11: <TextLiteral />; // Error: `children` is required.
       ^^^^^^^^^^^^^^^ [1]: props
    7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: text.js:15
 15: <Text></Text>; // Error: `children` does not exist.
      ^^^^ Cannot create `Text` element because property `children` is missing in props [1] but exists in object type [2].
  References:
   15: <Text></Text>; // Error: `children` does not exist.
       ^^^^^^^^^^^^^ [1]: props
    5: class Text extends React.Component<{children: string}, void> {}
                                          ^^^^^^^^^^^^^^^^^^ [2]: object type

Error: text.js:18
 18: <Text>{}</Text>; // Error: `children` is required.
      ^^^^ Cannot create `Text` element because property `children` is missing in props [1] but exists in object type [2].
  References:
   18: <Text>{}</Text>; // Error: `children` is required.
       ^^^^^^^^^^^^^^^ [1]: props
    5: class Text extends React.Component<{children: string}, void> {}
                                          ^^^^^^^^^^^^^^^^^^ [2]: object type

Error: text.js:19
 19: <Text>{/* Hello, world! */}</Text>; // Error: `children` is required.
      ^^^^ Cannot create `Text` element because property `children` is missing in props [1] but exists in object type [2].
  References:
   19: <Text>{/* Hello, world! */}</Text>; // Error: `children` is required.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
    5: class Text extends React.Component<{children: string}, void> {}
                                          ^^^^^^^^^^^^^^^^^^ [2]: object type

Error: text.js:20
 20: <Text>{undefined}</Text>; // Error: `undefined` is not allowed.
            ^^^^^^^^^ Cannot create `Text` element because in property `children`, undefined [1] is incompatible with string [2].
  References:
   13: declare var undefined: void;
                              ^^^^ [1]: undefined. See lib: <BUILTINS>/core.js:13
    5: class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]: string

Error: text.js:21
 21: <Text>{null}</Text>; // Error: `null` is not allowed.
            ^^^^ Cannot create `Text` element because in property `children`, null [1] is incompatible with string [2].
  References:
   21: <Text>{null}</Text>; // Error: `null` is not allowed.
              ^^^^ [1]: null
    5: class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]: string

Error: text.js:22
 22: <Text>{true}</Text>; // Error: `boolean`s are not allowed.
            ^^^^ Cannot create `Text` element because in property `children`, boolean [1] is incompatible with string [2].
  References:
   22: <Text>{true}</Text>; // Error: `boolean`s are not allowed.
              ^^^^ [1]: boolean
    5: class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]: string

Error: text.js:23
 23: <Text>{false}</Text>; // Error: `boolean`s are not allowed.
            ^^^^^ Cannot create `Text` element because in property `children`, boolean [1] is incompatible with string [2].
  References:
   23: <Text>{false}</Text>; // Error: `boolean`s are not allowed.
              ^^^^^ [1]: boolean
    5: class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]: string

Error: text.js:24
 24: <Text>{0}</Text>; // Error: `number`s are not allowed.
            ^ Cannot create `Text` element because in property `children`, number [1] is incompatible with string [2].
  References:
   24: <Text>{0}</Text>; // Error: `number`s are not allowed.
              ^ [1]: number
    5: class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]: string

Error: text.js:25
 25: <Text>{42}</Text>; // Error: `number`s are not allowed.
            ^^ Cannot create `Text` element because in property `children`, number [1] is incompatible with string [2].
  References:
   25: <Text>{42}</Text>; // Error: `number`s are not allowed.
              ^^ [1]: number
    5: class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]: string

Error: text.js:26
 26: <Text><intrinsic/></Text>; // Error: elements are not allowed.
           ^^^^^^^^^^^^ Cannot create `Text` element because in property `children`, `React.Element` [1] is incompatible with string [2].
  References:
   26: <Text><intrinsic/></Text>; // Error: elements are not allowed.
             ^^^^^^^^^^^^ [1]: `React.Element`
    5: class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]: string

Error: text.js:35
 35: <Text>{'Hello, '}{'world!'}</Text>; // Error: We did not allow an array.
           ^^^^^^^^^^^^^^^^^^^^^ Cannot create `Text` element because in property `children`, children array [1] is incompatible with string [2].
  References:
   35: <Text>{'Hello, '}{'world!'}</Text>; // Error: We did not allow an array.
             ^^^^^^^^^^^^^^^^^^^^^ [1]: children array
    5: class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]: string

Error: text.js:36
 36: <Text>Hello, {'world!'}</Text>; // Error: We did not allow an array.
           ^^^^^^^^^^^^^^^^^ Cannot create `Text` element because in property `children`, children array [1] is incompatible with string [2].
  References:
   36: <Text>Hello, {'world!'}</Text>; // Error: We did not allow an array.
             ^^^^^^^^^^^^^^^^^ [1]: children array
    5: class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]: string

Error: text.js:37
 37: <Text>{'Hello, world!'}  </Text>; // Error: Spaces cause there to be an array.
           ^^^^^^^^^^^^^^^^^^^ Cannot create `Text` element because in property `children`, children array [1] is incompatible with string [2].
  References:
   37: <Text>{'Hello, world!'}  </Text>; // Error: Spaces cause there to be an array.
             ^^^^^^^^^^^^^^^^^^^ [1]: children array
    5: class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]: string

Error: text.js:38
 38: <Text>  {'Hello, world!'}</Text>; // Error: Spaces cause there to be an array.
           ^^^^^^^^^^^^^^^^^^^ Cannot create `Text` element because in property `children`, children array [1] is incompatible with string [2].
  References:
   38: <Text>  {'Hello, world!'}</Text>; // Error: Spaces cause there to be an array.
             ^^^^^^^^^^^^^^^^^^^ [1]: children array
    5: class Text extends React.Component<{children: string}, void> {}
                                                     ^^^^^^ [2]: string

Error: text.js:48
 48: <TextLiteral>buz</TextLiteral>; // Error: `buz` is not allowed.
                  ^^^ Cannot create `TextLiteral` element because in property `children`, JSX text [1] is incompatible with string enum [2].
  References:
   48: <TextLiteral>buz</TextLiteral>; // Error: `buz` is not allowed.
                    ^^^ [1]: JSX text
    7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                            ^^^^^^^^^^^^^ [2]: string enum

Error: text.js:49
 49: <TextLiteral>{'buz'}</TextLiteral>; // Error: `buz` is not allowed.
                   ^^^^^ Cannot create `TextLiteral` element because in property `children`, string [1] is incompatible with string enum [2].
  References:
   49: <TextLiteral>{'buz'}</TextLiteral>; // Error: `buz` is not allowed.
                     ^^^^^ [1]: string
    7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                            ^^^^^^^^^^^^^ [2]: string enum

Error: text.js:50
 50: <TextLiteral>foo  </TextLiteral>; // Error: Spaces are not trimmed.
                  ^^^^^ Cannot create `TextLiteral` element because in property `children`, JSX text [1] is incompatible with string enum [2].
  References:
   50: <TextLiteral>foo  </TextLiteral>; // Error: Spaces are not trimmed.
                    ^^^^^ [1]: JSX text
    7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                            ^^^^^^^^^^^^^ [2]: string enum

Error: text.js:51
 51: <TextLiteral>  foo</TextLiteral>; // Error: Spaces are not trimmed.
                  ^^^^^ Cannot create `TextLiteral` element because in property `children`, JSX text [1] is incompatible with string enum [2].
  References:
   51: <TextLiteral>  foo</TextLiteral>; // Error: Spaces are not trimmed.
                    ^^^^^ [1]: JSX text
    7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                            ^^^^^^^^^^^^^ [2]: string enum

Error: text.js:52
 52: <TextLiteral>{'foo'}  </TextLiteral>; // Error: Spaces are not trimmed.
                  ^^^^^^^^^ Cannot create `TextLiteral` element because in property `children`, children array [1] is incompatible with string enum [2].
  References:
   52: <TextLiteral>{'foo'}  </TextLiteral>; // Error: Spaces are not trimmed.
                    ^^^^^^^^^ [1]: children array
    7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                            ^^^^^^^^^^^^^ [2]: string enum

Error: text.js:53
 53: <TextLiteral>  {'foo'}</TextLiteral>; // Error: Spaces are not trimmed.
                  ^^^^^^^^^ Cannot create `TextLiteral` element because in property `children`, children array [1] is incompatible with string enum [2].
  References:
   53: <TextLiteral>  {'foo'}</TextLiteral>; // Error: Spaces are not trimmed.
                    ^^^^^^^^^ [1]: children array
    7: class TextLiteral extends React.Component<{children: 'foo' | 'bar'}, void> {}
                                                            ^^^^^^^^^^^^^ [2]: string enum

Error: tuple.js:9
  9: <Tuple />; // Error: `children` is required.
      ^^^^^ Cannot create `Tuple` element because property `children` is missing in props [1] but exists in object type [2].
  References:
    9: <Tuple />; // Error: `children` is required.
       ^^^^^^^^^ [1]: props
    6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: tuple.js:12
 12: <Tuple>{true}{'foo'}{42}{null}</Tuple>; // Error: One to many.
            ^^^^^^^^^^^^^^^^^^^^^^^ Cannot create `Tuple` element because in property `children`, children array [1] has an arity of 4 but tuple type [2] has an arity of 3.
  References:
   12: <Tuple>{true}{'foo'}{42}{null}</Tuple>; // Error: One to many.
              ^^^^^^^^^^^^^^^^^^^^^^^ [1]: children array
    6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: tuple type

Error: tuple.js:13
 13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
            ^^ Cannot create `Tuple` element because in property `children` and then index 0, JSX text [1] is incompatible with boolean [2].
  References:
   13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
              ^^ [1]: JSX text
    6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                             ^^^^^^^ [2]: boolean

Error: tuple.js:13
 13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
            ^^^^^^^^^^^^^^^ Cannot create `Tuple` element because in property `children`, children array [1] has an arity of 4 but tuple type [2] has an arity of 3.
  References:
   13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
              ^^^^^^^^^^^^^^^ [1]: children array
    6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: tuple type

Error: tuple.js:13
 13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
               ^^^^ Cannot create `Tuple` element because in property `children` and then index 1, boolean [1] is incompatible with string [2].
  References:
   13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
                 ^^^^ [1]: boolean
    6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                                      ^^^^^^ [2]: string

Error: tuple.js:13
 13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
                    ^^^ Cannot create `Tuple` element because in property `children` and then index 2, JSX text [1] is incompatible with number [2].
  References:
   13: <Tuple>  {true}foo{42}</Tuple>; // Error: Spaces add items.
                      ^^^ [1]: JSX text
    6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                                              ^^^^^^ [2]: number

Error: tuple.js:14
 14: <Tuple>{true}foo{42}  </Tuple>; // Error: Spaces add items.
            ^^^^^^^^^^^^^^^ Cannot create `Tuple` element because in property `children`, children array [1] has an arity of 4 but tuple type [2] has an arity of 3.
  References:
   14: <Tuple>{true}foo{42}  </Tuple>; // Error: Spaces add items.
              ^^^^^^^^^^^^^^^ [1]: children array
    6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: tuple type

Error: tuple.js:16
 16: <Tuple>{[true, 'foo', 42]}{[true, 'foo', 42]}</Tuple>; // Error: There may only
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot create `Tuple` element because in property `children`, children array [1] has an arity of 2 but tuple type [2] has an arity of 3.
  References:
   16: <Tuple>{[true, 'foo', 42]}{[true, 'foo', 42]}</Tuple>; // Error: There may only
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: children array
    6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: tuple type

Error: tuple.js:16
 16: <Tuple>{[true, 'foo', 42]}{[true, 'foo', 42]}</Tuple>; // Error: There may only
             ^^^^^^^^^^^^^^^^^ Cannot create `Tuple` element because in property `children` and then index 0, array literal [1] is incompatible with boolean [2].
  References:
   16: <Tuple>{[true, 'foo', 42]}{[true, 'foo', 42]}</Tuple>; // Error: There may only
               ^^^^^^^^^^^^^^^^^ [1]: array literal
    6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                             ^^^^^^^ [2]: boolean

Error: tuple.js:16
 16: <Tuple>{[true, 'foo', 42]}{[true, 'foo', 42]}</Tuple>; // Error: There may only
                                ^^^^^^^^^^^^^^^^^ Cannot create `Tuple` element because in property `children` and then index 1, array literal [1] is incompatible with string [2].
  References:
   16: <Tuple>{[true, 'foo', 42]}{[true, 'foo', 42]}</Tuple>; // Error: There may only
                                  ^^^^^^^^^^^^^^^^^ [1]: array literal
    6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                                      ^^^^^^ [2]: string

Error: tuple.js:18
 18: <Tuple>{[true, 'foo', 42, null]}</Tuple>; // Error: One to many
             ^^^^^^^^^^^^^^^^^^^^^^^ Cannot create `Tuple` element because in property `children`, array literal [1] has an arity of 4 but tuple type [2] has an arity of 3.
  References:
   18: <Tuple>{[true, 'foo', 42, null]}</Tuple>; // Error: One to many
               ^^^^^^^^^^^^^^^^^^^^^^^ [1]: array literal
    6:   extends React.Component<{children: [boolean, string, number]}, void> {}
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: tuple type

Error: tuple.js:34
 34: <TupleOne>{true}</TupleOne>; // Error: A single expression is not an array.
                ^^^^ Cannot create `TupleOne` element because in property `children`, boolean [1] is incompatible with tuple type [2].
  References:
   34: <TupleOne>{true}</TupleOne>; // Error: A single expression is not an array.
                  ^^^^ [1]: boolean
    7: class TupleOne extends React.Component<{children: [boolean]}, void> {}
                                                         ^^^^^^^^^ [2]: tuple type

Error: view.js:31
 31: <View>
      ^^^^ Cannot create `View` element because in property `children`, property `a` is missing in `React.Element` [1] but exists in object literal [2].
  References:
    9:   | React$Element<any>
           ^^^^^^^^^^^^^^^^^^ [1]: `React.Element`
   32:   {{a: 1, b: 2, c: 3}}
          ^^^^^^^^^^^^^^^^^^ [2]: object literal

Error: view.js:35
 35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
               ^^^^^^^^^^^^^ JSX text. This type is incompatible with
     17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
                 ^^^^^^^^^^^^^ JSX text. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
                 ^^^^^^^^^^^^^ JSX text. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       35: <View>Hello, world!</View>; // Error: Strings are not allowed as children.
                 ^^^^^^^^^^^^^ JSX text. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean

Error: view.js:36
 36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                ^^^^^^^^^^^^^^^ string. This type is incompatible with
     17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                  ^^^^^^^^^^^^^^^ string. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                  ^^^^^^^^^^^^^^^ string. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       36: <View>{'Hello, world!'}</View>; // Error: Strings are not allowed as children.
                  ^^^^^^^^^^^^^^^ string. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean

Error: view.js:37
 37: <View>{42}</View>; // Error: Numbers are not allowed as children.
     ^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                ^^ number. This type is incompatible with
     17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
      Member 1:
        6:   | void
               ^^^^ undefined
      Error:
       37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                  ^^ number. This type is incompatible with
        6:   | void
               ^^^^ undefined
      Member 2:
        7:   | null
               ^^^^ null
      Error:
       37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                  ^^ number. This type is incompatible with
        7:   | null
               ^^^^ null
      Member 3:
        8:   | boolean
               ^^^^^^^ boolean
      Error:
       37: <View>{42}</View>; // Error: Numbers are not allowed as children.
                  ^^ number. This type is incompatible with
        8:   | boolean
               ^^^^^^^ boolean

Error: view.js:38
 38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
     ^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
               ^^^^^^^^^ children array. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                    ^ number. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                      ^ number. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                      ^ number. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           38: <View>{1}{2}{3}</View>; // Error: Numbers are not allowed as children.
                      ^ number. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean

Error: view.js:39
 39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                ^^^^^^^^^^^^^^^ array literal. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                     ^^^ string. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                       ^^^ string. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                       ^^^ string. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                       ^^^ string. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean

Error: view.js:39
 39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                ^^^^^^^^^^^^^^^ array literal. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                          ^^^ string. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                            ^^^ string. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                            ^^^ string. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                            ^^^ string. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean

Error: view.js:39
 39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                ^^^^^^^^^^^^^^^ array literal. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                               ^^^ string. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                                 ^^^ string. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                                 ^^^ string. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           39: <View>{['a', 'b', 'c']}</View>; // Error: Strings are not allowed deeply.
                                 ^^^ string. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean

Error: view.js:40
 40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
     ^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                ^^^^^^^^^ array literal. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                     ^ number. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                       ^ number. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                       ^ number. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                       ^ number. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean

Error: view.js:40
 40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
     ^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                ^^^^^^^^^ array literal. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                        ^ number. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                          ^ number. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                          ^ number. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                          ^ number. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean

Error: view.js:40
 40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
     ^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
 17: class View extends React.Component<{children: ReactNodeWithoutString}, void> {}
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `children` is incompatible:
     40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                ^^^^^^^^^ array literal. Has some incompatible type argument with
     10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type
      Type argument `T` is incompatible:
         40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                           ^ number. This type is incompatible with
         10:   | Array<ReactNodeWithoutString>; // NOTE: This is intentionally `Array<T>` and
                       ^^^^^^^^^^^^^^^^^^^^^^ union: undefined | null | boolean | `React.Element` | array type
          Member 1:
            6:   | void
                   ^^^^ undefined
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                             ^ number. This type is incompatible with
            6:   | void
                   ^^^^ undefined
          Member 2:
            7:   | null
                   ^^^^ null
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                             ^ number. This type is incompatible with
            7:   | null
                   ^^^^ null
          Member 3:
            8:   | boolean
                   ^^^^^^^ boolean
          Error:
           40: <View>{[1, 2, 3]}</View>; // Error: Numbers are not allowed deeply.
                             ^ number. This type is incompatible with
            8:   | boolean
                   ^^^^^^^ boolean


Found 107 errors
