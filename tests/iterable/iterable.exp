Error: array.js:7
  7: (["hi"]: Iterable<number>); // Error string ~> number
      ^^^^^^ Cannot cast array literal to `Iterable` because in property `@@iterator`, the return value, and then type argument `Yield`; string [1] is incompatible with number [2].
  References:
    7: (["hi"]: Iterable<number>); // Error string ~> number
         ^^^^ [1]: string
    7: (["hi"]: Iterable<number>); // Error string ~> number
                         ^^^^^^ [2]: number

Error: array.js:8
  8: (["hi", 1]: Iterable<string>); // Error number ~> string
      ^^^^^^^^^ Cannot cast array literal to `Iterable` because in property `@@iterator`, the return value, and then type argument `Yield`; number [1] is incompatible with string [2].
  References:
    8: (["hi", 1]: Iterable<string>); // Error number ~> string
               ^ [1]: number
    8: (["hi", 1]: Iterable<string>); // Error number ~> string
                            ^^^^^^ [2]: string

Error: caching_bug.js:21
 21: function miss_the_cache(x: Array<string | number>): Iterable<string> { return x; }
                                                                                   ^ Cannot return `x` because in property `@@iterator`, the return value, and then type argument `Yield`; number [1] is incompatible with string [2].
  References:
   21: function miss_the_cache(x: Array<string | number>): Iterable<string> { return x; }
                                                 ^^^^^^ [1]: number
   21: function miss_the_cache(x: Array<string | number>): Iterable<string> { return x; }
                                                                    ^^^^^^ [2]: string

Error: iterator_result.js:23
 23:         return { done, value: "still going..." }; // Error string ~> void
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected return type of
494:   | { done: false, +value: Yield };
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/core.js:494
  Property `done` is incompatible:
     23:         return { done, value: "still going..." }; // Error string ~> void
                          ^^^^ boolean. Expected boolean literal `false`, got `true` instead
    494:   | { done: false, +value: Yield };
                     ^^^^^ boolean literal `false`. See lib: <BUILTINS>/core.js:494

Error: iterator_result.js:25
 25:         return { done }; // Error void ~> string
                    ^^^^^^^^ object literal. This type is incompatible with the expected return type of
493:   | { done: true, +value?: Return }
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/core.js:493
  Property `done` is incompatible:
     25:         return { done }; // Error void ~> string
                          ^^^^ boolean. Expected boolean literal `true`, got `false` instead
    493:   | { done: true, +value?: Return }
                     ^^^^ boolean literal `true`. See lib: <BUILTINS>/core.js:493

Error: map.js:14
 14:   return map;
              ^^^ Cannot return `map` because in property `@@iterator`, the return value, and then type argument `Yield`; tuple type [1] is incompatible with string [2].
  References:
  541:     @@iterator(): Iterator<[K, V]>;
                                  ^^^^^^ [1]: tuple type. See lib: <BUILTINS>/core.js:541
   13: function mapTest4(map: Map<number, string>): Iterable<string> {
                                                             ^^^^^^ [2]: string

Error: set.js:14
 14:   return set;
              ^^^ Cannot return `set` because in property `@@iterator`, the return value, and then type argument `Yield`; string [1] is incompatible with number [2].
  References:
   13: function setTest4(set: Set<string>): Iterable<number> {
                                  ^^^^^^ [1]: string
   13: function setTest4(set: Set<string>): Iterable<number> {
                                                     ^^^^^^ [2]: number

Error: string.js:5
  5: ("hi": Iterable<number>); // Error - string is a Iterable<string>
      ^^^^ Cannot cast `"hi"` to `Iterable` because in property `@@iterator`, the return value, and then type argument `Yield`; string [1] is incompatible with number [2].
  References:
  288:     @@iterator(): Iterator<string>;
                                  ^^^^^^ [1]: string. See lib: <BUILTINS>/core.js:288
    5: ("hi": Iterable<number>); // Error - string is a Iterable<string>
                       ^^^^^^ [2]: number


Found 8 errors
