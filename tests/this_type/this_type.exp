Error: class_expr.js:6
  6:     this.x = 123; // error: property not found (must be declared)
              ^ Cannot assign `123` to `this.x` because property `x` is missing in `Thing` [1].
  References:
                     v------------
    4: const Thing = class Thing {
    5:   zark() {
    6:     this.x = 123; // error: property not found (must be declared)
    7:   }
    8: };
       ^ [1]: `Thing`

Error: contra.js:4
  4:   next: this; // error (see below for exploit): `this` should only appear in
             ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:15
 15:   foo<X: this>(that: X) { } // error: can't hide contravariance using a bound
              ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:19
 19:   foo<Y: this>(that: Y) { } // error (see above, catches hidden override)
              ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:25
 25:   out_object(): { _: this } { return { _: this }; }
                          ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:26
 26:   in_object(_: { _: this }) { }
                         ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:27
 27:   inout_object: { _: this };
                          ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:29
 29:   out_array(): Array<this> { return [this]; }
                          ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:30
 30:   in_array(_: Array<this>) { }
                         ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:31
 31:   inout_array: Array<this>;
                          ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:38
 38:   out_set(): Set<this> { return new Set().add(this); }
                      ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:39
 39:   in_set(_: Set<this>) { }
                     ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:40
 40:   inout_set: Set<this>;
                      ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:44
 44:   in_promise(_: Promise<this>) { }
                             ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: contra.js:45
 45:   inout_promise: Promise<this>;
                              ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:48
 48:   *out_generator(): Generator<this,this,this> {
                                             ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: contra.js:52
 52:   in_generator(_: Generator<this,this,this>) { }
                                 ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: contra.js:52
 52:   in_generator(_: Generator<this,this,this>) { }
                                      ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: contra.js:53
 53:   inout_generator: Generator<this,this,this>;
                                  ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:53
 53:   inout_generator: Generator<this,this,this>;
                                       ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: contra.js:53
 53:   inout_generator: Generator<this,this,this>;
                                            ^^^^ `this` type. invariant position (expected `this` to occur only covariantly)

Error: generics.js:6
  6: class ImplicitNumber extends Implicit { arg: number; }
                                  ^^^^^^^^ Implicit. Too few type arguments. Expected at least 1
  5: class Implicit<X> { arg: X; val: X; }
                    ^ See type parameters of definition here

Error: import.js:8
  8:   foo(): B1 { return new B1(); } // error
              ^^ Cannot extend `A1` [1] with `B1` because in property `foo` and then the return value, `B1` [2] is incompatible with `this` [3].
  References:
    7: class B1 extends A1 {
                        ^^ [1]: `A1`
    8:   foo(): B1 { return new B1(); } // error
                ^^ [2]: `B1`
    2:   foo(): this { return this; }
                ^^^^ [3]: `this`. See: export.js:2

Error: import.js:14
 14:   foo(): B3<X> { return new B3(); } // error
              ^^^^^ Cannot extend `A3` [1] with `B3` because in property `foo` and then the return value, `B3` [2] is incompatible with `this` [3].
  References:
   13: class B3<X> extends A3<X> {
                           ^^^^^ [1]: `A3`
   14:   foo(): B3<X> { return new B3(); } // error
                ^^^^^ [2]: `B3`
    7:   foo(): this { return this; }
                ^^^^ [3]: `this`. See: export.js:7

Error: import.js:18
 18: (new B3().qux(0): string); // error
      ^^^^^^^^^^^^^^^ Cannot cast `new B3().qux(...)` to string because number [1] is incompatible with string [2].
  References:
   18: (new B3().qux(0): string); // error
                     ^ [1]: number
   18: (new B3().qux(0): string); // error
                         ^^^^^^ [2]: string

Error: import.js:21
 21: ((new B3().bar(): B3<string>): A2<number>); // error
                          ^^^^^^ Cannot cast `new B3().bar()` to `A2` because in type argument `X`, string [1] is incompatible with number [2].
  References:
   21: ((new B3().bar(): B3<string>): A2<number>); // error
                            ^^^^^^ [1]: string
   21: ((new B3().bar(): B3<string>): A2<number>); // error
                                         ^^^^^^ [2]: number

Error: import.js:22
 22: ((new B3(): A2<number>).qux(0): string); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `new B3().qux(...)` to string because number [1] is incompatible with string [2].
  References:
   22: ((new B3(): A2<number>).qux(0): string); // error
                      ^^^^^^ [1]: number
   22: ((new B3(): A2<number>).qux(0): string); // error
                                       ^^^^^^ [2]: string

Error: interface.js:1
  1: interface I { xs: Array<this>; }
                             ^^^^ Unexpected use of `this` type

Error: self.js:4
  4:   bar(): this { return new A().foo(); } // same as returning : A, so error
                            ^^^^^^^^^^^^^ Cannot return `new A().foo()` because `A` [1] is incompatible with `this` [2].
  References:
    1: class A {
             ^ [1]: `A`
    4:   bar(): this { return new A().foo(); } // same as returning : A, so error
                ^^^^ [2]: `this`

Error: statics.js:17
 17: (A.make(): B); // error
      ^^^^^^^^ Cannot cast `A.make()` to `B` because `A` [1] is incompatible with `B` [2].
  References:
    4:   static make(): this { // factory method, whose return type `this` (still)
                        ^^^^ [1]: `A`
   17: (A.make(): B); // error
                  ^ [2]: `B`

Error: test.js:23
 23: (new Inherit().foo(): Inherit); // error (cf. OK below)
      ^^^^^^^^^^^^^^^^^^^ Cannot cast `new Inherit().foo()` to `Inherit` because `Base` [1] is incompatible with `Inherit` [2].
  References:
    3: class Base {
             ^^^^ [1]: `Base`
   23: (new Inherit().foo(): Inherit); // error (cf. OK below)
                             ^^^^^^^ [2]: `Inherit`

Error: test.js:23
 23: (new Inherit().foo(): Inherit); // error (cf. OK below)
      ^^^^^^^^^^^^^^^^^^^ Cannot cast `new Inherit().foo()` to `Inherit` because `Override` [1] is incompatible with `Inherit` [2].
  References:
   13: class Override extends Base {
             ^^^^^^^^ [1]: `Override`
   23: (new Inherit().foo(): Inherit); // error (cf. OK below)
                             ^^^^^^^ [2]: `Inherit`

Error: test.js:29
 29: (new InheritOverride().bar_caller(): InheritOverride); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `new InheritOverride().bar_caller()` to `InheritOverride` because `Base` [1] is incompatible with `InheritOverride` [2].
  References:
    3: class Base {
             ^^^^ [1]: `Base`
   29: (new InheritOverride().bar_caller(): InheritOverride); // error
                                            ^^^^^^^^^^^^^^^ [2]: `InheritOverride`

Error: test.js:29
 29: (new InheritOverride().bar_caller(): InheritOverride); // error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `new InheritOverride().bar_caller()` to `InheritOverride` because `Override` [1] is incompatible with `InheritOverride` [2].
  References:
   17:   bar() { return new Override; } // OK (cf. error below)
                        ^^^^^^^^^^^^ [1]: `Override`
   29: (new InheritOverride().bar_caller(): InheritOverride); // error
                                            ^^^^^^^^^^^^^^^ [2]: `InheritOverride`

Error: test.js:41
 41:   corge(that: this) { }
                   ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: test.js:51
 51:   bar(): Override2 { return new Override2; } // error (cf. OK above)
              ^^^^^^^^^ Cannot extend `Base2` [1] with `Override2` because in property `bar` and then the return value, `Override2` [2] is incompatible with `this` [3].
  References:
   47: class Override2 extends Base2 {
                               ^^^^^ [1]: `Base2`
   51:   bar(): Override2 { return new Override2; } // error (cf. OK above)
                ^^^^^^^^^ [2]: `Override2`
   38:   bar(): this { return this; }
                ^^^^ [3]: `this`

Error: test.js:56
 56:   grault(that: this) { } // error, too
                    ^^^^ Cannot extend `Base2` [1] with `Override2` because in property `grault` and then the first argument, `Override2` [2] is incompatible with `Base2` [3].
  References:
   47: class Override2 extends Base2 {
                               ^^^^^ [1]: `Base2`
   56:   grault(that: this) { } // error, too
                      ^^^^ [2]: `Override2`
   42:   grault(that: Base2) { }
                      ^^^^^ [3]: `Base2`

Error: test.js:56
 56:   grault(that: this) { } // error, too
                    ^^^^ Cannot extend `Base2` [1] with `Override2` because in property `grault` and then the first argument, `this` [2] is incompatible with `Base2` [3].
  References:
   47: class Override2 extends Base2 {
                               ^^^^^ [1]: `Base2`
   56:   grault(that: this) { } // error, too
                      ^^^^ [2]: `this`
   42:   grault(that: Base2) { }
                      ^^^^^ [3]: `Base2`

Error: test.js:54
 54:   corge(that: this) { } // error
                   ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)

Error: test.js:56
 56:   grault(that: this) { } // error, too
                    ^^^^ `this` type. contravariant position (expected `this` to occur only covariantly)


Found 40 errors
