Error: element_type.js:1
  1: type BadArity = $ElementType<number, number, number>;
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Incorrect number of type parameters (expected 2)

Error: element_type.js:7
  7: ('hello world': Arr_Elem);
      ^^^^^^^^^^^^^ Cannot cast `'hello world'` to `Arr_Elem` because string [1] is incompatible with number [2].
  References:
    7: ('hello world': Arr_Elem);
        ^^^^^^^^^^^^^ [1]: string
    7: ('hello world': Arr_Elem);
                       ^^^^^^^^ [2]: number

Error: element_type.js:18
 18: ('hello world': Obj_Elem);
      ^^^^^^^^^^^^^ Cannot cast `'hello world'` to `Obj_Elem` because string [1] is incompatible with number [2].
  References:
   18: ('hello world': Obj_Elem);
        ^^^^^^^^^^^^^ [1]: string
   18: ('hello world': Obj_Elem);
                       ^^^^^^^^ [2]: number

Error: errors.js:9
  9: declare function fn3<O>(o: O): $PropertyType<O, 'p'>;
                                    ^^^^^^^^^^^^^^^^^^^^^ property `p`. Property cannot be accessed on possibly null value
 25: fn3(null); // We should get an error on this line.
         ^^^^ null

Error: errors.js:10
 10: declare function fn4<O>(o: O): ($PropertyType<O, 'p'>) => void;
                                     ^^^^^^^^^^^^^^^^^^^^^ property `p`. Property cannot be accessed on possibly null value
 28: fn4(null)(); // We should get an error on this line.
         ^^^^ null

Error: errors.js:12
 12: type A = $PropertyType<{}, 'p'>; // We should get an error on this line.
              ^^^^^^^^^^^^^^^^^^^^^^ property `p`. Property not found in
 12: type A = $PropertyType<{}, 'p'>; // We should get an error on this line.
                            ^^ object type

Error: errors.js:16
 16: (null: B); // We should get an error on this line.
      ^^^^ null
  6: type P<O> = $PropertyType<O, 'p'>;
                 ^^^^^^^^^^^^^^^^^^^^^ property `p`. Property not found in
 15: type B = P<{}>;
                ^^ object type

Error: errors.js:18
 18: fn1({x: 42}); // We should get an error on this line.
     ^^^^^^^^^^^^ fn1(...)
  7: declare function fn1<O>(l: O): $ElementType<O, 'p'>;
                                                    ^^^ property `p`. Property not found in
 18: fn1({x: 42}); // We should get an error on this line.
         ^^^^^^^ object literal

Error: errors.js:19
 19: fn1(null); // We should get an error on this line.
     ^^^^^^^^^ fn1(...)
  7: declare function fn1<O>(l: O): $ElementType<O, 'p'>;
                                    ^^^^^^^^^^^^^^^^^^^^ $ElementType. Computed property/element cannot be accessed on possibly null value
 19: fn1(null); // We should get an error on this line.
         ^^^^ null

Error: errors.js:21
 21: fn2({x: 42})(); // We should get an error on this line.
     ^^^^^^^^^^^^ fn2(...)
  8: declare function fn2<O>(l: O): ($ElementType<O, 'p'>) => void;
                                                     ^^^ property `p`. Property not found in
 21: fn2({x: 42})(); // We should get an error on this line.
         ^^^^^^^ object literal

Error: errors.js:22
 22: fn2(null)(); // We should get an error on this line.
     ^^^^^^^^^ fn2(...)
  8: declare function fn2<O>(l: O): ($ElementType<O, 'p'>) => void;
                                     ^^^^^^^^^^^^^^^^^^^^ $ElementType. Computed property/element cannot be accessed on possibly null value
 22: fn2(null)(); // We should get an error on this line.
         ^^^^ null

Error: errors.js:24
 24: fn3({x: 42}); // We should get an error on this line.
     ^^^^^^^^^^^^ fn3(...)
  9: declare function fn3<O>(o: O): $PropertyType<O, 'p'>;
                                    ^^^^^^^^^^^^^^^^^^^^^ property `p`. Property not found in
 24: fn3({x: 42}); // We should get an error on this line.
         ^^^^^^^ object literal

Error: errors.js:27
 27: fn4({x: 42})(); // We should get an error on this line.
     ^^^^^^^^^^^^ fn4(...)
 10: declare function fn4<O>(o: O): ($PropertyType<O, 'p'>) => void;
                                     ^^^^^^^^^^^^^^^^^^^^^ property `p`. Property not found in
 27: fn4({x: 42})(); // We should get an error on this line.
         ^^^^^^^ object literal

Error: non_maybe_type.js:5
  5:   else return 0; // this should be an error
                   ^ number. This type is incompatible with the expected return type of
  3: function foo(x: ?string): $NonMaybeType<?string> {
                               ^^^^^^^^^^^^^^^^^^^^^^ string

Error: non_maybe_type.js:10
 10: (0: $NonMaybeType<null>); // error
      ^ Cannot cast `0` to `$NonMaybeType` because number [1] is incompatible with empty [2].
  References:
   10: (0: $NonMaybeType<null>); // error
        ^ [1]: number
   10: (0: $NonMaybeType<null>); // error
                         ^^^^ [2]: empty

Error: property_type.js:1
  1: type Malformed = $PropertyType<any, number>;
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected object type and string literal as arguments to $PropertyType

Error: property_type.js:6
  6: (42: Obj_Prop_x);
      ^^ Cannot cast `42` to `Obj_Prop_x` because number [1] is incompatible with string [2].
  References:
    6: (42: Obj_Prop_x);
        ^^ [1]: number
    6: (42: Obj_Prop_x);
            ^^^^^^^^^^ [2]: string

Error: property_type.js:10
 10:   else return 0;
                   ^ number. This type is incompatible with the expected return type of
  8: function foo(o: Obj): $PropertyType<Obj, 'x'> {
                           ^^^^^^^^^^^^^^^^^^^^^^^ string

Error: tvar3.js:20
 20: (fn1(a): B); // Error: A ~> B
      ^^^^^^ Cannot cast `fn1(...)` to `B` because `A` [1] is incompatible with `B` [2].
  References:
    6: declare var a: A;
                      ^ [1]: `A`
   20: (fn1(a): B); // Error: A ~> B
                ^ [2]: `B`

Error: tvar3.js:21
 21: (fn2((a: A) => {}): B => void); // Error: B ~> A
      ^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 21: (fn2((a: A) => {}): B => void); // Error: B ~> A
                         ^^^^^^^^^ function type
  The first parameter is incompatible:
     21: (fn2((a: A) => {}): B => void); // Error: B ~> A
                             ^ B. This type is incompatible with
     21: (fn2((a: A) => {}): B => void); // Error: B ~> A
                  ^ A

Error: tvar3.js:22
 22: (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
      ^^^^^^^^^^^^^^^^^^^^ Cannot cast `fn3(...)` to `C` because `A` [1] is incompatible with `C` [2].
  References:
    6: declare var a: A;
                      ^ [1]: `A`
   22: (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
                              ^ [2]: `C`

Error: tvar3.js:22
 22: (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
          ^ A. This type is incompatible with the expected param type of
 22: (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
                 ^ B

Error: tvar3.js:23
 23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
      ^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                            ^^^^^^^^^ function type
  The first parameter is incompatible:
     23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                                ^ C. This type is incompatible with
     23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                     ^ B

Error: tvar3.js:23
 23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
          ^ A. This type is incompatible with the expected param type of
 23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                 ^ B

Error: tvar3.js:25
 25: (fn5(a): B); // Error: A ~> B
      ^^^^^^ Cannot cast `fn5(...)` to `B` because `A` [1] is incompatible with `B` [2].
  References:
    6: declare var a: A;
                      ^ [1]: `A`
   25: (fn5(a): B); // Error: A ~> B
                ^ [2]: `B`

Error: tvar3.js:26
 26: (fn6((a: A) => {}): B => void); // Error: B ~> A
      ^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 26: (fn6((a: A) => {}): B => void); // Error: B ~> A
                         ^^^^^^^^^ function type
  The first parameter is incompatible:
     26: (fn6((a: A) => {}): B => void); // Error: B ~> A
                             ^ B. This type is incompatible with
     16: declare function fn6<T>(x: (T) => void): ($NonMaybeType<T>) => void;
                                                   ^^^^^^^^^^^^^^^^ A

Error: tvar3.js:27
 27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
      ^^^^^^^^^^^^^^^^^^^^ Cannot cast `fn7(...)` to `C` because `A` [1] is incompatible with `C` [2].
  References:
    6: declare var a: A;
                      ^ [1]: `A`
   27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
                              ^ [2]: `C`

Error: tvar3.js:27
 27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
          ^ A. This type is incompatible with the expected param type of
 27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
                 ^ B

Error: tvar3.js:27
 27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
             ^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 17: declare function fn7<T>(x: T, y: (T) => void): $NonMaybeType<T>;
                                      ^^^^^^^^^^^ function type
  The first parameter is incompatible:
     27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
              ^ A. This type is incompatible with
     17: declare function fn7<T>(x: T, y: (T) => void): $NonMaybeType<T>;
                                                        ^^^^^^^^^^^^^^^^ B

Error: tvar3.js:28
 28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
      ^^^^^^^^^^^^^^^^^^^^ function type. This type is incompatible with
 28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                            ^^^^^^^^^ function type
  The first parameter is incompatible:
     28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                                ^ C. This type is incompatible with
     18: declare function fn8<T>(x: T, y: (T) => void): ($NonMaybeType<T>) => void;
                                                         ^^^^^^^^^^^^^^^^ B

Error: tvar3.js:28
 28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
          ^ A. This type is incompatible with the expected param type of
 28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                 ^ B

Error: tvar3.js:28
 28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
             ^^^^^^^^^^^^ function. This type is incompatible with the expected param type of
 18: declare function fn8<T>(x: T, y: (T) => void): ($NonMaybeType<T>) => void;
                                      ^^^^^^^^^^^ function type
  The first parameter is incompatible:
     28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
              ^ A. This type is incompatible with
     18: declare function fn8<T>(x: T, y: (T) => void): ($NonMaybeType<T>) => void;
                                                         ^^^^^^^^^^^^^^^^ B

Error: tvar4.js:24
 24: fn1({p: 42}, (x: {}) => {});
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ fn1(...)
  3: function fn1<T: {p: any}>(a: T, b: T => void): $PropertyType<T, 'p'> {
                                                    ^^^^^^^^^^^^^^^^^^^^^ property `p`. Property not found in
 24: fn1({p: 42}, (x: {}) => {});
                      ^^ object type

Error: tvar4.js:25
 25: fn2({p: 42}, (x: {}) => {})('foo');
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ fn2(...)
  8: function fn2<T: {p: any}>(a: T, b: T => void): ($PropertyType<T, 'p'>) => void {
                                                     ^^^^^^^^^^^^^^^^^^^^^ property `p`. Property not found in
 25: fn2({p: 42}, (x: {}) => {})('foo');
                      ^^ object type

Error: tvar4.js:33
 33: fn3((x: {foo: string, p: number}) => {})({foo: 42});
                                                    ^^ Cannot call `fn3(...)` with object literal bound to the first parameter because in property `foo`, number [1] is incompatible with string [2].
  References:
   33: fn3((x: {foo: string, p: number}) => {})({foo: 42});
                                                      ^^ [1]: number
   33: fn3((x: {foo: string, p: number}) => {})({foo: 42});
                     ^^^^^^ [2]: string

Error: tvar4.js:38
 38: fn3((x: {foo: number}) => {})({foo: 42});
             ^^^^^^^^^^^^^ undefined property `p`. This type is incompatible with
 27: function fn3<T: {p: any}>(a: T => void): ($Rest<T, {|p: number|}>) => void {
                                                             ^^^^^^ number

Error: tvar4.js:43
 43:   return p => a({p});
                     ^^^ object literal. This type is incompatible with the expected param type of
 40: function fn4<T: {|p: any|}>(a: T => void): ($PropertyType<T, 'p'>) => void {
                                    ^ T

Error: tvar4.js:47
 47: fn4((x: {p: string}) => {})(42);
                                 ^^ number. This type is incompatible with the expected param type of
 40: function fn4<T: {|p: any|}>(a: T => void): ($PropertyType<T, 'p'>) => void {
                                                 ^^^^^^^^^^^^^^^^^^^^^ string

Error: tvar4.js:51
 51: fn4((x: {}) => {})(42);
     ^^^^^^^^^^^^^^^^^^ fn4(...)
 40: function fn4<T: {|p: any|}>(a: T => void): ($PropertyType<T, 'p'>) => void {
                                                 ^^^^^^^^^^^^^^^^^^^^^ property `p`. Property not found in
 51: fn4((x: {}) => {})(42);
             ^^ object type

Error: union.js:2
  2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
                                            ^^^^ boolean. This type is incompatible with
  2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: `$NonMaybeType`(s)
  Member 1:
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ $NonMaybeType
  Error:
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
                                              ^^^^ boolean. This type is incompatible with
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number
  Member 2:
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ $NonMaybeType
  Error:
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
                                              ^^^^ boolean. This type is incompatible with
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string

Error: union.js:4
  4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
                                                        ^^^^ boolean. This type is incompatible with
  4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: `$PropertyType`(s)
  Member 1:
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ $PropertyType
  Error:
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
                                                          ^^^^ boolean. This type is incompatible with
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number
  Member 2:
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ $PropertyType
  Error:
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
                                                          ^^^^ boolean. This type is incompatible with
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string

Error: union.js:10
 10: (null: P2); // err, null ~> string|number
      ^^^^ null. This type is incompatible with
 10: (null: P2); // err, null ~> string|number
            ^^ union: `P2`(s)
  Member 1:
    7: type P2 = $PropertyType<T, 'p'>; // NB: T is not resolved yet
                 ^^^^^^^^^^^^^^^^^^^^^ P2
  Error:
   10: (null: P2); // err, null ~> string|number
        ^^^^ null. This type is incompatible with
    7: type P2 = $PropertyType<T, 'p'>; // NB: T is not resolved yet
                 ^^^^^^^^^^^^^^^^^^^^^ string
  Member 2:
    7: type P2 = $PropertyType<T, 'p'>; // NB: T is not resolved yet
                 ^^^^^^^^^^^^^^^^^^^^^ P2
  Error:
   10: (null: P2); // err, null ~> string|number
        ^^^^ null. This type is incompatible with
    7: type P2 = $PropertyType<T, 'p'>; // NB: T is not resolved yet
                 ^^^^^^^^^^^^^^^^^^^^^ number


Found 42 errors
