Error: element_type.js:1
  1: type BadArity = $ElementType<number, number, number>;
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Incorrect number of type parameters (expected 2)

Error: element_type.js:7
  7: ('hello world': Arr_Elem);
      ^^^^^^^^^^^^^ Cannot cast `'hello world'` to `Arr_Elem` because string [1] is incompatible with number [2].
  References:
    7: ('hello world': Arr_Elem);
        ^^^^^^^^^^^^^ [1]: string
    7: ('hello world': Arr_Elem);
                       ^^^^^^^^ [2]: number

Error: element_type.js:18
 18: ('hello world': Obj_Elem);
      ^^^^^^^^^^^^^ Cannot cast `'hello world'` to `Obj_Elem` because string [1] is incompatible with number [2].
  References:
   18: ('hello world': Obj_Elem);
        ^^^^^^^^^^^^^ [1]: string
   18: ('hello world': Obj_Elem);
                       ^^^^^^^^ [2]: number

Error: errors.js:9
  9: declare function fn3<O>(o: O): $PropertyType<O, 'p'>;
                                    ^^^^^^^^^^^^^^^^^^^^^ property `p`. Property cannot be accessed on possibly null value
 25: fn3(null); // We should get an error on this line.
         ^^^^ null

Error: errors.js:10
 10: declare function fn4<O>(o: O): ($PropertyType<O, 'p'>) => void;
                                     ^^^^^^^^^^^^^^^^^^^^^ property `p`. Property cannot be accessed on possibly null value
 28: fn4(null)(); // We should get an error on this line.
         ^^^^ null

Error: errors.js:12
 12: type A = $PropertyType<{}, 'p'>; // We should get an error on this line.
              ^^^^^^^^^^^^^^^^^^^^^^ Property `p` is missing in object type [1].
  References:
   12: type A = $PropertyType<{}, 'p'>; // We should get an error on this line.
                              ^^ [1]: object type

Error: errors.js:16
 16: (null: B); // We should get an error on this line.
      ^^^^ Cannot cast `null` to `B` because property `p` is missing in object type [1].
  References:
   15: type B = P<{}>;
                  ^^ [1]: object type

Error: errors.js:18
 18: fn1({x: 42}); // We should get an error on this line.
     ^^^ Cannot call `fn1` because property `p` is missing in object literal [1].
  References:
   18: fn1({x: 42}); // We should get an error on this line.
           ^^^^^^^ [1]: object literal

Error: errors.js:19
 19: fn1(null); // We should get an error on this line.
     ^^^^^^^^^ fn1(...)
  7: declare function fn1<O>(l: O): $ElementType<O, 'p'>;
                                    ^^^^^^^^^^^^^^^^^^^^ $ElementType. Computed property/element cannot be accessed on possibly null value
 19: fn1(null); // We should get an error on this line.
         ^^^^ null

Error: errors.js:21
 21: fn2({x: 42})(); // We should get an error on this line.
     ^^^ Cannot call `fn2` because property `p` is missing in object literal [1].
  References:
   21: fn2({x: 42})(); // We should get an error on this line.
           ^^^^^^^ [1]: object literal

Error: errors.js:22
 22: fn2(null)(); // We should get an error on this line.
     ^^^^^^^^^ fn2(...)
  8: declare function fn2<O>(l: O): ($ElementType<O, 'p'>) => void;
                                     ^^^^^^^^^^^^^^^^^^^^ $ElementType. Computed property/element cannot be accessed on possibly null value
 22: fn2(null)(); // We should get an error on this line.
         ^^^^ null

Error: errors.js:24
 24: fn3({x: 42}); // We should get an error on this line.
     ^^^ Cannot call `fn3` because property `p` is missing in object literal [1].
  References:
   24: fn3({x: 42}); // We should get an error on this line.
           ^^^^^^^ [1]: object literal

Error: errors.js:27
 27: fn4({x: 42})(); // We should get an error on this line.
     ^^^ Cannot call `fn4` because property `p` is missing in object literal [1].
  References:
   27: fn4({x: 42})(); // We should get an error on this line.
           ^^^^^^^ [1]: object literal

Error: non_maybe_type.js:5
  5:   else return 0; // this should be an error
                   ^ Cannot return `0` because number [1] is incompatible with string [2].
  References:
    5:   else return 0; // this should be an error
                     ^ [1]: number
    3: function foo(x: ?string): $NonMaybeType<?string> {
                                                ^^^^^^ [2]: string

Error: non_maybe_type.js:10
 10: (0: $NonMaybeType<null>); // error
      ^ Cannot cast `0` to `$NonMaybeType` because number [1] is incompatible with empty [2].
  References:
   10: (0: $NonMaybeType<null>); // error
        ^ [1]: number
   10: (0: $NonMaybeType<null>); // error
                         ^^^^ [2]: empty

Error: property_type.js:1
  1: type Malformed = $PropertyType<any, number>;
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected object type and string literal as arguments to $PropertyType

Error: property_type.js:6
  6: (42: Obj_Prop_x);
      ^^ Cannot cast `42` to `Obj_Prop_x` because number [1] is incompatible with string [2].
  References:
    6: (42: Obj_Prop_x);
        ^^ [1]: number
    6: (42: Obj_Prop_x);
            ^^^^^^^^^^ [2]: string

Error: property_type.js:10
 10:   else return 0;
                   ^ Cannot return `0` because number [1] is incompatible with string [2].
  References:
   10:   else return 0;
                     ^ [1]: number
    3: type Obj = { x: string };
                       ^^^^^^ [2]: string

Error: tvar3.js:20
 20: (fn1(a): B); // Error: A ~> B
      ^^^^^^ Cannot cast `fn1(...)` to `B` because `A` [1] is incompatible with `B` [2].
  References:
    6: declare var a: A;
                      ^ [1]: `A`
   20: (fn1(a): B); // Error: A ~> B
                ^ [2]: `B`

Error: tvar3.js:21
 21: (fn2((a: A) => {}): B => void); // Error: B ~> A
              ^ Cannot cast `fn2(...)` to function type because in the first argument, `A` [1] is incompatible with `B` [2].
  References:
   21: (fn2((a: A) => {}): B => void); // Error: B ~> A
                ^ [1]: `A`
   21: (fn2((a: A) => {}): B => void); // Error: B ~> A
                           ^ [2]: `B`

Error: tvar3.js:22
 22: (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
      ^^^^^^^^^^^^^^^^^^^^ Cannot cast `fn3(...)` to `C` because `A` [1] is incompatible with `C` [2].
  References:
    6: declare var a: A;
                      ^ [1]: `A`
   22: (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
                              ^ [2]: `C`

Error: tvar3.js:22
 22: (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
          ^ Cannot call `fn3` with `a` bound to `x` because `A` [1] is incompatible with `B` [2].
  References:
    6: declare var a: A;
                      ^ [1]: `A`
   22: (fn3(a, (b: B) => {}): C); // Error: A ~> C and A ~> B. Not B ~> C!
                   ^ [2]: `B`

Error: tvar3.js:23
 23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                 ^ Cannot cast `fn4(...)` to function type because in the first argument, `B` [1] is incompatible with `C` [2].
  References:
   23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                   ^ [1]: `B`
   23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                              ^ [2]: `C`

Error: tvar3.js:23
 23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
          ^ Cannot call `fn4` with `a` bound to `x` because `A` [1] is incompatible with `B` [2].
  References:
    6: declare var a: A;
                      ^ [1]: `A`
   23: (fn4(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B. Not C ~> B!
                   ^ [2]: `B`

Error: tvar3.js:25
 25: (fn5(a): B); // Error: A ~> B
      ^^^^^^ Cannot cast `fn5(...)` to `B` because `A` [1] is incompatible with `B` [2].
  References:
    6: declare var a: A;
                      ^ [1]: `A`
   25: (fn5(a): B); // Error: A ~> B
                ^ [2]: `B`

Error: tvar3.js:26
 26: (fn6((a: A) => {}): B => void); // Error: B ~> A
      ^^^^^^^^^^^^^^^^^ Cannot cast `fn6(...)` to function type because in the first argument, `A` [1] is incompatible with `B` [2].
  References:
   26: (fn6((a: A) => {}): B => void); // Error: B ~> A
                ^ [1]: `A`
   26: (fn6((a: A) => {}): B => void); // Error: B ~> A
                           ^ [2]: `B`

Error: tvar3.js:27
 27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
      ^^^^^^^^^^^^^^^^^^^^ Cannot cast `fn7(...)` to `C` because `A` [1] is incompatible with `C` [2].
  References:
    6: declare var a: A;
                      ^ [1]: `A`
   27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
                              ^ [2]: `C`

Error: tvar3.js:27
 27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
          ^ Cannot call `fn7` with `a` bound to `x` because `A` [1] is incompatible with `B` [2].
  References:
    6: declare var a: A;
                      ^ [1]: `A`
   27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
                   ^ [2]: `B`

Error: tvar3.js:27
 27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
                 ^ Cannot call `fn7` with function bound to `y` because in the first argument, `B` [1] is incompatible with `A` [2].
  References:
   27: (fn7(a, (b: B) => {}): C); // Error: A ~> C and A ~> B twice. Not B ~> C!
                   ^ [1]: `B`
    6: declare var a: A;
                      ^ [2]: `A`

Error: tvar3.js:28
 28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
      ^^^^^^^^^^^^^^^^^^^^ Cannot cast `fn8(...)` to function type because in the first argument, `B` [1] is incompatible with `C` [2].
  References:
   28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                   ^ [1]: `B`
   28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                              ^ [2]: `C`

Error: tvar3.js:28
 28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
          ^ Cannot call `fn8` with `a` bound to `x` because `A` [1] is incompatible with `B` [2].
  References:
    6: declare var a: A;
                      ^ [1]: `A`
   28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                   ^ [2]: `B`

Error: tvar3.js:28
 28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                 ^ Cannot call `fn8` with function bound to `y` because in the first argument, `B` [1] is incompatible with `A` [2].
  References:
   28: (fn8(a, (b: B) => {}): C => void); // Error: C ~> B and A ~> B twice. Not C ~> B!
                   ^ [1]: `B`
    6: declare var a: A;
                      ^ [2]: `A`

Error: tvar4.js:24
 24: fn1({p: 42}, (x: {}) => {});
     ^^^ Cannot call `fn1` because property `p` is missing in object type [1].
  References:
   24: fn1({p: 42}, (x: {}) => {});
                        ^^ [1]: object type

Error: tvar4.js:25
 25: fn2({p: 42}, (x: {}) => {})('foo');
     ^^^ Cannot call `fn2` because property `p` is missing in object type [1].
  References:
   25: fn2({p: 42}, (x: {}) => {})('foo');
                        ^^ [1]: object type

Error: tvar4.js:33
 33: fn3((x: {foo: string, p: number}) => {})({foo: 42});
                                                    ^^ Cannot call `fn3(...)` with object literal bound to the first parameter because in property `foo`, number [1] is incompatible with string [2].
  References:
   33: fn3((x: {foo: string, p: number}) => {})({foo: 42});
                                                      ^^ [1]: number
   33: fn3((x: {foo: string, p: number}) => {})({foo: 42});
                     ^^^^^^ [2]: string

Error: tvar4.js:38
 38: fn3((x: {foo: number}) => {})({foo: 42});
             ^^^^^^^^^^^^^ Cannot call `fn3` because undefined property `p` [1] is incompatible with number [2].
  References:
   38: fn3((x: {foo: number}) => {})({foo: 42});
               ^^^^^^^^^^^^^ [1]: undefined property `p`
   27: function fn3<T: {p: any}>(a: T => void): ($Rest<T, {|p: number|}>) => void {
                                                               ^^^^^^ [2]: number

Error: tvar4.js:43
 43:   return p => a({p});
                     ^^^ Cannot call `a` with object literal bound to the first parameter because object literal [1] is incompatible with `T` [2].
  References:
   43:   return p => a({p});
                       ^^^ [1]: object literal
   40: function fn4<T: {|p: any|}>(a: T => void): ($PropertyType<T, 'p'>) => void {
                                      ^ [2]: `T`

Error: tvar4.js:47
 47: fn4((x: {p: string}) => {})(42);
                                 ^^ Cannot call `fn4(...)` with `42` bound to the first parameter because number [1] is incompatible with string [2].
  References:
   47: fn4((x: {p: string}) => {})(42);
                                   ^^ [1]: number
   47: fn4((x: {p: string}) => {})(42);
                   ^^^^^^ [2]: string

Error: tvar4.js:51
 51: fn4((x: {}) => {})(42);
     ^^^ Cannot call `fn4` because property `p` is missing in object type [1].
  References:
   51: fn4((x: {}) => {})(42);
               ^^ [1]: object type

Error: union.js:2
  2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
                                            ^^^^ boolean. This type is incompatible with
  2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: `$NonMaybeType`(s)
  Member 1:
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ $NonMaybeType
  Error:
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
                                              ^^^^ boolean. This type is incompatible with
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number
  Member 2:
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ $NonMaybeType
  Error:
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
                                              ^^^^ boolean. This type is incompatible with
    2: var x1: $NonMaybeType<number|string> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string

Error: union.js:4
  4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
                                                        ^^^^ boolean. This type is incompatible with
  4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: `$PropertyType`(s)
  Member 1:
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ $PropertyType
  Error:
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
                                                          ^^^^ boolean. This type is incompatible with
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number
  Member 2:
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ $PropertyType
  Error:
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
                                                          ^^^^ boolean. This type is incompatible with
    4: var x3: $PropertyType<{p:number}|{p:string},'p'> = true; // err, boolean ~> number|string
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string

Error: union.js:10
 10: (null: P2); // err, null ~> string|number
      ^^^^ null. This type is incompatible with
 10: (null: P2); // err, null ~> string|number
            ^^ union: `P2`(s)
  Member 1:
    7: type P2 = $PropertyType<T, 'p'>; // NB: T is not resolved yet
                 ^^^^^^^^^^^^^^^^^^^^^ P2
  Error:
   10: (null: P2); // err, null ~> string|number
        ^^^^ null. This type is incompatible with
    7: type P2 = $PropertyType<T, 'p'>; // NB: T is not resolved yet
                 ^^^^^^^^^^^^^^^^^^^^^ string
  Member 2:
    7: type P2 = $PropertyType<T, 'p'>; // NB: T is not resolved yet
                 ^^^^^^^^^^^^^^^^^^^^^ P2
  Error:
   10: (null: P2); // err, null ~> string|number
        ^^^^ null. This type is incompatible with
    7: type P2 = $PropertyType<T, 'p'>; // NB: T is not resolved yet
                 ^^^^^^^^^^^^^^^^^^^^^ number


Found 42 errors
