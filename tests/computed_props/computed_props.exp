Error ----------------------------------------------------------------------------------------------------- test.js:19:2

Cannot cast `ColorIdToNumber[ColorId.RED]` to string literal `ffffff` because string is incompatible with string literal
`ffffff`.

Error: test.js:19
 19: (ColorIdToNumber[ColorId.RED]: 'ffffff'); // oops
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `ColorIdToNumber[ColorId.RED]` to string literal `ffffff` because string [1] is incompatible with string literal `ffffff` [2].
  References:
    8:   RED: 'ff0000',
              ^^^^^^^^ [1]: string
   19: (ColorIdToNumber[ColorId.RED]: 'ffffff'); // oops
                                      ^^^^^^^^ [2]: string literal `ffffff`

Error ---------------------------------------------------------------------------------------------------- test.js:21:17

Cannot get `ColorIdToNumber.XXX` because property `XXX` is missing in object literal.

Error: test.js:21
 21: ColorIdToNumber.XXX; // oops
                     ^^^ Cannot get `ColorIdToNumber.XXX` because property `XXX` is missing in object literal [1].
  References:
                             v
   13: var ColorIdToNumber = {
   14:   [ColorId.RED]: ColorNumber.RED,
   15:   [ColorId.GREEN]: ColorNumber.GREEN,
   16:   [ColorId.BLUE]: ColorNumber.BLUE,
   17: };
       ^ [1]: object literal

Error ----------------------------------------------------------------------------------------------------- test2.js:8:2

Cannot cast `ColorIdToNumber[ColorId.GREEN]` to string literal `ffffff` because string is incompatible with string
literal `ffffff`.

Error: test2.js:8
  8: (ColorIdToNumber[ColorId.GREEN]: 'ffffff'); // oops
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `ColorIdToNumber[ColorId.GREEN]` to string literal `ffffff` because string [1] is incompatible with string literal `ffffff` [2].
  References:
    9:   GREEN: '00ff00',
                ^^^^^^^^ [1]: string. See: test.js:9
    8: (ColorIdToNumber[ColorId.GREEN]: 'ffffff'); // oops
                                        ^^^^^^^^ [2]: string literal `ffffff`

Error ----------------------------------------------------------------------------------------------------- test3.js:4:2

Cannot cast `ColorIdToNumber[ColorId.BLUE]` to string literal `ffffff` because string is incompatible with string
literal `ffffff`.

Error: test3.js:4
  4: (ColorIdToNumber[ColorId.BLUE]: 'ffffff'); // oops
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `ColorIdToNumber[ColorId.BLUE]` to string literal `ffffff` because string [1] is incompatible with string literal `ffffff` [2].
  References:
   10:   BLUE: '0000ff',
               ^^^^^^^^ [1]: string. See: test.js:10
    4: (ColorIdToNumber[ColorId.BLUE]: 'ffffff'); // oops
                                       ^^^^^^^^ [2]: string literal `ffffff`

Error ----------------------------------------------------------------------------------------------------- test6.js:2:2

Cannot cast `o.hello` to string literal `nothing` because string is incompatible with string literal `nothing`.

Error: test6.js:2
  2: (o.hello: 'nothing'); // oops
      ^^^^^^^ Cannot cast `o.hello` to string literal `nothing` because string [1] is incompatible with string literal `nothing` [2].
  References:
    5:   [hello]: 'world',
                  ^^^^^^^ [1]: string. See: test5.js:5
    2: (o.hello: 'nothing'); // oops
                 ^^^^^^^^^ [2]: string literal `nothing`

Error ---------------------------------------------------------------------------------------------------- test7.js:2:17

Cannot assign `obj['m']()` to `x` because number is incompatible with string.

Error: test7.js:2
  2: var x: string = obj['m'](); // error, number ~> string
                     ^^^^^^^^^^ Cannot assign `obj['m']()` to `x` because number [1] is incompatible with string [2].
  References:
    1: var obj = {x: 0, m() { return this.x }}
                     ^ [1]: number
    2: var x: string = obj['m'](); // error, number ~> string
              ^^^^^^ [2]: string

Error ---------------------------------------------------------------------------------------------------- test7.js:5:17

Cannot assign `arr[0]()` to `y` because number is incompatible with string.

Error: test7.js:5
  5: var y: string = arr[0](); // error: number ~> string
                     ^^^^^^^^ Cannot assign `arr[0]()` to `y` because number [1] is incompatible with string [2].
  References:
  275:     length: number;
                   ^^^^^^ [1]: number. See lib: <BUILTINS>/core.js:275
    5: var y: string = arr[0](); // error: number ~> string
              ^^^^^^ [2]: string


Found 7 errors
