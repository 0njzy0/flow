Error: annot.js:3
  3: class B extends A { } // OK, same as above
                     ^ A. Too few type arguments. Expected at least 1
  1: class A<X> { }
             ^ See type parameters of definition here

Error: annot.js:10
 10:   return (new A: A<{}>) || (new A: A<{x: string}>);
                                        ^^^^^^^^^^^^^^ A. This type is incompatible with the expected return type of
  9: function bar(): A<*> { // error, * can't be {} and {x: string} at the same time
                     ^^^^ A
  Type argument `X` is incompatible:
     10:   return (new A: A<{}>) || (new A: A<{x: string}>);
                                              ^^^^^^^^^^^ object type. This type is incompatible with
     10:   return (new A: A<{}>) || (new A: A<{x: string}>);
                            ^^ object type
      Property `x` is incompatible:
         10:   return (new A: A<{}>) || (new A: A<{x: string}>);
                                                  ^^^^^^^^^^^ property `x`. Property not found in
         10:   return (new A: A<{}>) || (new A: A<{x: string}>);
                                ^^ object type

Error: error.js:8
  8: newFn1('string'); // The error should point here.
            ^^^^^^^^ string. This type is incompatible with the expected param type of
  7: const newFn1 = fn1((x: number) => {});
                            ^^^^^^ number

Error: error.js:12
 12: newFn2((x: string) => {}); // The error should point here.
                ^^^^^^ Cannot call `newFn2` with function bound to the first parameter because in the first argument, string [1] is incompatible with number [2].
  References:
   12: newFn2((x: string) => {}); // The error should point here.
                  ^^^^^^ [1]: string
   11: const newFn2 = fn2(42);
                          ^^ [2]: number

Error: error.js:15
 15: fn3(42, (x: string) => {}); // The error should point to 42 and not string.
         ^^ number. This type is incompatible with the expected param type of
 15: fn3(42, (x: string) => {}); // The error should point to 42 and not string.
                 ^^^^^^ string

Error: error.js:20
 20: (newVal4: string); // The error should point here.
      ^^^^^^^ Cannot cast `newVal4` to string because number [1] is incompatible with string [2].
  References:
   19: newFn4(42);
              ^^ [1]: number
   20: (newVal4: string); // The error should point here.
                 ^^^^^^ [2]: string

Error: implicit_bounded_instantiation.js:15
 15: var a: C<*> = new C();
                   ^^^^^^^ Cannot assign `new C()` to `a` because in type argument `T`, `Base` [1] is incompatible with `Middle` [2].
  References:
   20: a.meth(new Base()); // Error: Base ~> Middle
              ^^^^^^^^^^ [1]: `Base`
    7: class C<T: Middle> {
                  ^^^^^^ [2]: `Middle`

Error: implicit_bounded_instantiation.js:15
 15: var a: C<*> = new C();
                   ^^^^^^^ Cannot assign `new C()` to `a` because in type argument `T`, number [1] is incompatible with `Middle` [2].
  References:
   19: a.meth(42); // Error: number ~> Middle
              ^^ [1]: number
    7: class C<T: Middle> {
                  ^^^^^^ [2]: `Middle`

Error: implicit_bounded_instantiation.js:19
 19: a.meth(42); // Error: number ~> Middle
            ^^ number. This type is incompatible with the expected param type of
  7: class C<T: Middle> {
                ^^^^^^ Middle

Error: implicit_bounded_instantiation.js:20
 20: a.meth(new Base()); // Error: Base ~> Middle
            ^^^^^^^^^^ Cannot call `a.meth` with `new Base()` bound to `a` because `Base` [1] is incompatible with `Middle` [2].
  References:
   20: a.meth(new Base()); // Error: Base ~> Middle
              ^^^^^^^^^^ [1]: `Base`
    7: class C<T: Middle> {
                  ^^^^^^ [2]: `Middle`

Error: phantom.js:7
  7: (a: B); // Error
      ^ Cannot cast `a` to `B` because in type argument `Phantom`, number [1] is incompatible with string [2].
  References:
    3: type A = T<number>;
                  ^^^^^^ [1]: number
    4: type B = T<string>;
                  ^^^^^^ [2]: string

Error: phantom.js:15
 15: (c: D); // Error
      ^ Cannot cast `c` to `D` because in type argument `Phantom`, number [1] is incompatible with string [2].
  References:
   11: type C = T<number>;
                  ^^^^^^ [1]: number
   12: type D = T<string>;
                  ^^^^^^ [2]: string

Error: poly.js:17
 17: var x:string = foo.x;
                    ^^^^^ Cannot assign `foo.x` to `x` because number [1] is incompatible with string [2].
  References:
   16: var foo = new Foo(0);
                         ^ [1]: number
   17: var x:string = foo.x;
             ^^^^^^ [2]: string

Error: poly.js:17
 17: var x:string = foo.x;
                    ^^^^^ Cannot assign `foo.x` to `x` because number [1] is incompatible with string [2].
  References:
   18: var z:Foo<number> = Q.bar(foo,"");
                 ^^^^^^ [1]: number
   17: var x:string = foo.x;
             ^^^^^^ [2]: string

Error: poly.js:18
 18: var z:Foo<number> = Q.bar(foo,"");
                                   ^^ Cannot assign `Q.bar(...)` to `z` because in type argument `T`, string [1] is incompatible with number [2].
  References:
   18: var z:Foo<number> = Q.bar(foo,"");
                                     ^^ [1]: string
   18: var z:Foo<number> = Q.bar(foo,"");
                 ^^^^^^ [2]: number

Error: test.js:7
  7: class D extends C {
           ^ D. Cannot extend
  7: class D extends C {
                     ^ C
  Property `foo` is incompatible:
      8:   foo(x: number): number { return x; } // error (specialization, see below)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with
      2:   foo<X>(x: X): X { return x; }
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function
      The first parameter is incompatible:
          2:   foo<X>(x: X): X { return x; }
                         ^ X. This type is incompatible with
          8:   foo(x: number): number { return x; } // error (specialization, see below)
                      ^^^^^^ number

Error: test.js:7
  7: class D extends C {
           ^ D. Cannot extend
  7: class D extends C {
                     ^ C
  Property `foo` is incompatible:
      8:   foo(x: number): number { return x; } // error (specialization, see below)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function. This type is incompatible with
      2:   foo<X>(x: X): X { return x; }
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function
      The return is incompatible:
          8:   foo(x: number): number { return x; } // error (specialization, see below)
                               ^^^^^^ number. This type is incompatible with
          2:   foo<X>(x: X): X { return x; }
                             ^ X


Found 17 errors
