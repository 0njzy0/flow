Error: annot.js:3
  3: class B extends A { } // OK, same as above
                     ^ Cannot use `A` [1] with less than 1 type argument.
  References:
    1: class A<X> { }
               ^ [1]: `A`

Error: annot.js:10
 10:   return (new A: A<{}>) || (new A: A<{x: string}>);
                                        ^^^^^^^^^^^^^^ Cannot return `new A() || new A()` because in type argument `X`, property `x` is missing in object type [1] but exists in object type [2].
  References:
   10:   return (new A: A<{}>) || (new A: A<{x: string}>);
                          ^^ [1]: object type
   10:   return (new A: A<{}>) || (new A: A<{x: string}>);
                                            ^^^^^^^^^^^ [2]: object type

Error: error.js:8
  8: newFn1('string'); // The error should point here.
            ^^^^^^^^ Cannot call `newFn1` with `'string'` bound to the first parameter because string [1] is incompatible with number [2].
  References:
    8: newFn1('string'); // The error should point here.
              ^^^^^^^^ [1]: string
    7: const newFn1 = fn1((x: number) => {});
                              ^^^^^^ [2]: number

Error: error.js:12
 12: newFn2((x: string) => {}); // The error should point here.
                ^^^^^^ Cannot call `newFn2` with function bound to the first parameter because in the first argument, string [1] is incompatible with number [2].
  References:
   12: newFn2((x: string) => {}); // The error should point here.
                  ^^^^^^ [1]: string
   11: const newFn2 = fn2(42);
                          ^^ [2]: number

Error: error.js:15
 15: fn3(42, (x: string) => {}); // The error should point to 42 and not string.
         ^^ Cannot call `fn3` with `42` bound to `x` because number [1] is incompatible with string [2].
  References:
   15: fn3(42, (x: string) => {}); // The error should point to 42 and not string.
           ^^ [1]: number
   15: fn3(42, (x: string) => {}); // The error should point to 42 and not string.
                   ^^^^^^ [2]: string

Error: error.js:20
 20: (newVal4: string); // The error should point here.
      ^^^^^^^ Cannot cast `newVal4` to string because number [1] is incompatible with string [2].
  References:
   19: newFn4(42);
              ^^ [1]: number
   20: (newVal4: string); // The error should point here.
                 ^^^^^^ [2]: string

Error: implicit_bounded_instantiation.js:15
 15: var a: C<*> = new C();
            ^^^^ Cannot instantiate `C` because in type argument `T`, `Base` [1] is incompatible with `Middle` [2].
  References:
   20: a.meth(new Base()); // Error: Base ~> Middle
              ^^^^^^^^^^ [1]: `Base`
    7: class C<T: Middle> {
                  ^^^^^^ [2]: `Middle`

Error: implicit_bounded_instantiation.js:15
 15: var a: C<*> = new C();
            ^^^^ Cannot instantiate `C` because in type argument `T`, number [1] is incompatible with `Middle` [2].
  References:
   19: a.meth(42); // Error: number ~> Middle
              ^^ [1]: number
    7: class C<T: Middle> {
                  ^^^^^^ [2]: `Middle`

Error: implicit_bounded_instantiation.js:19
 19: a.meth(42); // Error: number ~> Middle
            ^^ Cannot call `a.meth` with `42` bound to `a` because number [1] is incompatible with `Middle` [2].
  References:
   19: a.meth(42); // Error: number ~> Middle
              ^^ [1]: number
    7: class C<T: Middle> {
                  ^^^^^^ [2]: `Middle`

Error: implicit_bounded_instantiation.js:20
 20: a.meth(new Base()); // Error: Base ~> Middle
            ^^^^^^^^^^ Cannot call `a.meth` with `new Base()` bound to `a` because `Base` [1] is incompatible with `Middle` [2].
  References:
   20: a.meth(new Base()); // Error: Base ~> Middle
              ^^^^^^^^^^ [1]: `Base`
    7: class C<T: Middle> {
                  ^^^^^^ [2]: `Middle`

Error: phantom.js:7
  7: (a: B); // Error
      ^ Cannot cast `a` to `B` because in type argument `Phantom`, number [1] is incompatible with string [2].
  References:
    3: type A = T<number>;
                  ^^^^^^ [1]: number
    4: type B = T<string>;
                  ^^^^^^ [2]: string

Error: phantom.js:15
 15: (c: D); // Error
      ^ Cannot cast `c` to `D` because in type argument `Phantom`, number [1] is incompatible with string [2].
  References:
   11: type C = T<number>;
                  ^^^^^^ [1]: number
   12: type D = T<string>;
                  ^^^^^^ [2]: string

Error: poly.js:17
 17: var x:string = foo.x;
                    ^^^^^ Cannot assign `foo.x` to `x` because number [1] is incompatible with string [2].
  References:
   16: var foo = new Foo(0);
                         ^ [1]: number
   17: var x:string = foo.x;
             ^^^^^^ [2]: string

Error: poly.js:17
 17: var x:string = foo.x;
                    ^^^^^ Cannot assign `foo.x` to `x` because number [1] is incompatible with string [2].
  References:
   18: var z:Foo<number> = Q.bar(foo,"");
                 ^^^^^^ [1]: number
   17: var x:string = foo.x;
             ^^^^^^ [2]: string

Error: poly.js:18
 18: var z:Foo<number> = Q.bar(foo,"");
                                   ^^ Cannot assign `Q.bar(...)` to `z` because in type argument `T`, string [1] is incompatible with number [2].
  References:
   18: var z:Foo<number> = Q.bar(foo,"");
                                     ^^ [1]: string
   18: var z:Foo<number> = Q.bar(foo,"");
                 ^^^^^^ [2]: number

Error: test.js:8
  8:   foo(x: number): number { return x; } // error (specialization, see below)
              ^^^^^^ Cannot extend `C` [1] with `D` because in property `foo` and then the first argument, number [2] is incompatible with `X` [3].
  References:
    7: class D extends C {
                       ^ [1]: `C`
    8:   foo(x: number): number { return x; } // error (specialization, see below)
                ^^^^^^ [2]: number
    2:   foo<X>(x: X): X { return x; }
                   ^ [3]: `X`

Error: test.js:8
  8:   foo(x: number): number { return x; } // error (specialization, see below)
                       ^^^^^^ Cannot extend `C` [1] with `D` because in property `foo` and then the return value, number [2] is incompatible with `X` [3].
  References:
    7: class D extends C {
                       ^ [1]: `C`
    8:   foo(x: number): number { return x; } // error (specialization, see below)
                         ^^^^^^ [2]: number
    2:   foo<X>(x: X): X { return x; }
                       ^ [3]: `X`


Found 17 errors
