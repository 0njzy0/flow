Error: c.js:5
  5: c.foo();
       ^^^ property `foo`. Property not found in
  5: c.foo();
     ^ object literal

Error: object_assign.js:7
  7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
  7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                       ^^^^^^^^^^^^^^^^^^^^^^ object type
  Property `bar` is incompatible:
      7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                           ^^^^^^^^^^^^^^^^^^^^^^ property `bar`. Property not found in
      7: var decl_export_: { foo: any; bar: any } = Object.assign({}, export_);
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal

Error: object_create.js:12
 12: ({ foo: "foo" }: C);
      ^^^^^^^^^^^^^^ Cannot cast object literal to `C` because object literal [1] is incompatible with `C` [2].
  References:
   12: ({ foo: "foo" }: C);
        ^^^^^^^^^^^^^^ [1]: object literal
   12: ({ foo: "foo" }: C);
                        ^ [2]: `C`

Error: object_create.js:17
 17: (o: C);
      ^ Cannot cast `o` to `C` because `O` [1] is incompatible with `C` [2].
  References:
   16: declare var o: O;
                      ^ [1]: `O`
   17: (o: C);
           ^ [2]: `C`

Error: object_keys.js:5
  5: (Object.keys(sealed): void); // error, Array<string>
      ^^^^^^^^^^^^^^^^^^^ Cannot cast `Object.keys(...)` to undefined because array type [1] is incompatible with undefined [2].
  References:
    5: (Object.keys(sealed): void); // error, Array<string>
        ^^^^^^^^^^^^^^^^^^^ [1]: array type
    5: (Object.keys(sealed): void); // error, Array<string>
                             ^^^^ [2]: undefined

Error: object_keys.js:9
  9:   (k : number) // error: string ~> number
        ^ Cannot cast `k` to number because string [1] is incompatible with number [2].
  References:
    8: Object.keys(unsealed).forEach(k => {
       ^^^^^^^^^^^^^^^^^^^^^ [1]: string
    9:   (k : number) // error: string ~> number
              ^^^^^^ [2]: number

Error: object_keys.js:14
 14:   (k : number) // error: string ~> number
        ^ Cannot cast `k` to number because string [1] is incompatible with number [2].
  References:
   13: Object.keys(dict).forEach(k => {
       ^^^^^^^^^^^^^^^^^ [1]: string
   14:   (k : number) // error: string ~> number
              ^^^^^^ [2]: number

Error: object_keys.js:18
 18: (Object.keys(any): Array<number>); // error, Array<string>
                  ^^^ Cannot cast `Object.keys(...)` to array type because in type argument `T`, string [1] is incompatible with number [2].
  References:
   17: var any: Object = {};
                ^^^^^^ [1]: string
   18: (Object.keys(any): Array<number>); // error, Array<string>
                                ^^^^^^ [2]: number

Error: object_keys.js:25
 25: (Object.keys(new Foo()): Array<'error'>); // error: prop ~> error
      ^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Object.keys(...)` to array type because in type argument `T`, string literal `prop` [1] is incompatible with string literal `error` [2].
  References:
   25: (Object.keys(new Foo()): Array<'error'>); // error: prop ~> error
        ^^^^^^^^^^^^^^^^^^^^^^ [1]: string literal `prop`
   25: (Object.keys(new Foo()): Array<'error'>); // error: prop ~> error
                                      ^^^^^^^ [2]: string literal `error`

Error: object_keys.js:32
 32: (Object.keys(new Bar()): Array<'error'>); // error: bar_prop ~> error
      ^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Object.keys(...)` to array type because in type argument `T`, string literal `bar_prop` [1] is incompatible with string literal `error` [2].
  References:
   32: (Object.keys(new Bar()): Array<'error'>); // error: bar_prop ~> error
        ^^^^^^^^^^^^^^^^^^^^^^ [1]: string literal `bar_prop`
   32: (Object.keys(new Bar()): Array<'error'>); // error: bar_prop ~> error
                                      ^^^^^^^ [2]: string literal `error`

Error: object_keys.js:38
 38:     (Object.keys(dict): Array<'bye'>); // error
          ^^^^^^^^^^^^^^^^^ Cannot cast `Object.keys(...)` to array type because in type argument `T`, string literal `hi` [1] is incompatible with string literal `bye` [2].
  References:
   36:   function(dict: {['hi']: mixed}) {
                          ^^^^ [1]: string literal `hi`
   38:     (Object.keys(dict): Array<'bye'>); // error
                                     ^^^^^ [2]: string literal `bye`

Error: object_keys.js:44
 44:     (Object.keys(dict): Array<'123'>); // error: not supported yet
          ^^^^^^^^^^^^^^^^^ Cannot cast `Object.keys(...)` to array type because in type argument `T`, string [1] is incompatible with string literal `123` [2].
  References:
   44:     (Object.keys(dict): Array<'123'>); // error: not supported yet
            ^^^^^^^^^^^^^^^^^ [1]: string
   44:     (Object.keys(dict): Array<'123'>); // error: not supported yet
                                     ^^^^^ [2]: string literal `123`

Error: object_missing.js:5
  5:     Object.doesNotExist();
                ^^^^^^^^^^^^ property `doesNotExist`. Property not found in
  5:     Object.doesNotExist();
         ^^^^^^ statics of `Object`

Error: object_prototype.js:31
 31: b.toString = function(): string { return 'foo'; };
     ^^^^^^^^^^ Object. Covariant property `toString` incompatible with contravariant use in
 31: b.toString = function(): string { return 'foo'; };
     ^^^^^^^^^^ assignment of property `toString`

Error: object_prototype.js:38
 38: var xToString : number = x.toString; // error
                              ^^^^^^^^^^ Cannot assign `x.toString` to `xToString` because function type [1] is incompatible with number [2].
  References:
   54:     toString(): string;
           ^^^^^^^^^^^^^^^^^^ [1]: function type. See lib: <BUILTINS>/core.js:54
   38: var xToString : number = x.toString; // error
                       ^^^^^^ [2]: number

Error: object_prototype.js:39
 39: var xToString2 : () => number = x.toString; // error
                                     ^^^^^^^^^^ Cannot assign `x.toString` to `xToString2` because in the return value, string [1] is incompatible with number [2].
  References:
   54:     toString(): string;
                       ^^^^^^ [1]: string. See lib: <BUILTINS>/core.js:54
   39: var xToString2 : () => number = x.toString; // error
                              ^^^^^^ [2]: number

Error: object_prototype.js:43
 43: var yToString : number = y.toString; // error
                              ^^^^^^^^^^ Cannot assign `y.toString` to `yToString` because function type [1] is incompatible with number [2].
  References:
   54:     toString(): string;
           ^^^^^^^^^^^^^^^^^^ [1]: function type. See lib: <BUILTINS>/core.js:54
   43: var yToString : number = y.toString; // error
                       ^^^^^^ [2]: number

Error: object_prototype.js:49
 49: (123).toString = function() {}; // error
           ^^^^^^^^ property `toString`. Property cannot be assigned on
 49: (123).toString = function() {}; // error
      ^^^ number

Error: object_prototype.js:51
 51: (123).toString('foo'); // error
                    ^^^^^ Cannot call `123.toString` with `'foo'` bound to `radix` because string [1] is incompatible with number [2].
  References:
   51: (123).toString('foo'); // error
                      ^^^^^ [1]: string
  144:     toString(radix?: number): string;
                            ^^^^^^ [2]: number. See lib: <BUILTINS>/core.js:144

Error: object_prototype.js:52
 52: (123).toString(null); // error
                    ^^^^ Cannot call `123.toString` with `null` bound to `radix` because null [1] is incompatible with number [2].
  References:
   52: (123).toString(null); // error
                      ^^^^ [1]: null
  144:     toString(radix?: number): string;
                            ^^^^^^ [2]: number. See lib: <BUILTINS>/core.js:144

Error: object_prototype.js:68
 68: b.hasOwnProperty = function() { return false; };
     ^^^^^^^^^^^^^^^^ Object. Covariant property `hasOwnProperty` incompatible with contravariant use in
 68: b.hasOwnProperty = function() { return false; };
     ^^^^^^^^^^^^^^^^ assignment of property `hasOwnProperty`

Error: object_prototype.js:71
 71: var xHasOwnProperty : number = x.hasOwnProperty; // error
                                    ^^^^^^^^^^^^^^^^ Cannot assign `x.hasOwnProperty` to `xHasOwnProperty` because function type [1] is incompatible with number [2].
  References:
   50:     hasOwnProperty(prop: any): boolean;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function type. See lib: <BUILTINS>/core.js:50
   71: var xHasOwnProperty : number = x.hasOwnProperty; // error
                             ^^^^^^ [2]: number

Error: object_prototype.js:72
 72: var xHasOwnProperty2 : (prop: string) => number = x.hasOwnProperty; // error
                                                       ^^^^^^^^^^^^^^^^ Cannot assign `x.hasOwnProperty` to `xHasOwnProperty2` because in the return value, boolean [1] is incompatible with number [2].
  References:
   50:     hasOwnProperty(prop: any): boolean;
                                      ^^^^^^^ [1]: boolean. See lib: <BUILTINS>/core.js:50
   72: var xHasOwnProperty2 : (prop: string) => number = x.hasOwnProperty; // error
                                                ^^^^^^ [2]: number

Error: object_prototype.js:76
 76: var yHasOwnProperty : number = y.hasOwnProperty; // error
                                    ^^^^^^^^^^^^^^^^ Cannot assign `y.hasOwnProperty` to `yHasOwnProperty` because function type [1] is incompatible with number [2].
  References:
   50:     hasOwnProperty(prop: any): boolean;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function type. See lib: <BUILTINS>/core.js:50
   76: var yHasOwnProperty : number = y.hasOwnProperty; // error
                             ^^^^^^ [2]: number

Error: object_prototype.js:93
 93: b.propertyIsEnumerable = function() { return false; };
     ^^^^^^^^^^^^^^^^^^^^^^ Object. Covariant property `propertyIsEnumerable` incompatible with contravariant use in
 93: b.propertyIsEnumerable = function() { return false; };
     ^^^^^^^^^^^^^^^^^^^^^^ assignment of property `propertyIsEnumerable`

Error: object_prototype.js:96
 96: var xPropertyIsEnumerable : number = x.propertyIsEnumerable; // error
                                          ^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `x.propertyIsEnumerable` to `xPropertyIsEnumerable` because function type [1] is incompatible with number [2].
  References:
   52:     propertyIsEnumerable(prop: any): boolean;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function type. See lib: <BUILTINS>/core.js:52
   96: var xPropertyIsEnumerable : number = x.propertyIsEnumerable; // error
                                   ^^^^^^ [2]: number

Error: object_prototype.js:98
 98:   x.propertyIsEnumerable; // error
       ^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `x.propertyIsEnumerable` to `xPropertyIsEnumerable2` because in the return value, boolean [1] is incompatible with number [2].
  References:
   52:     propertyIsEnumerable(prop: any): boolean;
                                            ^^^^^^^ [1]: boolean. See lib: <BUILTINS>/core.js:52
   97: var xPropertyIsEnumerable2 : (prop: string) => number =
                                                      ^^^^^^ [2]: number

Error: object_prototype.js:102
102: var yPropertyIsEnumerable : number = y.propertyIsEnumerable; // error
                                          ^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `y.propertyIsEnumerable` to `yPropertyIsEnumerable` because function type [1] is incompatible with number [2].
  References:
   52:     propertyIsEnumerable(prop: any): boolean;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function type. See lib: <BUILTINS>/core.js:52
  102: var yPropertyIsEnumerable : number = y.propertyIsEnumerable; // error
                                   ^^^^^^ [2]: number

Error: object_prototype.js:119
119: b.valueOf = function() { return {}; };
     ^^^^^^^^^ Object. Covariant property `valueOf` incompatible with contravariant use in
119: b.valueOf = function() { return {}; };
     ^^^^^^^^^ assignment of property `valueOf`

Error: object_prototype.js:122
122: var xValueOf : number = x.valueOf; // error
                             ^^^^^^^^^ Cannot assign `x.valueOf` to `xValueOf` because function type [1] is incompatible with number [2].
  References:
  411:     valueOf(): number;
           ^^^^^^^^^^^^^^^^^ [1]: function type. See lib: <BUILTINS>/core.js:411
  122: var xValueOf : number = x.valueOf; // error
                      ^^^^^^ [2]: number

Error: object_prototype.js:126
126: var yValueOf : number = y.valueOf; // error
                             ^^^^^^^^^ Cannot assign `y.valueOf` to `yValueOf` because function type [1] is incompatible with number [2].
  References:
   55:     valueOf(): Object;
           ^^^^^^^^^^^^^^^^^ [1]: function type. See lib: <BUILTINS>/core.js:55
  126: var yValueOf : number = y.valueOf; // error
                      ^^^^^^ [2]: number

Error: object_prototype.js:147
147: b.toLocaleString = function() { return 'derp'; };
     ^^^^^^^^^^^^^^^^ Object. Covariant property `toLocaleString` incompatible with contravariant use in
147: b.toLocaleString = function() { return 'derp'; };
     ^^^^^^^^^^^^^^^^ assignment of property `toLocaleString`

Error: object_prototype.js:150
150: var xToLocaleString : number = x.toLocaleString; // error
                                    ^^^^^^^^^^^^^^^^ Cannot assign `x.toLocaleString` to `xToLocaleString` because function type [1] is incompatible with number [2].
  References:
  407:     toLocaleString(locales?: string | Array<string>, options?: Date$LocaleOptions): string;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function type. See lib: <BUILTINS>/core.js:407
  150: var xToLocaleString : number = x.toLocaleString; // error
                             ^^^^^^ [2]: number

Error: object_prototype.js:151
151: var xToLocaleString2 : () => number = x.toLocaleString; // error
                                           ^^^^^^^^^^^^^^^^ Cannot assign `x.toLocaleString` to `xToLocaleString2` because in the return value, string [1] is incompatible with number [2].
  References:
  407:     toLocaleString(locales?: string | Array<string>, options?: Date$LocaleOptions): string;
                                                                                           ^^^^^^ [1]: string. See lib: <BUILTINS>/core.js:407
  151: var xToLocaleString2 : () => number = x.toLocaleString; // error
                                    ^^^^^^ [2]: number

Error: object_prototype.js:155
155: var yToLocaleString : number = y.toLocaleString; // error
                                    ^^^^^^^^^^^^^^^^ Cannot assign `y.toLocaleString` to `yToLocaleString` because function type [1] is incompatible with number [2].
  References:
   53:     toLocaleString(): string;
           ^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function type. See lib: <BUILTINS>/core.js:53
  155: var yToLocaleString : number = y.toLocaleString; // error
                             ^^^^^^ [2]: number

Error: proto.js:3
  3: (o1_proto.toString: empty); // error: function ~> empty
      ^^^^^^^^^^^^^^^^^ Cannot cast `o1_proto.toString` to empty because function type [1] is incompatible with empty [2].
  References:
   54:     toString(): string;
           ^^^^^^^^^^^^^^^^^^ [1]: function type. See lib: <BUILTINS>/core.js:54
    3: (o1_proto.toString: empty); // error: function ~> empty
                           ^^^^^ [2]: empty

Error: proto.js:7
  7: (o2.__proto__.p: empty); // error: number ~> empty
      ^^^^^^^^^^^^^^ Cannot cast `o2.__proto__.p` to empty because number [1] is incompatible with empty [2].
  References:
    5: var o2 = Object.create({p:0});
                                 ^ [1]: number
    7: (o2.__proto__.p: empty); // error: number ~> empty
                        ^^^^^ [2]: empty

Error: proto.js:13
 13: (C1_proto.bind: empty); // error: function ~> empty
      ^^^^^^^^^^^^^ Cannot cast `C1_proto.bind` to empty because function type [1] is incompatible with empty [2].
  References:
   13: (C1_proto.bind: empty); // error: function ~> empty
        ^^^^^^^^^^^^^ [1]: function type
   13: (C1_proto.bind: empty); // error: function ~> empty
                       ^^^^^ [2]: empty

Error: proto.js:17
 17: (inst1_proto.m: empty); // TODO error: function ~> empty
                  ^ property `m`. Property not found in
 17: (inst1_proto.m: empty); // TODO error: function ~> empty
      ^^^^^^^^^^^ super of `C1`


Found 39 errors
