Error: constructor.js:15
 15:     this.y; // error (no super call)
              ^ property `y`. Property cannot be accessed on possibly undefined value
 15:     this.y; // error (no super call)
         ^^^^ uninitialized this (expected super constructor call)

Error: constructor.js:16
 16:     this.x; // error (no super call)
              ^ property `x`. Property cannot be accessed on possibly undefined value
 16:     this.x; // error (no super call)
         ^^^^ uninitialized this (expected super constructor call)

Error: constructor.js:30
 30:   f.y; // error
         ^ property `y`. Property cannot be accessed on possibly undefined value
 30:   f.y; // error
       ^ uninitialized this (expected super constructor call)

Error: constructor.js:31
 31:   f.x; // error
         ^ property `x`. Property cannot be accessed on possibly undefined value
 31:   f.x; // error
       ^ uninitialized this (expected super constructor call)

Error: constructor.js:45
 45:     super.x; // error (no super call)
               ^ property `x`. Property cannot be accessed on possibly undefined value
 45:     super.x; // error (no super call)
         ^^^^^ uninitialized this (expected super constructor call)

Error: constructor.js:63
 63:     leaked_this.foo()
         ^^^^^^^^^^^^^^^^^ call of method `foo`. Method cannot be called on possibly undefined value
 63:     leaked_this.foo()
         ^^^^^^^^^^^ uninitialized this (expected super constructor call)

Error: constructor.js:83
 83:     super(() => this.foo()); // error (no super call yet)
                     ^^^^^^^^^^ call of method `foo`. Method cannot be called on possibly undefined value
 83:     super(() => this.foo()); // error (no super call yet)
                     ^^^^ uninitialized this (expected super constructor call)

Error: super.js:10
 10:     super(x);
               ^ Cannot call `super` with `x` bound to `x` because string [1] is incompatible with number [2].
  References:
    9:   constructor(x:string,y:number) {
                       ^^^^^^ [1]: string
    3:   constructor(x:number) { }
                       ^^^^^^ [2]: number

Error: super.js:14
 14:     (super.staticMethod('foo'): number); // error, string !~> number
          ^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `super.staticMethod(...)` to number because string [1] is incompatible with number [2].
  References:
    4:   static staticMethod(x:string): string { return x; }
                                        ^^^^^^ [1]: string
   14:     (super.staticMethod('foo'): number); // error, string !~> number
                                       ^^^^^^ [2]: number

Error: super.js:15
 15:     (super.doesntExist()); // error, A doesn't have a doesntExist method
                ^^^^^^^^^^^ property `doesntExist`. Property not found in
 15:     (super.doesntExist()); // error, A doesn't have a doesntExist method
          ^^^^^ statics of `A`

Error: super.js:19
 19:     super.f(0);
                 ^ Cannot call `super.f` with `0` bound to `x` because number [1] is incompatible with string [2].
  References:
   19:     super.f(0);
                   ^ [1]: number
    5:   f(x:string) { }
             ^^^^^^ [2]: string

Error: super.js:20
 20:     return super.g;
                      ^ property `g`. Property not found in
  8: class B extends A {
                     ^ A


Found 12 errors
