FormData.js:5
  5: new FormData(''); // incorrect
                  ^^ string. This type is incompatible with the expected param type of
313:     constructor(form?: HTMLFormElement): void;
                            ^^^^^^^^^^^^^^^ HTMLFormElement. See lib: <BUILTINS>/bom.js:313

FormData.js:6
  6: new FormData(document.createElement('input')); // incorrect
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ HTMLInputElement. This type is incompatible with the expected param type of
313:     constructor(form?: HTMLFormElement): void;
                            ^^^^^^^^^^^^^^^ HTMLFormElement. See lib: <BUILTINS>/bom.js:313

FormData.js:14
 14: const d: string = a.get('foo'); // incorrect
                       ^^^^^^^^^^^^ File. This type is incompatible with
 14: const d: string = a.get('foo'); // incorrect
              ^^^^^^ string

FormData.js:14
 14: const d: string = a.get('foo'); // incorrect
                       ^^^^^^^^^^^^ null. This type is incompatible with
 14: const d: string = a.get('foo'); // incorrect
              ^^^^^^ string

FormData.js:14
 14: const d: string = a.get('foo'); // incorrect
                       ^^^^^^^^^^^^ undefined. This type is incompatible with
 14: const d: string = a.get('foo'); // incorrect
              ^^^^^^ string

FormData.js:15
 15: const e: Blob = a.get('foo'); // incorrect
                     ^^^^^^^^^^^^ null. This type is incompatible with
 15: const e: Blob = a.get('foo'); // incorrect
              ^^^^ Blob

FormData.js:15
 15: const e: Blob = a.get('foo'); // incorrect
                     ^^^^^^^^^^^^ string. This type is incompatible with
 15: const e: Blob = a.get('foo'); // incorrect
              ^^^^ Blob

FormData.js:15
 15: const e: Blob = a.get('foo'); // incorrect
                     ^^^^^^^^^^^^ undefined. This type is incompatible with
 15: const e: Blob = a.get('foo'); // incorrect
              ^^^^ Blob

FormData.js:17
 17: a.get(2); // incorrect
           ^ number. This type is incompatible with the expected param type of
316:     get(name: string): ?FormDataEntryValue;
                   ^^^^^^ string. See lib: <BUILTINS>/bom.js:316

FormData.js:21
 21: const a2: Array<string | File | number> = a.getAll('foo'); // incorrect
                                     ^^^^^^ number. This type is incompatible with
317:     getAll(name: string): Array<FormDataEntryValue>;
                                     ^^^^^^^^^^^^^^^^^^ union: string | File. See lib: <BUILTINS>/bom.js:317
  Member 1:
  310: type FormDataEntryValue = string | File
                                 ^^^^^^ string. See lib: <BUILTINS>/bom.js:310
  Error:
   21: const a2: Array<string | File | number> = a.getAll('foo'); // incorrect
                                       ^^^^^^ number. This type is incompatible with
  310: type FormDataEntryValue = string | File
                                 ^^^^^^ string. See lib: <BUILTINS>/bom.js:310
  Member 2:
  310: type FormDataEntryValue = string | File
                                          ^^^^ File. See lib: <BUILTINS>/bom.js:310
  Error:
   21: const a2: Array<string | File | number> = a.getAll('foo'); // incorrect
                                       ^^^^^^ number. This type is incompatible with
  310: type FormDataEntryValue = string | File
                                          ^^^^ File. See lib: <BUILTINS>/bom.js:310

FormData.js:22
 22: const a3: Array<string | Blob | File> = a.getAll('foo'); // incorrect
                              ^^^^ Blob. This type is incompatible with
317:     getAll(name: string): Array<FormDataEntryValue>;
                                     ^^^^^^^^^^^^^^^^^^ union: string | File. See lib: <BUILTINS>/bom.js:317
  Member 1:
  310: type FormDataEntryValue = string | File
                                 ^^^^^^ string. See lib: <BUILTINS>/bom.js:310
  Error:
   22: const a3: Array<string | Blob | File> = a.getAll('foo'); // incorrect
                                ^^^^ Blob. This type is incompatible with
  310: type FormDataEntryValue = string | File
                                 ^^^^^^ string. See lib: <BUILTINS>/bom.js:310
  Member 2:
  310: type FormDataEntryValue = string | File
                                          ^^^^ File. See lib: <BUILTINS>/bom.js:310
  Error:
   22: const a3: Array<string | Blob | File> = a.getAll('foo'); // incorrect
                                ^^^^ Blob. This type is incompatible with
  310: type FormDataEntryValue = string | File
                                          ^^^^ File. See lib: <BUILTINS>/bom.js:310

FormData.js:23
 23: a.getAll(23); // incorrect
              ^^ number. This type is incompatible with the expected param type of
317:     getAll(name: string): Array<FormDataEntryValue>;
                      ^^^^^^ string. See lib: <BUILTINS>/bom.js:317

FormData.js:27
 27: a.set('foo', {}); // incorrect
     ^^^^^^^^^^^^^^^^ call of method `set`. Function cannot be called on any member of intersection type
 27: a.set('foo', {}); // incorrect
     ^^^^^ intersection
  Member 1:
  319:     set(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:319
  Error:
   27: a.set('foo', {}); // incorrect
                    ^^ object literal. This type is incompatible with the expected param type of
  319:     set(name: string, value: string): void;
                                    ^^^^^^ string. See lib: <BUILTINS>/bom.js:319
  Member 2:
  320:     set(name: string, value: Blob, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:320
  Error:
   27: a.set('foo', {}); // incorrect
                    ^^ object literal. This type is incompatible with the expected param type of
  320:     set(name: string, value: Blob, filename?: string): void;
                                    ^^^^ Blob. See lib: <BUILTINS>/bom.js:320
  Member 3:
  321:     set(name: string, value: File, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:321
  Error:
   27: a.set('foo', {}); // incorrect
                    ^^ object literal. This type is incompatible with the expected param type of
  321:     set(name: string, value: File, filename?: string): void;
                                    ^^^^ File. See lib: <BUILTINS>/bom.js:321

FormData.js:28
 28: a.set(2, 'bar'); // incorrect
     ^^^^^^^^^^^^^^^ call of method `set`. Function cannot be called on any member of intersection type
 28: a.set(2, 'bar'); // incorrect
     ^^^^^ intersection
  Member 1:
  319:     set(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:319
  Error:
   28: a.set(2, 'bar'); // incorrect
             ^ number. This type is incompatible with the expected param type of
  319:     set(name: string, value: string): void;
                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:319
  Member 2:
  320:     set(name: string, value: Blob, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:320
  Error:
   28: a.set(2, 'bar'); // incorrect
             ^ number. This type is incompatible with the expected param type of
  320:     set(name: string, value: Blob, filename?: string): void;
                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:320
  Member 3:
  321:     set(name: string, value: File, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:321
  Error:
   28: a.set(2, 'bar'); // incorrect
             ^ number. This type is incompatible with the expected param type of
  321:     set(name: string, value: File, filename?: string): void;
                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:321

FormData.js:32
 32: a.set('bar', new File([], 'q'), 2) // incorrect
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `set`. Function cannot be called on any member of intersection type
 32: a.set('bar', new File([], 'q'), 2) // incorrect
     ^^^^^ intersection
  Member 1:
  319:     set(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:319
  Error:
   32: a.set('bar', new File([], 'q'), 2) // incorrect
                    ^^^^^^^^^^^^^^^^^ File. This type is incompatible with the expected param type of
  319:     set(name: string, value: string): void;
                                    ^^^^^^ string. See lib: <BUILTINS>/bom.js:319
  Member 2:
  320:     set(name: string, value: Blob, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:320
  Error:
   32: a.set('bar', new File([], 'q'), 2) // incorrect
                                       ^ number. This type is incompatible with the expected param type of
  320:     set(name: string, value: Blob, filename?: string): void;
                                                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:320
  Member 3:
  321:     set(name: string, value: File, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:321
  Error:
   32: a.set('bar', new File([], 'q'), 2) // incorrect
                                       ^ number. This type is incompatible with the expected param type of
  321:     set(name: string, value: File, filename?: string): void;
                                                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:321

FormData.js:35
 35: a.set('bar', new Blob, 2) // incorrect
     ^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `set`. Function cannot be called on any member of intersection type
 35: a.set('bar', new Blob, 2) // incorrect
     ^^^^^ intersection
  Member 1:
  319:     set(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:319
  Error:
   35: a.set('bar', new Blob, 2) // incorrect
                    ^^^^^^^^ Blob. This type is incompatible with the expected param type of
  319:     set(name: string, value: string): void;
                                    ^^^^^^ string. See lib: <BUILTINS>/bom.js:319
  Member 2:
  320:     set(name: string, value: Blob, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:320
  Error:
   35: a.set('bar', new Blob, 2) // incorrect
                              ^ number. This type is incompatible with the expected param type of
  320:     set(name: string, value: Blob, filename?: string): void;
                                                     ^^^^^^ string. See lib: <BUILTINS>/bom.js:320
  Member 3:
  321:     set(name: string, value: File, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:321
  Error:
   35: a.set('bar', new Blob, 2) // incorrect
                    ^^^^^^^^ Blob. This type is incompatible with the expected param type of
  321:     set(name: string, value: File, filename?: string): void;
                                    ^^^^ File. See lib: <BUILTINS>/bom.js:321

FormData.js:39
 39: a.append('foo', {}); // incorrect
     ^^^^^^^^^^^^^^^^^^^ call of method `append`. Function cannot be called on any member of intersection type
 39: a.append('foo', {}); // incorrect
     ^^^^^^^^ intersection
  Member 1:
  323:     append(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:323
  Error:
   39: a.append('foo', {}); // incorrect
                       ^^ object literal. This type is incompatible with the expected param type of
  323:     append(name: string, value: string): void;
                                       ^^^^^^ string. See lib: <BUILTINS>/bom.js:323
  Member 2:
  324:     append(name: string, value: Blob, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:324
  Error:
   39: a.append('foo', {}); // incorrect
                       ^^ object literal. This type is incompatible with the expected param type of
  324:     append(name: string, value: Blob, filename?: string): void;
                                       ^^^^ Blob. See lib: <BUILTINS>/bom.js:324
  Member 3:
  325:     append(name: string, value: File, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:325
  Error:
   39: a.append('foo', {}); // incorrect
                       ^^ object literal. This type is incompatible with the expected param type of
  325:     append(name: string, value: File, filename?: string): void;
                                       ^^^^ File. See lib: <BUILTINS>/bom.js:325

FormData.js:40
 40: a.append(2, 'bar'); // incorrect
     ^^^^^^^^^^^^^^^^^^ call of method `append`. Function cannot be called on any member of intersection type
 40: a.append(2, 'bar'); // incorrect
     ^^^^^^^^ intersection
  Member 1:
  323:     append(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:323
  Error:
   40: a.append(2, 'bar'); // incorrect
                ^ number. This type is incompatible with the expected param type of
  323:     append(name: string, value: string): void;
                        ^^^^^^ string. See lib: <BUILTINS>/bom.js:323
  Member 2:
  324:     append(name: string, value: Blob, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:324
  Error:
   40: a.append(2, 'bar'); // incorrect
                ^ number. This type is incompatible with the expected param type of
  324:     append(name: string, value: Blob, filename?: string): void;
                        ^^^^^^ string. See lib: <BUILTINS>/bom.js:324
  Member 3:
  325:     append(name: string, value: File, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:325
  Error:
   40: a.append(2, 'bar'); // incorrect
                ^ number. This type is incompatible with the expected param type of
  325:     append(name: string, value: File, filename?: string): void;
                        ^^^^^^ string. See lib: <BUILTINS>/bom.js:325

FormData.js:45
 45: a.append('bar', new File([], 'q'), 2) // incorrect
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `append`. Function cannot be called on any member of intersection type
 45: a.append('bar', new File([], 'q'), 2) // incorrect
     ^^^^^^^^ intersection
  Member 1:
  323:     append(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:323
  Error:
   45: a.append('bar', new File([], 'q'), 2) // incorrect
                       ^^^^^^^^^^^^^^^^^ File. This type is incompatible with the expected param type of
  323:     append(name: string, value: string): void;
                                       ^^^^^^ string. See lib: <BUILTINS>/bom.js:323
  Member 2:
  324:     append(name: string, value: Blob, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:324
  Error:
   45: a.append('bar', new File([], 'q'), 2) // incorrect
                                          ^ number. This type is incompatible with the expected param type of
  324:     append(name: string, value: Blob, filename?: string): void;
                                                        ^^^^^^ string. See lib: <BUILTINS>/bom.js:324
  Member 3:
  325:     append(name: string, value: File, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:325
  Error:
   45: a.append('bar', new File([], 'q'), 2) // incorrect
                                          ^ number. This type is incompatible with the expected param type of
  325:     append(name: string, value: File, filename?: string): void;
                                                        ^^^^^^ string. See lib: <BUILTINS>/bom.js:325

FormData.js:48
 48: a.append('bar', new Blob, 2) // incorrect
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `append`. Function cannot be called on any member of intersection type
 48: a.append('bar', new Blob, 2) // incorrect
     ^^^^^^^^ intersection
  Member 1:
  323:     append(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:323
  Error:
   48: a.append('bar', new Blob, 2) // incorrect
                       ^^^^^^^^ Blob. This type is incompatible with the expected param type of
  323:     append(name: string, value: string): void;
                                       ^^^^^^ string. See lib: <BUILTINS>/bom.js:323
  Member 2:
  324:     append(name: string, value: Blob, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:324
  Error:
   48: a.append('bar', new Blob, 2) // incorrect
                                 ^ number. This type is incompatible with the expected param type of
  324:     append(name: string, value: Blob, filename?: string): void;
                                                        ^^^^^^ string. See lib: <BUILTINS>/bom.js:324
  Member 3:
  325:     append(name: string, value: File, filename?: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:325
  Error:
   48: a.append('bar', new Blob, 2) // incorrect
                       ^^^^^^^^ Blob. This type is incompatible with the expected param type of
  325:     append(name: string, value: File, filename?: string): void;
                                       ^^^^ File. See lib: <BUILTINS>/bom.js:325

FormData.js:52
 52: a.delete(3); // incorrect
              ^ number. This type is incompatible with the expected param type of
327:     delete(name: string): void;
                      ^^^^^^ string. See lib: <BUILTINS>/bom.js:327

FormData.js:56
 56: for (let x: number of a.keys()) {} // incorrect
              ^^^^^^^^^ string. This type is incompatible with
 56: for (let x: number of a.keys()) {} // incorrect
                 ^^^^^^ number

FormData.js:64
 64: for (let [x, y]: [string, string | File | Blob] of a.entries()) {} // incorrect
                                               ^^^^ Blob. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                                      ^^^^^^^^^^^^^^^^^^ union: string | File. See lib: <BUILTINS>/bom.js:331
  Member 1:
  310: type FormDataEntryValue = string | File
                                 ^^^^^^ string. See lib: <BUILTINS>/bom.js:310
  Error:
   64: for (let [x, y]: [string, string | File | Blob] of a.entries()) {} // incorrect
                                                 ^^^^ Blob. This type is incompatible with
  310: type FormDataEntryValue = string | File
                                 ^^^^^^ string. See lib: <BUILTINS>/bom.js:310
  Member 2:
  310: type FormDataEntryValue = string | File
                                          ^^^^ File. See lib: <BUILTINS>/bom.js:310
  Error:
   64: for (let [x, y]: [string, string | File | Blob] of a.entries()) {} // incorrect
                                                 ^^^^ Blob. This type is incompatible with
  310: type FormDataEntryValue = string | File
                                          ^^^^ File. See lib: <BUILTINS>/bom.js:310

FormData.js:65
 65: for (let [x, y]: [number, string] of a.entries()) {} // incorrect
               ^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                              ^^^^^^ string. See lib: <BUILTINS>/bom.js:331

FormData.js:65
 65: for (let [x, y]: [number, string] of a.entries()) {} // incorrect
                  ^ string. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                                      ^^^^^^^^^^^^^^^^^^ File. See lib: <BUILTINS>/bom.js:331

FormData.js:65
 65: for (let [x, y]: [number, string] of a.entries()) {} // incorrect
                       ^^^^^^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                              ^^^^^^ string. See lib: <BUILTINS>/bom.js:331

FormData.js:65
 65: for (let [x, y]: [number, string] of a.entries()) {} // incorrect
                               ^^^^^^ string. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                                      ^^^^^^^^^^^^^^^^^^ File. See lib: <BUILTINS>/bom.js:331

FormData.js:66
 66: for (let [x, y]: [string, number] of a.entries()) {} // incorrect
                  ^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                                      ^^^^^^^^^^^^^^^^^^ File. See lib: <BUILTINS>/bom.js:331

FormData.js:66
 66: for (let [x, y]: [string, number] of a.entries()) {} // incorrect
                  ^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                                      ^^^^^^^^^^^^^^^^^^ string. See lib: <BUILTINS>/bom.js:331

FormData.js:66
 66: for (let [x, y]: [string, number] of a.entries()) {} // incorrect
                               ^^^^^^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                                      ^^^^^^^^^^^^^^^^^^ File. See lib: <BUILTINS>/bom.js:331

FormData.js:66
 66: for (let [x, y]: [string, number] of a.entries()) {} // incorrect
                               ^^^^^^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                                      ^^^^^^^^^^^^^^^^^^ string. See lib: <BUILTINS>/bom.js:331

FormData.js:66
 66: for (let [x, y]: [string, number] of a.entries()) {} // incorrect
                               ^^^^^^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                                      ^^^^^^^^^^^^^^^^^^ union: string | File. See lib: <BUILTINS>/bom.js:331
  Member 1:
  310: type FormDataEntryValue = string | File
                                 ^^^^^^ string. See lib: <BUILTINS>/bom.js:310
  Error:
   66: for (let [x, y]: [string, number] of a.entries()) {} // incorrect
                                 ^^^^^^ number. This type is incompatible with
  310: type FormDataEntryValue = string | File
                                 ^^^^^^ string. See lib: <BUILTINS>/bom.js:310
  Member 2:
  310: type FormDataEntryValue = string | File
                                          ^^^^ File. See lib: <BUILTINS>/bom.js:310
  Error:
   66: for (let [x, y]: [string, number] of a.entries()) {} // incorrect
                                 ^^^^^^ number. This type is incompatible with
  310: type FormDataEntryValue = string | File
                                          ^^^^ File. See lib: <BUILTINS>/bom.js:310

FormData.js:67
 67: for (let [x, y]: [number, number] of a.entries()) {} // incorrect
               ^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                              ^^^^^^ string. See lib: <BUILTINS>/bom.js:331

FormData.js:67
 67: for (let [x, y]: [number, number] of a.entries()) {} // incorrect
                  ^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                                      ^^^^^^^^^^^^^^^^^^ File. See lib: <BUILTINS>/bom.js:331

FormData.js:67
 67: for (let [x, y]: [number, number] of a.entries()) {} // incorrect
                  ^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                                      ^^^^^^^^^^^^^^^^^^ string. See lib: <BUILTINS>/bom.js:331

FormData.js:67
 67: for (let [x, y]: [number, number] of a.entries()) {} // incorrect
                       ^^^^^^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                              ^^^^^^ string. See lib: <BUILTINS>/bom.js:331

FormData.js:67
 67: for (let [x, y]: [number, number] of a.entries()) {} // incorrect
                               ^^^^^^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                                      ^^^^^^^^^^^^^^^^^^ File. See lib: <BUILTINS>/bom.js:331

FormData.js:67
 67: for (let [x, y]: [number, number] of a.entries()) {} // incorrect
                               ^^^^^^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                                      ^^^^^^^^^^^^^^^^^^ string. See lib: <BUILTINS>/bom.js:331

FormData.js:67
 67: for (let [x, y]: [number, number] of a.entries()) {} // incorrect
                               ^^^^^^ number. This type is incompatible with
331:     entries(): Iterator<[string, FormDataEntryValue]>;
                                      ^^^^^^^^^^^^^^^^^^ union: string | File. See lib: <BUILTINS>/bom.js:331
  Member 1:
  310: type FormDataEntryValue = string | File
                                 ^^^^^^ string. See lib: <BUILTINS>/bom.js:310
  Error:
   67: for (let [x, y]: [number, number] of a.entries()) {} // incorrect
                                 ^^^^^^ number. This type is incompatible with
  310: type FormDataEntryValue = string | File
                                 ^^^^^^ string. See lib: <BUILTINS>/bom.js:310
  Member 2:
  310: type FormDataEntryValue = string | File
                                          ^^^^ File. See lib: <BUILTINS>/bom.js:310
  Error:
   67: for (let [x, y]: [number, number] of a.entries()) {} // incorrect
                                 ^^^^^^ number. This type is incompatible with
  310: type FormDataEntryValue = string | File
                                          ^^^^ File. See lib: <BUILTINS>/bom.js:310

MutationObserver.js:10
 10: new MutationObserver(); // incorrect
     ^^^^^^^^^^^^^^^^^^^^^^ constructor call
 10: new MutationObserver(); // incorrect
     ^^^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
359:     constructor(callback: (arr: Array<MutationRecord>, observer: MutationObserver) => any): void;
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:359

MutationObserver.js:11
 11: new MutationObserver(42); // incorrect
                          ^^ number. This type is incompatible with the expected param type of
359:     constructor(callback: (arr: Array<MutationRecord>, observer: MutationObserver) => any): void;
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function type. See lib: <BUILTINS>/bom.js:359

MutationObserver.js:12
 12: new MutationObserver((n: number) => {}); // incorrect
                              ^^^^^^ number. This type is incompatible with an argument type of
359:     constructor(callback: (arr: Array<MutationRecord>, observer: MutationObserver) => any): void;
                                     ^^^^^^^^^^^^^^^^^^^^^ array type. See lib: <BUILTINS>/bom.js:359

MutationObserver.js:18
 18: o.observe(); // incorrect
     ^^^^^^^^^^^ call of method `observe`
 18: o.observe(); // incorrect
     ^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
351: declare type MutationObserverInit = MutationObserverInitRequired & {
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: object type(s). See lib: <BUILTINS>/bom.js:351
  Member 1:
  347:     | { childList: true }
             ^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:347
  Error:
   18: o.observe(); // incorrect
       ^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  347:     | { childList: true }
             ^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:347
  Member 2:
  348:     | { attributes: true }
             ^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:348
  Error:
   18: o.observe(); // incorrect
       ^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  348:     | { attributes: true }
             ^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:348
  Member 3:
  349:     | { characterData: true }
             ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:349
  Error:
   18: o.observe(); // incorrect
       ^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  349:     | { characterData: true }
             ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:349

MutationObserver.js:18
 18: o.observe(); // incorrect
     ^^^^^^^^^^^ call of method `observe`
 18: o.observe(); // incorrect
     ^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
                                                                        v
351: declare type MutationObserverInit = MutationObserverInitRequired & {
352:     subtree?: boolean;
353:     attributeOldValue?: boolean;
...:
356: }
     ^ object type. See lib: <BUILTINS>/bom.js:351

MutationObserver.js:18
 18: o.observe(); // incorrect
     ^^^^^^^^^^^ call of method `observe`
 18: o.observe(); // incorrect
     ^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
360:     observe(target: Node, options: MutationObserverInit): void;
                         ^^^^ Node. See lib: <BUILTINS>/bom.js:360

MutationObserver.js:19
 19: o.observe('invalid'); // incorrect
     ^^^^^^^^^^^^^^^^^^^^ call of method `observe`
 19: o.observe('invalid'); // incorrect
     ^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
351: declare type MutationObserverInit = MutationObserverInitRequired & {
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: object type(s). See lib: <BUILTINS>/bom.js:351
  Member 1:
  347:     | { childList: true }
             ^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:347
  Error:
   19: o.observe('invalid'); // incorrect
       ^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  347:     | { childList: true }
             ^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:347
  Member 2:
  348:     | { attributes: true }
             ^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:348
  Error:
   19: o.observe('invalid'); // incorrect
       ^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  348:     | { attributes: true }
             ^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:348
  Member 3:
  349:     | { characterData: true }
             ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:349
  Error:
   19: o.observe('invalid'); // incorrect
       ^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  349:     | { characterData: true }
             ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:349

MutationObserver.js:19
 19: o.observe('invalid'); // incorrect
     ^^^^^^^^^^^^^^^^^^^^ call of method `observe`
 19: o.observe('invalid'); // incorrect
     ^^^^^^^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
                                                                        v
351: declare type MutationObserverInit = MutationObserverInitRequired & {
352:     subtree?: boolean;
353:     attributeOldValue?: boolean;
...:
356: }
     ^ object type. See lib: <BUILTINS>/bom.js:351

MutationObserver.js:19
 19: o.observe('invalid'); // incorrect
               ^^^^^^^^^ string. This type is incompatible with the expected param type of
360:     observe(target: Node, options: MutationObserverInit): void;
                         ^^^^ Node. See lib: <BUILTINS>/bom.js:360

MutationObserver.js:20
 20: o.observe(div); // incorrect
     ^^^^^^^^^^^^^^ call of method `observe`
 20: o.observe(div); // incorrect
     ^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
351: declare type MutationObserverInit = MutationObserverInitRequired & {
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: object type(s). See lib: <BUILTINS>/bom.js:351
  Member 1:
  347:     | { childList: true }
             ^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:347
  Error:
   20: o.observe(div); // incorrect
       ^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  347:     | { childList: true }
             ^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:347
  Member 2:
  348:     | { attributes: true }
             ^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:348
  Error:
   20: o.observe(div); // incorrect
       ^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  348:     | { attributes: true }
             ^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:348
  Member 3:
  349:     | { characterData: true }
             ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:349
  Error:
   20: o.observe(div); // incorrect
       ^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
  349:     | { characterData: true }
             ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:349

MutationObserver.js:20
 20: o.observe(div); // incorrect
     ^^^^^^^^^^^^^^ call of method `observe`
 20: o.observe(div); // incorrect
     ^^^^^^^^^^^^^^ undefined (too few arguments, expected default/rest parameters). This type is incompatible with
                                                                        v
351: declare type MutationObserverInit = MutationObserverInitRequired & {
352:     subtree?: boolean;
353:     attributeOldValue?: boolean;
...:
356: }
     ^ object type. See lib: <BUILTINS>/bom.js:351

MutationObserver.js:21
 21: o.observe(div, {}); // incorrect
     ^^^^^^^^^^^^^^^^^^ call of method `observe`
 21: o.observe(div, {}); // incorrect
                    ^^ object literal. This type is incompatible with
351: declare type MutationObserverInit = MutationObserverInitRequired & {
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: object type(s). See lib: <BUILTINS>/bom.js:351
  Member 1:
  347:     | { childList: true }
             ^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:347
  Error:
  347:     | { childList: true }
             ^^^^^^^^^^^^^^^^^^^ property `childList`. Property not found in. See lib: <BUILTINS>/bom.js:347
   21: o.observe(div, {}); // incorrect
                      ^^ object literal
  Member 2:
  348:     | { attributes: true }
             ^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:348
  Error:
  348:     | { attributes: true }
             ^^^^^^^^^^^^^^^^^^^^ property `attributes`. Property not found in. See lib: <BUILTINS>/bom.js:348
   21: o.observe(div, {}); // incorrect
                      ^^ object literal
  Member 3:
  349:     | { characterData: true }
             ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:349
  Error:
  349:     | { characterData: true }
             ^^^^^^^^^^^^^^^^^^^^^^^ property `characterData`. Property not found in. See lib: <BUILTINS>/bom.js:349
   21: o.observe(div, {}); // incorrect
                      ^^ object literal

MutationObserver.js:22
 22: o.observe(div, { subtree: true }); // incorrect
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `observe`
 22: o.observe(div, { subtree: true }); // incorrect
                    ^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with
351: declare type MutationObserverInit = MutationObserverInitRequired & {
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: object type(s). See lib: <BUILTINS>/bom.js:351
  Member 1:
  347:     | { childList: true }
             ^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:347
  Error:
  347:     | { childList: true }
             ^^^^^^^^^^^^^^^^^^^ property `childList`. Property not found in. See lib: <BUILTINS>/bom.js:347
   22: o.observe(div, { subtree: true }); // incorrect
                      ^^^^^^^^^^^^^^^^^ object literal
  Member 2:
  348:     | { attributes: true }
             ^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:348
  Error:
  348:     | { attributes: true }
             ^^^^^^^^^^^^^^^^^^^^ property `attributes`. Property not found in. See lib: <BUILTINS>/bom.js:348
   22: o.observe(div, { subtree: true }); // incorrect
                      ^^^^^^^^^^^^^^^^^ object literal
  Member 3:
  349:     | { characterData: true }
             ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:349
  Error:
  349:     | { characterData: true }
             ^^^^^^^^^^^^^^^^^^^^^^^ property `characterData`. Property not found in. See lib: <BUILTINS>/bom.js:349
   22: o.observe(div, { subtree: true }); // incorrect
                      ^^^^^^^^^^^^^^^^^ object literal

MutationObserver.js:23
 23: o.observe(div, { attributes: true, attributeFilter: true }); // incorrect
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
                                                                        v
351: declare type MutationObserverInit = MutationObserverInitRequired & {
352:     subtree?: boolean;
353:     attributeOldValue?: boolean;
...:
356: }
     ^ object type. See lib: <BUILTINS>/bom.js:351
  Property `attributeFilter` is incompatible:
     23: o.observe(div, { attributes: true, attributeFilter: true }); // incorrect
                                                             ^^^^ boolean. This type is incompatible with
    355:     attributeFilter?: Array<string>;
                               ^^^^^^^^^^^^^ array type. See lib: <BUILTINS>/bom.js:355


Found 53 errors
