Error: classes.js:19
 19: (b_number.p: boolean); // Error number ~> boolean
      ^^^^^^^^^^ Cannot cast property `p` to boolean because number [1] is incompatible with boolean [2].
  References:
   19: (b_number.p: boolean); // Error number ~> boolean
        ^^^^^^^^^^ [1]: number
   19: (b_number.p: boolean); // Error number ~> boolean
                    ^^^^^^^ [2]: boolean

Error: classes.js:20
 20: (b_void.p: boolean); // Error void ~> boolean
      ^^^^^^^^ Cannot cast property `p` to boolean because undefined [1] is incompatible with boolean [2].
  References:
   20: (b_void.p: boolean); // Error void ~> boolean
        ^^^^^^^^ [1]: undefined
   20: (b_void.p: boolean); // Error void ~> boolean
                  ^^^^^^^ [2]: boolean

Error: classes.js:21
 21: (b_default.p: boolean); // Error string ~> boolean
      ^^^^^^^^^^^ Cannot cast property `p` to boolean because string [1] is incompatible with boolean [2].
  References:
   21: (b_default.p: boolean); // Error string ~> boolean
        ^^^^^^^^^^^ [1]: string
   21: (b_default.p: boolean); // Error string ~> boolean
                     ^^^^^^^ [2]: boolean

Error: classes.js:23
 23: (b_star.p: boolean); // Error number ~> boolean
      ^^^^^^^^ Cannot cast property `p` to boolean because number [1] is incompatible with boolean [2].
  References:
   23: (b_star.p: boolean); // Error number ~> boolean
        ^^^^^^^^ [1]: number
   23: (b_star.p: boolean); // Error number ~> boolean
                  ^^^^^^^ [2]: boolean

Error: classes.js:27
 27: var c_number: C<number> = new C(123); // Error number ~> ?string
                               ^^^^^^^^^^ C. Has some incompatible type argument with
 27: var c_number: C<number> = new C(123); // Error number ~> ?string
                   ^^^^^^^^^ C
  Type argument `T` is incompatible:
     27: var c_number: C<number> = new C(123); // Error number ~> ?string
                         ^^^^^^ number. This type is incompatible with
     25: class C<T: ?string = string> extends A<T> {}
                     ^^^^^^ string

Error: classes.js:27
 27: var c_number: C<number> = new C(123); // Error number ~> ?string
                               ^^^^^^^^^^ new `C`
 27: var c_number: C<number> = new C(123); // Error number ~> ?string
                     ^^^^^^ number. This type is incompatible with the bound on type parameter `T`:
 25: class C<T: ?string = string> extends A<T> {}
                 ^^^^^^ string

Error: classes.js:27
 27: var c_number: C<number> = new C(123); // Error number ~> ?string
                                     ^^^ number. This type is incompatible with the expected param type of
 25: class C<T: ?string = string> extends A<T> {}
                 ^^^^^^ string

Error: classes.js:32
 32: (c_void.p: boolean); // Error void ~> boolean
      ^^^^^^^^ Cannot cast property `p` to boolean because undefined [1] is incompatible with boolean [2].
  References:
   32: (c_void.p: boolean); // Error void ~> boolean
        ^^^^^^^^ [1]: undefined
   32: (c_void.p: boolean); // Error void ~> boolean
                  ^^^^^^^ [2]: boolean

Error: classes.js:33
 33: (c_default.p: boolean); // Error string ~> boolean
      ^^^^^^^^^^^ Cannot cast property `p` to boolean because string [1] is incompatible with boolean [2].
  References:
   33: (c_default.p: boolean); // Error string ~> boolean
        ^^^^^^^^^^^ [1]: string
   33: (c_default.p: boolean); // Error string ~> boolean
                     ^^^^^^^ [2]: boolean

Error: classes.js:34
 34: (c_star.p: boolean); // Error string ~> boolean
      ^^^^^^^^ Cannot cast property `p` to boolean because string [1] is incompatible with boolean [2].
  References:
   34: (c_star.p: boolean); // Error string ~> boolean
        ^^^^^^^^ [1]: string
   34: (c_star.p: boolean); // Error string ~> boolean
                  ^^^^^^^ [2]: boolean

Error: classes.js:40
 40: var d_too_few_args: D<> = new D('hello'); // Error too few tparams
                         ^^^ D. Too few type arguments. Expected at least 1
 36: class D<S, T = string> extends A<T> {}
             ^^^^ See type parameters of definition here

Error: classes.js:41
 41: var d_too_many: D<mixed, string, string> = new D('hello'); // Error too many tparams
                     ^^^^^^^^^^^^^^^^^^^^^^^^ D. Too many type arguments. Expected at most 2
 36: class D<S, T = string> extends A<T> {}
             ^^^^ See type parameters of definition here

Error: classes.js:42
 42: var d_star: D<*> = new D(10); // error, number ~> string
                        ^^^^^^^^^ D. Has some incompatible type argument with
 42: var d_star: D<*> = new D(10); // error, number ~> string
                 ^^^^ D
  Type argument `T` is incompatible:
     42: var d_star: D<*> = new D(10); // error, number ~> string
                                  ^^ number. This type is incompatible with
     36: class D<S, T = string> extends A<T> {}
                        ^^^^^^ string

Error: classes.js:44
 44: (d_number.p: boolean); // Error number ~> boolean
      ^^^^^^^^^^ Cannot cast property `p` to boolean because number [1] is incompatible with boolean [2].
  References:
   44: (d_number.p: boolean); // Error number ~> boolean
        ^^^^^^^^^^ [1]: number
   44: (d_number.p: boolean); // Error number ~> boolean
                    ^^^^^^^ [2]: boolean

Error: classes.js:45
 45: (d_void.p: boolean); // Error void ~> boolean
      ^^^^^^^^ Cannot cast property `p` to boolean because undefined [1] is incompatible with boolean [2].
  References:
   45: (d_void.p: boolean); // Error void ~> boolean
        ^^^^^^^^ [1]: undefined
   45: (d_void.p: boolean); // Error void ~> boolean
                  ^^^^^^^ [2]: boolean

Error: classes.js:46
 46: (d_default.p: boolean); // Error string ~> boolean
      ^^^^^^^^^^^ Cannot cast property `p` to boolean because string [1] is incompatible with boolean [2].
  References:
   46: (d_default.p: boolean); // Error string ~> boolean
        ^^^^^^^^^^^ [1]: string
   46: (d_default.p: boolean); // Error string ~> boolean
                     ^^^^^^^ [2]: boolean

Error: classes.js:47
 47: (d_star.p: boolean); // Error number ~> boolean
      ^^^^^^^^ Cannot cast property `p` to boolean because string [1] is incompatible with boolean [2].
  References:
   47: (d_star.p: boolean); // Error number ~> boolean
        ^^^^^^^^ [1]: string
   47: (d_star.p: boolean); // Error number ~> boolean
                  ^^^^^^^ [2]: boolean

Error: classes.js:49
 49: class E<S: string, T: number = S> {} // Error: string ~> number
                ^^^^^^ string [1] is incompatible with number [2].
  References:
   49: class E<S: string, T: number = S> {} // Error: string ~> number
                  ^^^^^^ [1]: string
   49: class E<S: string, T: number = S> {} // Error: string ~> number
                             ^^^^^^ [2]: number

Error: classes.js:50
 50: class F<S: string, T: S = number> {} // Error: number ~> string
                               ^^^^^^ number [1] is incompatible with string [2].
  References:
   50: class F<S: string, T: S = number> {} // Error: number ~> string
                                 ^^^^^^ [1]: number
   50: class F<S: string, T: S = number> {} // Error: number ~> string
                  ^^^^^^ [2]: string

Error: classes.js:56
 56: (g_default.p: boolean); // Error string ~> boolean
      ^^^^^^^^^^^ Cannot cast property `p` to boolean because string [1] is incompatible with boolean [2].
  References:
   56: (g_default.p: boolean); // Error string ~> boolean
        ^^^^^^^^^^^ [1]: string
   56: (g_default.p: boolean); // Error string ~> boolean
                     ^^^^^^^ [2]: boolean

Error: classes.js:58
 58: class H<S = T, T = string> {} // Error - can't refer to T before it's defined
                 ^ T. Could not resolve name

Error: classes.js:62
 62: var i_number: I<number> = new I(123); // Error number ~> ?string
                               ^^^^^^^^^^ I. Has some incompatible type argument with
 62: var i_number: I<number> = new I(123); // Error number ~> ?string
                   ^^^^^^^^^ I
  Type argument `T` is incompatible:
     62: var i_number: I<number> = new I(123); // Error number ~> ?string
                         ^^^^^^ number. This type is incompatible with
     60: class I<T: ?string = *> extends A<T> {}
                     ^^^^^^ string

Error: classes.js:62
 62: var i_number: I<number> = new I(123); // Error number ~> ?string
                               ^^^^^^^^^^ new `I`
 62: var i_number: I<number> = new I(123); // Error number ~> ?string
                     ^^^^^^ number. This type is incompatible with the bound on type parameter `T`:
 60: class I<T: ?string = *> extends A<T> {}
                 ^^^^^^ string

Error: classes.js:62
 62: var i_number: I<number> = new I(123); // Error number ~> ?string
                                     ^^^ number. This type is incompatible with the expected param type of
 60: class I<T: ?string = *> extends A<T> {}
                 ^^^^^^ string


Found 24 errors
