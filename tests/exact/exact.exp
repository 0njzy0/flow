Error: error_continues.js:3
  3: ((any: {p: number}): {|p: string|}); // We should get two errors here!
                ^^^^^^ Cannot cast `any` to object type because in property `p`, number [1] is incompatible with string [2].
  References:
    3: ((any: {p: number}): {|p: string|}); // We should get two errors here!
                  ^^^^^^ [1]: number
    3: ((any: {p: number}): {|p: string|}); // We should get two errors here!
                                 ^^^^^^ [2]: string

Error: error_continues.js:3
  3: ((any: {p: number}): {|p: string|}); // We should get two errors here!
            ^^^^^^^^^^^ object type. Inexact type is incompatible with exact type
  3: ((any: {p: number}): {|p: string|}); // We should get two errors here!
                          ^^^^^^^^^^^^^ object type

Error: exact_basics.js:49
 49: takesExactlyPerson(subtypeOfPerson); // error
                        ^^^^^^^^^^^^^^^ Cannot call `takesExactlyPerson` with `subtypeOfPerson` bound to `person` because property `first` is missing in `ExactPerson` [1] but exists in object literal [2].
  References:
   43: declare function takesExactlyPerson(person: ExactPerson): void;
                                                   ^^^^^^^^^^^ [1]: `ExactPerson`
   41: var subtypeOfPerson = { salutation: "Mr", first: "Bob", last: "Dobalina" };
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object literal

Error: exact_basics.js:61
 61: takesExactlyPerson(returnsSubtypeOfPerson());  // error
                        ^^^^^^^^^^^^^^^^^^^^^^^^ Person. Inexact type is incompatible with exact type
 43: declare function takesExactlyPerson(person: ExactPerson): void;
                                                 ^^^^^^^^^^^ ExactPerson

Error: exact_basics.js:71
 71: takesExactlyPerson(returnsExactlyPerson2()); // error
                        ^^^^^^^^^^^^^^^^^^^^^^^ Cannot call `takesExactlyPerson` with `returnsExactlyPerson2()` bound to `person` because property `first` is missing in `ExactPerson` [1] but exists in `ExactPerson2` [2].
  References:
   43: declare function takesExactlyPerson(person: ExactPerson): void;
                                                   ^^^^^^^^^^^ [1]: `ExactPerson`
   68: declare function returnsExactlyPerson2(): ExactPerson2;
                                                 ^^^^^^^^^^^^ [2]: `ExactPerson2`

Error: exact_basics.js:85
 85: takesSubtypeOfPerson2(returnsExactlyPerson()); // error
                           ^^^^^^^^^^^^^^^^^^^^^^ Cannot call `takesSubtypeOfPerson2` with `returnsExactlyPerson()` bound to `person2` because property `first` is missing in `ExactPerson` [1] but exists in `Person2` [2].
  References:
   55: declare function returnsExactlyPerson(): ExactPerson;
                                                ^^^^^^^^^^^ [1]: `ExactPerson`
   76: declare function takesSubtypeOfPerson2(person2: Person2): void;
                                                       ^^^^^^^ [2]: `Person2`

Error: exact_basics.js:94
 94: takesPersonPred(returnsExactlyPersonPred()); // error
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ PersonPred. Unsupported exact type
 94: takesPersonPred(returnsExactlyPersonPred()); // error
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ PersonPred

Error: prop_test.js:28
 28:   return pc.state;      // error, since (pc: $Exact<Person>).first may be ""
                 ^^^^^ Cannot get `pc.state` because property `state` is missing in `Person` [1].
  References:
   24: function prop_test_exact_union(pc: $Exact<Person> | $Exact<Address>): string {
                                                 ^^^^^^ [1]: `Person`

Error: unsealed.js:14
 14: f(o); // error: o incompatible with exact type
       ^ object literal. This type is incompatible with the expected param type of
  4: function f(o: {p: string} | $Exact<{}>): string {
                   ^^^^^^^^^^^^^^^^^^^^^^^^ union: object type(s)
  Member 1:
    4: function f(o: {p: string} | $Exact<{}>): string {
                     ^^^^^^^^^^^ object type
  Error:
   14: f(o); // error: o incompatible with exact type
         ^ object literal. This type is incompatible with
    4: function f(o: {p: string} | $Exact<{}>): string {
                     ^^^^^^^^^^^ object type
    Property `p` is incompatible:
        4: function f(o: {p: string} | $Exact<{}>): string {
                         ^^^^^^^^^^^ property `p`. Property not found in
       14: f(o); // error: o incompatible with exact type
             ^ object literal
  Member 2:
    4: function f(o: {p: string} | $Exact<{}>): string {
                                   ^^^^^^^^^^ object type
  Error:
   14: f(o); // error: o incompatible with exact type
         ^ object literal. Inexact type is incompatible with exact type
    4: function f(o: {p: string} | $Exact<{}>): string {
                                   ^^^^^^^^^^ object type

Error: unsealed2.js:15
 15:     return x.q;
                ^^^ Cannot return `x.q` because string [1] is incompatible with number [2].
  References:
   23:   x.q = "not a number";
               ^^^^^^^^^^^^^^ [1]: string
   13: function f(_): number {
                      ^^^^^^ [2]: number

Error: use_ops.js:2
  2: var b: { p: {| q: null |} } = a; // error a != b, with nested info for a.p != b.p
                                   ^ object type. This type is incompatible with
  2: var b: { p: {| q: null |} } = a; // error a != b, with nested info for a.p != b.p
            ^^^^^^^^^^^^^^^^^^^^ object type
  Property `p` is incompatible:
      1: declare var a: { p: { q: null } };
                             ^^^^^^^^^^^ object type. Inexact type is incompatible with exact type
      2: var b: { p: {| q: null |} } = a; // error a != b, with nested info for a.p != b.p
                     ^^^^^^^^^^^^^ object type

Error: use_ops.js:6
  6: f(o); // error: inexact arg incompatible with exact param (error should indicate exactness issue)
       ^ object type. Inexact type is incompatible with exact type
  4: function f(o: {| p: null |}) {}
                   ^^^^^^^^^^^^^ object type


Found 12 errors
