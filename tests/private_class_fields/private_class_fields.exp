Error: test.js:24
 24:     other.#p; // Error: other does not have access to private variables in here.
         ^^^^^^^^ property `#p`. Property not found in
 24:     other.#p; // Error: other does not have access to private variables in here.
         ^^^^^ C

Error: test.js:37
 37:         x.#inner = new Outer(); // Error, #inner is not a private field of Outer
             ^^^^^^^^ assignment of property `inner`. Property not found in
 37:         x.#inner = new Outer(); // Error, #inner is not a private field of Outer
             ^ Outer

Error: test.js:49
 49:         (this.#p : number); // Error, #p is a string not a number
              ^^^^^^^ Cannot cast `this.#p` to number because string [1] is incompatible with number [2].
  References:
   47:       #p: string
                 ^^^^^^ [1]: string
   49:         (this.#p : number); // Error, #p is a string not a number
                          ^^^^^^ [2]: number

Error: test.js:51
 51:         this.#p = 3; // Error, #p is a string not a number
                       ^ Cannot assign `3` to `this.#p` because number [1] is incompatible with string [2].
  References:
   51:         this.#p = 3; // Error, #p is a string not a number
                         ^ [1]: number
   47:       #p: string
                 ^^^^^^ [2]: string

Error: test.js:53
 53:         (x.#p : string) // Error, here #p is a number not a string
              ^^^^ Cannot cast `x.#p` to string because number [1] is incompatible with string [2].
  References:
   44:   #p: number
             ^^^^^^ [1]: number
   53:         (x.#p : string) // Error, here #p is a number not a string
                       ^^^^^^ [2]: string

Error: test.js:65
 65:       (this.#p : number); // Error #p is null or undefined
            ^^^^^^^ Cannot cast `this.#p` to number because null or undefined [1] is incompatible with number [2].
  References:
   60:   #p: ?number
             ^^^^^^^ [1]: null or undefined
   65:       (this.#p : number); // Error #p is null or undefined
                        ^^^^^^ [2]: number

Error: test.js:75
 75:     a.#p = 3; // Error, #p not on number
         ^^^^ assignment of property `p`. Property cannot be assigned on
 75:     a.#p = 3; // Error, #p not on number
         ^ number

Error: test.js:77
 77:     b.#p; // Error, #p not on b.
         ^^^^ property `#p`. Property cannot be accessed on
 77:     b.#p; // Error, #p not on b.
         ^ object type

Error: test.js:93
 93:    IncompatibleGetAndSet.#q; // Error, not visible here
        ^^^^^^^^^^^^^^^^^^^^^^^^ property `#q`. Property not found in
 93:    IncompatibleGetAndSet.#q; // Error, not visible here
        ^^^^^^^^^^^^^^^^^^^^^ IncompatibleGetAndSet

Error: test.js:95
 95:    this.#p = 3; // Error, no #p on instance
        ^^^^^^^ assignment of property `p`. Property not found in
 95:    this.#p = 3; // Error, no #p on instance
        ^^^^ Static

Error: test.js:96
 96:    this.#q; // Error, no #q on instance
        ^^^^^^^ property `#q`. Property not found in
 96:    this.#q; // Error, no #q on instance
        ^^^^ Static

Error: test.js:97
 97:    Static.#r; // Error, no #r on class
        ^^^^^^^^^ property `#r`. Property not found in
 97:    Static.#r; // Error, no #r on class
        ^^^^^^ Static

Error: test.js:98
 98:    Static.#r = Static.#q; // Error, no #r on class
        ^^^^^^^^^ assignment of property `r`. Property not found in
 98:    Static.#r = Static.#q; // Error, no #r on class
        ^^^^^^ Static

Error: test.js:107
107:   #s: string = 0; // Error, number ~> string
                    ^ number [1] is incompatible with string [2].
  References:
  107:   #s: string = 0; // Error, number ~> string
                      ^ [1]: number
  107:   #s: string = 0; // Error, number ~> string
             ^^^^^^ [2]: string

Error: test.js:112
112:   static #ss: string = 0; // Error, number ~> string
                            ^ number [1] is incompatible with string [2].
  References:
  112:   static #ss: string = 0; // Error, number ~> string
                              ^ [1]: number
  112:   static #ss: string = 0; // Error, number ~> string
                     ^^^^^^ [2]: string

Error: test.js:118
118:     return this.#t; // Error, string ~> number
                ^^^^^^^ Cannot return `this.#t` because string [1] is incompatible with number [2].
  References:
  108:   #t: string = "yay!";
             ^^^^^^ [1]: string
  117:   test2(): number {
                  ^^^^^^ [2]: number

Error: test.js:124
124:     return Annotations.#st; // Error, string ~> number
                ^^^^^^^^^^^^^^^ Cannot return `Annotations.#st` because string [1] is incompatible with number [2].
  References:
  113:   static #st: string = "yay!";
                     ^^^^^^ [1]: string
  123:   test4(): number {
                  ^^^^^^ [2]: number

Error: test.js:130
130:     return this.#r; // Error, number ~> string
                ^^^^^^^ Cannot return `this.#r` because number [1] is incompatible with string [2].
  References:
  133:     this.#r = 3;
                     ^ [1]: number
  129:   test6(): string {
                  ^^^^^^ [2]: string

Error: test.js:139
139:     return Annotations.#sr; // Error, number ~> string
                ^^^^^^^^^^^^^^^ Cannot return `Annotations.#sr` because number [1] is incompatible with string [2].
  References:
  142:     Annotations.#sr = 3;
                             ^ [1]: number
  138:   test8(): string {
                  ^^^^^^ [2]: string

Error: test.js:155
155:      (this.p: 3); // Error, this.#p doesn't refine this.p
           ^^^^^^ Cannot cast `this.p` to number literal `3` because number [1] is incompatible with number literal `3` [2].
  References:
  150:  p: number;
           ^^^^^^ [1]: number
  155:      (this.p: 3); // Error, this.#p doesn't refine this.p
                     ^ [2]: number literal `3`

Error: test.js:159
159:      (this.#p: 4); // Error, this.p doesnt refine this.#p
           ^^^^^^^ Cannot cast `this.#p` to number literal `4` because number literal `3` [1] is incompatible with number literal `4` [2].
  References:
  154:    if (this.#p === 3) {
              ^^^^^^^ [1]: number literal `3`
  159:      (this.#p: 4); // Error, this.p doesnt refine this.#p
                      ^ [2]: number literal `4`

Error: test.js:162
162:      (this.p: 3); // Error, this.#p doesnt refine this.p
           ^^^^^^ Cannot cast `this.p` to number literal `3` because number [1] is incompatible with number literal `3` [2].
  References:
  157:      this.p = 4;
                     ^ [1]: number
  162:      (this.p: 3); // Error, this.#p doesnt refine this.p
                     ^ [2]: number literal `3`

Error: test.js:165
165:    (this.#p: 3); // Error, Havoc happens as normal
         ^^^^^^^ Cannot cast `this.#p` to number literal `3` because number [1] is incompatible with number literal `3` [2].
  References:
  149:  #p: number;
            ^^^^^^ [1]: number
  165:    (this.#p: 3); // Error, Havoc happens as normal
                    ^ [2]: number literal `3`

Error: test.js:169
169:      (RefinementClashes.q: 3); // Error, RefinementClashes.#q doesn't refine RefinementClashes.q
           ^^^^^^^^^^^^^^^^^^^ Cannot cast `RefinementClashes.q` to number literal `3` because number [1] is incompatible with number literal `3` [2].
  References:
  151:  static q: number;
                  ^^^^^^ [1]: number
  169:      (RefinementClashes.q: 3); // Error, RefinementClashes.#q doesn't refine RefinementClashes.q
                                  ^ [2]: number literal `3`

Error: test.js:173
173:      (RefinementClashes.#q: 4); // Error, RefinementClashes.q doesnt refine RefinementClashes.#q
           ^^^^^^^^^^^^^^^^^^^^ Cannot cast `RefinementClashes.#q` to number literal `4` because number literal `3` [1] is incompatible with number literal `4` [2].
  References:
  168:    if (RefinementClashes.#q === 3) {
              ^^^^^^^^^^^^^^^^^^^^ [1]: number literal `3`
  173:      (RefinementClashes.#q: 4); // Error, RefinementClashes.q doesnt refine RefinementClashes.#q
                                   ^ [2]: number literal `4`

Error: test.js:176
176:      (RefinementClashes.q: 3); // Error, RefinementClashes.#q doesnt refine RefinementClashes.q
           ^^^^^^^^^^^^^^^^^^^ Cannot cast `RefinementClashes.q` to number literal `3` because number [1] is incompatible with number literal `3` [2].
  References:
  171:      RefinementClashes.q = 4;
                                  ^ [1]: number
  176:      (RefinementClashes.q: 3); // Error, RefinementClashes.#q doesnt refine RefinementClashes.q
                                  ^ [2]: number literal `3`

Error: test.js:179
179:    (RefinementClashes.#q: 3); // Error, Havoc happens as normal
         ^^^^^^^^^^^^^^^^^^^^ Cannot cast `RefinementClashes.#q` to number literal `3` because number [1] is incompatible with number literal `3` [2].
  References:
  152:  static #q: number;
                   ^^^^^^ [1]: number
  179:    (RefinementClashes.#q: 3); // Error, Havoc happens as normal
                                 ^ [2]: number literal `3`

Error: test.js:185
185:      (this.#p: 3); // Error, other.#p does havoc this.#p
           ^^^^^^^ Cannot cast `this.#p` to number literal `3` because number [1] is incompatible with number literal `3` [2].
  References:
  149:  #p: number;
            ^^^^^^ [1]: number
  185:      (this.#p: 3); // Error, other.#p does havoc this.#p
                      ^ [2]: number literal `3`


Found 28 errors
