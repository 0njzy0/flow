Error --------------------------------------------------- import_typeof.js:13:22

Error: import_typeof.js:13
 13: var a2: ClassFoo1T = new ClassFoo1(); // Error: ClassFoo1 (inst) ~> ClassFoo1 (class)
                          ^^^^^^^^^^^^^^^ Cannot assign `new ClassFoo1()` to `a2` because `ClassFoo1` [1] is incompatible with statics of `ClassFoo1` [2].
  References:
   13: var a2: ClassFoo1T = new ClassFoo1(); // Error: ClassFoo1 (inst) ~> ClassFoo1 (class)
                            ^^^^^^^^^^^^^^^ [1]: `ClassFoo1`
   13: var a2: ClassFoo1T = new ClassFoo1(); // Error: ClassFoo1 (inst) ~> ClassFoo1 (class)
               ^^^^^^^^^^ [2]: statics of `ClassFoo1`

Error ---------------------------------------------------- import_typeof.js:14:5

Error: import_typeof.js:14
 14: new ClassFoo1T(); // Error: ClassFoo1T is not bound to a value
         ^^^^^^^^^^ Cannot reference type `ClassFoo1T` [1] from a value position.
  References:
    9: import typeof ClassFoo1T from "./ExportDefault_Class";
                     ^^^^^^^^^^ [1]: `ClassFoo1T`

Error --------------------------------------------------- import_typeof.js:24:22

Error: import_typeof.js:24
 24: var b2: ClassFoo2T = new ClassFoo2(); // Error: ClassFoo2 (inst) ~> ClassFoo2 (class)
                          ^^^^^^^^^^^^^^^ Cannot assign `new ClassFoo2()` to `b2` because `ClassFoo2` [1] is incompatible with statics of `ClassFoo2` [2].
  References:
   24: var b2: ClassFoo2T = new ClassFoo2(); // Error: ClassFoo2 (inst) ~> ClassFoo2 (class)
                            ^^^^^^^^^^^^^^^ [1]: `ClassFoo2`
   24: var b2: ClassFoo2T = new ClassFoo2(); // Error: ClassFoo2 (inst) ~> ClassFoo2 (class)
               ^^^^^^^^^^ [2]: statics of `ClassFoo2`

Error ---------------------------------------------------- import_typeof.js:25:5

Error: import_typeof.js:25
 25: new ClassFoo2T(); // Error: ClassFoo2T is not bound to a value
         ^^^^^^^^^^ Cannot reference type `ClassFoo2T` [1] from a value position.
  References:
   20: import typeof {ClassFoo2 as ClassFoo2T} from "./ExportNamed_Class";
                      ^^^^^^^^^^^^^^^^^^^^^^^ [1]: `ClassFoo2T`

Error --------------------------------------------------- import_typeof.js:35:22

Error: import_typeof.js:35
 35: var c2: ClassFoo3T = new ClassFoo3(); // Error: ClassFoo3 (inst) ~> ClassFoo3 (class)
                          ^^^^^^^^^^^^^^^ Cannot assign `new ClassFoo3()` to `c2` because `ClassFoo3` [1] is incompatible with statics of `ClassFoo3` [2].
  References:
   35: var c2: ClassFoo3T = new ClassFoo3(); // Error: ClassFoo3 (inst) ~> ClassFoo3 (class)
                            ^^^^^^^^^^^^^^^ [1]: `ClassFoo3`
   35: var c2: ClassFoo3T = new ClassFoo3(); // Error: ClassFoo3 (inst) ~> ClassFoo3 (class)
               ^^^^^^^^^^ [2]: statics of `ClassFoo3`

Error --------------------------------------------------- import_typeof.js:45:22

Error: import_typeof.js:45
 45: var d2: ClassFoo4T = new ClassFoo4(); // Error: ClassFoo4 (inst) ~> ClassFoo4 (class)
                          ^^^^^^^^^^^^^^^ Cannot assign `new ClassFoo4()` to `d2` because `ClassFoo4` [1] is incompatible with statics of `ClassFoo4` [2].
  References:
   45: var d2: ClassFoo4T = new ClassFoo4(); // Error: ClassFoo4 (inst) ~> ClassFoo4 (class)
                            ^^^^^^^^^^^^^^^ [1]: `ClassFoo4`
   45: var d2: ClassFoo4T = new ClassFoo4(); // Error: ClassFoo4 (inst) ~> ClassFoo4 (class)
               ^^^^^^^^^^ [2]: statics of `ClassFoo4`

Error --------------------------------------------------- import_typeof.js:51:16

Error: import_typeof.js:51
 51: import typeof {AliasFoo3} from "./ExportNamed_Alias"; // Error: Can't `import typeof` type aliases!
                    ^^^^^^^^^ Cannot import the type `AliasFoo3` as a type. `import typeof` only works on value exports. Like variables, functions, and classes. If you intended to import a type use `import type` instead.

Error --------------------------------------------------- import_typeof.js:68:23

Error: import_typeof.js:68
 68: var f2: num_default = 'asdf'; // Error: string ~> number
                           ^^^^^^ Cannot assign `'asdf'` to `f2` because string [1] is incompatible with number [2].
  References:
   68: var f2: num_default = 'asdf'; // Error: string ~> number
                             ^^^^^^ [1]: string
   68: var f2: num_default = 'asdf'; // Error: string ~> number
               ^^^^^^^^^^^ [2]: number

Error --------------------------------------------------- import_typeof.js:77:21

Error: import_typeof.js:77
 77: var g2: num_named = 'asdf'; // Error: string ~> number
                         ^^^^^^ Cannot assign `'asdf'` to `g2` because string [1] is incompatible with number [2].
  References:
   77: var g2: num_named = 'asdf'; // Error: string ~> number
                           ^^^^^^ [1]: string
   77: var g2: num_named = 'asdf'; // Error: string ~> number
               ^^^^^^^^^ [2]: number

Error --------------------------------------------------- import_typeof.js:86:27

Error: import_typeof.js:86
 86: var h2: num_cjs_default = 'asdf'; // Error: string ~> number
                               ^^^^^^ Cannot assign `'asdf'` to `h2` because string [1] is incompatible with number [2].
  References:
   86: var h2: num_cjs_default = 'asdf'; // Error: string ~> number
                                 ^^^^^^ [1]: string
   86: var h2: num_cjs_default = 'asdf'; // Error: string ~> number
               ^^^^^^^^^^^^^^^ [2]: number

Error --------------------------------------------------- import_typeof.js:95:25

Error: import_typeof.js:95
 95: var i2: num_cjs_named = 'asdf'; // Error: string ~> number
                             ^^^^^^ Cannot assign `'asdf'` to `i2` because string [1] is incompatible with number [2].
  References:
   95: var i2: num_cjs_named = 'asdf'; // Error: string ~> number
                               ^^^^^^ [1]: string
   95: var i2: num_cjs_named = 'asdf'; // Error: string ~> number
               ^^^^^^^^^^^^^ [2]: number

Error -------------------------------------------------- import_typeof.js:103:39

Error: import_typeof.js:103
103: var j2: ModuleNSObjT = {num: 42, str: 42}; // Error: number ~> string
                                           ^^ Cannot assign object literal to `j2` because in property `str`, number [1] is incompatible with string [2].
  References:
  103: var j2: ModuleNSObjT = {num: 42, str: 42}; // Error: number ~> string
                                             ^^ [1]: number
    4: export var str = 'asdf';
                        ^^^^^^ [2]: string. See: ExportNamed_Multi.js:4


Found 12 errors
