Error -------------------------------------------------------------------------------------- sanity-filter-union.js:6:71

object with property `kind` that matches string literal `A` [1] is incompatible with string literal `B` [2].

   sanity-filter-union.js:6:71
   6| declare function my_filter<T, P: $Pred<1>>(v: Array<T>, cb: P): Array<$Refine<T,P,1>>;
                                                                            ^^^^^^^^^^^^^^

References:
   sanity-filter-union.js:6:71
   6| declare function my_filter<T, P: $Pred<1>>(v: Array<T>, cb: P): Array<$Refine<T,P,1>>;
                                                                            ^^^^^^^^^^^^^^ [1]
   sanity-filter-union.js:9:18
   9| type B = { kind: 'B', v: string }
                       ^^^ [2]


Error -------------------------------------------------------------------------------------- sanity-filter-union.js:16:2

Cannot cast `my_filter(...)` to array type because:
 - in type argument `T` and then property `kind`, string literal `A` [1] is incompatible with string literal `B` [2].
 - in type argument `T`, property `v` is missing in `A` [3] but exists in `B` [4].

   sanity-filter-union.js:16:2
   16| (my_filter(ab, (x): %checks => x.kind === 'A'): Array<B>);    // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   sanity-filter-union.js:8:18
    8| type A = { kind: 'A', u: number }
                        ^^^ [1]
   sanity-filter-union.js:9:18
    9| type B = { kind: 'B', v: string }
                        ^^^ [2]
   sanity-filter-union.js:14:23
   14| declare var ab: Array<A|B|C>;
                             ^ [3]
   sanity-filter-union.js:16:55
   16| (my_filter(ab, (x): %checks => x.kind === 'A'): Array<B>);    // ERROR
                                                             ^ [4]


Error: sanity-filter-union.js:17
 17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. Has some incompatible type argument with
 17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                     ^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     14: declare var ab: Array<A|B|C>;
                                 ^ B. This type is incompatible with
     17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                               ^^^ union: `A` | `C`
      Member 1:
       17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                                 ^ A
      Error:
       14: declare var ab: Array<A|B|C>;
                                   ^ B. This type is incompatible with
       17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                                 ^ A
        Property `kind` is incompatible:
            9: type B = { kind: 'B', v: string }
                                ^^^ string literal `B`. Expected string literal `A`, got `B` instead
            8: type A = { kind: 'A', u: number }
                                ^^^ string literal `A`
      Member 2:
       17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                                   ^ C
      Error:
       14: declare var ab: Array<A|B|C>;
                                   ^ B. This type is incompatible with
       17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                                   ^ C
        Property `kind` is incompatible:
            9: type B = { kind: 'B', v: string }
                                ^^^ string literal `B`. Expected string literal `C`, got `B` instead
           10: type C = { kind: 'C', y: boolean }
                                ^^^ string literal `C`

Error --------------------------------------------------------------------------------------------- sanity-filter.js:8:2

Cannot cast `b` to array type because in type argument `T`, string [1] is incompatible with number [2].

   sanity-filter.js:8:2
   8| (b: Array<number>);
       ^

References:
   sanity-filter.js:6:22
   6| declare var a: Array<mixed>;
                           ^^^^^ [1]
   sanity-filter.js:8:11
   8| (b: Array<number>);
                ^^^^^^ [2]


Error: sanity-filter.js:13
 13: const d = my_filter(c, is_string_regular);
                            ^^^^^^^^^^^^^^^^^ function. Function is incompatible with
  3: declare function my_filter<T, P: $Pred<1>>(v: Array<T>, cb: P): Array<$Refine<T,P,1>>;
                                      ^^^^^^^^ abstract predicate function

Error -------------------------------------------------------------------------------------------- sanity-filter.js:14:2

Cannot cast `d` to array type because in type argument `T`, mixed [1] is incompatible with string [2].

   sanity-filter.js:14:2
   14| (d: Array<string>);
        ^

References:
   sanity-filter.js:12:22
   12| declare var c: Array<mixed>;
                            ^^^^^ [1]
   sanity-filter.js:14:11
   14| (d: Array<string>);
                 ^^^^^^ [2]


Error: sanity-refine.js:4
  4: declare function refine<T, P: $Pred<1>>(v: T, cb: P): $Refine<T,P,2>;
                                                           ^^^^^^^^^^^^^^ refined type that uses predicate on parameter at position 2. This is incompatible with
  7: var b = refine(a, is_string);   // ERROR: index out of bounds
                       ^^^^^^^^^ function with 1 parameters

Error --------------------------------------------------------------------------------------------- sanity-refine.js:8:2

Cannot cast `b` to string because mixed [1] is incompatible with string [2].

   sanity-refine.js:8:2
   8| (b: string);
       ^

References:
   sanity-refine.js:6:16
   6| declare var a: mixed;
                     ^^^^^ [1]
   sanity-refine.js:8:5
   8| (b: string);
          ^^^^^^ [2]


Error: sanity-refine.js:19
 19: var e = refine3(c, d, e, is_string_and_number);
                              ^^^^^^^^^^^^^^^^^^^^ predicate function with 2 arguments. Predicate function is incompatible with
 17: declare function refine3<T, P: $Pred<3>>(u: T, v: T, w: T, cb: P): $Refine<T,P,1>;
                                    ^^^^^^^^ predicate function with 3 arguments

Error: sanity-refine.js:28
 28: var e = refine(a, is_string_regular);   // ERROR: is_string_regular is not a
                       ^^^^^^^^^^^^^^^^^ function. Function is incompatible with
  4: declare function refine<T, P: $Pred<1>>(v: T, cb: P): $Refine<T,P,2>;
                                   ^^^^^^^^ abstract predicate function

Error -------------------------------------------------------------------------------------------- sanity-refine.js:30:2

Cannot cast `e` to number because mixed [1] is incompatible with number [2].

   sanity-refine.js:30:2
   30| (e: number);
        ^

References:
   sanity-refine.js:6:16
    6| declare var a: mixed;
                      ^^^^^ [1]
   sanity-refine.js:30:5
   30| (e: number);
           ^^^^^^ [2]



Found 12 errors
