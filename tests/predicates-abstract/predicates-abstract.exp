Error -------------------------------------------------------------------------------------- sanity-filter-union.js:6:71

object with property `kind` that matches string literal `A` is incompatible with string literal `B`.


Error -------------------------------------------------------------------------------------- sanity-filter-union.js:16:2

Cannot cast `my_filter(...)` to array type because in type argument `T` and then property `kind`, string literal `A` is
incompatible with string literal `B`.


Error -------------------------------------------------------------------------------------- sanity-filter-union.js:16:2

Cannot cast `my_filter(...)` to array type because in type argument `T`, property `v` is missing in `A` but exists in
`B`.


Error: sanity-filter-union.js:17
 17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array type. Has some incompatible type argument with
 17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                     ^^^^^^^^^^ array type
  Type argument `T` is incompatible:
     14: declare var ab: Array<A|B|C>;
                                 ^ B. This type is incompatible with
     17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                               ^^^ union: `A` | `C`
      Member 1:
       17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                                 ^ A
      Error:
       14: declare var ab: Array<A|B|C>;
                                   ^ B. This type is incompatible with
       17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                                 ^ A
        Property `kind` is incompatible:
            9: type B = { kind: 'B', v: string }
                                ^^^ string literal `B`. Expected string literal `A`, got `B` instead
            8: type A = { kind: 'A', u: number }
                                ^^^ string literal `A`
      Member 2:
       17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                                   ^ C
      Error:
       14: declare var ab: Array<A|B|C>;
                                   ^ B. This type is incompatible with
       17: (my_filter(ab, (x): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                                   ^ C
        Property `kind` is incompatible:
            9: type B = { kind: 'B', v: string }
                                ^^^ string literal `B`. Expected string literal `C`, got `B` instead
           10: type C = { kind: 'C', y: boolean }
                                ^^^ string literal `C`

Error --------------------------------------------------------------------------------------------- sanity-filter.js:8:2

Cannot cast `b` to array type because in type argument `T`, string is incompatible with number.


Error: sanity-filter.js:13
 13: const d = my_filter(c, is_string_regular);
                            ^^^^^^^^^^^^^^^^^ function. Function is incompatible with
  3: declare function my_filter<T, P: $Pred<1>>(v: Array<T>, cb: P): Array<$Refine<T,P,1>>;
                                      ^^^^^^^^ abstract predicate function

Error -------------------------------------------------------------------------------------------- sanity-filter.js:14:2

Cannot cast `d` to array type because in type argument `T`, mixed is incompatible with string.


Error: sanity-refine.js:4
  4: declare function refine<T, P: $Pred<1>>(v: T, cb: P): $Refine<T,P,2>;
                                                           ^^^^^^^^^^^^^^ refined type that uses predicate on parameter at position 2. This is incompatible with
  7: var b = refine(a, is_string);   // ERROR: index out of bounds
                       ^^^^^^^^^ function with 1 parameters

Error --------------------------------------------------------------------------------------------- sanity-refine.js:8:2

Cannot cast `b` to string because mixed is incompatible with string.


Error: sanity-refine.js:19
 19: var e = refine3(c, d, e, is_string_and_number);
                              ^^^^^^^^^^^^^^^^^^^^ predicate function with 2 arguments. Predicate function is incompatible with
 17: declare function refine3<T, P: $Pred<3>>(u: T, v: T, w: T, cb: P): $Refine<T,P,1>;
                                    ^^^^^^^^ predicate function with 3 arguments

Error: sanity-refine.js:28
 28: var e = refine(a, is_string_regular);   // ERROR: is_string_regular is not a
                       ^^^^^^^^^^^^^^^^^ function. Function is incompatible with
  4: declare function refine<T, P: $Pred<1>>(v: T, cb: P): $Refine<T,P,2>;
                                   ^^^^^^^^ abstract predicate function

Error -------------------------------------------------------------------------------------------- sanity-refine.js:30:2

Cannot cast `e` to number because mixed is incompatible with number.



Found 12 errors
