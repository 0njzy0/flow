Error: createElementRequiredProp_string.js:17
 17:     return (<Cmp/>);
                  ^^^ Cannot create `Cmp` element because property `test` is missing in props [1] but exists in object type [2].
  References:
   17:     return (<Cmp/>);
                   ^^^^^^ [1]: props
    4: class Bar extends React.Component<{test: number}> {
                                         ^^^^^^^^^^^^^^ [2]: object type

Error: create_class.js:7
  7:     (this.props.foo: empty); // error: string ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.props.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
    7:     (this.props.foo: empty); // error: string ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:8
  8:     (this.props.bar: empty); // error: number ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.props.bar` to empty because number [1] is incompatible with empty [2].
  References:
  294:   number: React$PropType$Primitive<number>;
                                          ^^^^^^ [1]: number. See lib: <BUILTINS>/react.js:294
    8:     (this.props.bar: empty); // error: number ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:15
 15:     this.p = 0; // error: number ~> string
                  ^ Cannot assign `0` to `this.p` because number [1] is incompatible with string [2].
  References:
   15:     this.p = 0; // error: number ~> string
                    ^ [1]: number
   13:   p: "",
            ^^ [2]: string

Error: create_class.js:48
 48:     (this.foo: string); // error: number ~> string
          ^^^^^^^^ Cannot cast `this.foo` to string because number [1] is incompatible with string [2].
  References:
   46:   foo: 0,
              ^ [1]: number
   48:     (this.foo: string); // error: number ~> string
                      ^^^^^^ [2]: string

Error: create_class.js:71
 71:     (this.mixins: mixed); // error: property `mixins` not found
               ^^^^^^ Cannot get `this.mixins` because property `mixins` is missing in React component [1].
  References:
                 v------------------
   66: const G = React.createClass({
   67:   mixins: [],
   68:   autobind: true,
  ...:
   75: });
       -^ [1]: React component

Error: create_class.js:72
 72:     (this.autobind: mixed); // error: property `autobind` not found
               ^^^^^^^^ Cannot get `this.autobind` because property `autobind` is missing in React component [1].
  References:
                 v------------------
   66: const G = React.createClass({
   67:   mixins: [],
   68:   autobind: true,
  ...:
   75: });
       -^ [1]: React component

Error: create_class.js:73
 73:     (this.statics: mixed); // error: property `statics` not found
               ^^^^^^^ Cannot get `this.statics` because property `statics` is missing in React component [1].
  References:
                 v------------------
   66: const G = React.createClass({
   67:   mixins: [],
   68:   autobind: true,
  ...:
   75: });
       -^ [1]: React component

Error: create_class.js:80
 80:     (this.q: empty); // error: number ~> empty
          ^^^^^^ Cannot cast `this.q` to empty because number [1] is incompatible with empty [2].
  References:
   78:   statics: { q: 0 },
                       ^ [1]: number
   80:     (this.q: empty); // error: number ~> empty
                    ^^^^^ [2]: empty

Error: create_class.js:104
104:     (this.state.foo: empty); // number ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.state.foo` to empty because number [1] is incompatible with empty [2].
  References:
  100:       return { foo: 0 };
                           ^ [1]: number
  104:     (this.state.foo: empty); // number ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:117
117:     (this.props.foo: empty); // string ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.props.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
  117:     (this.props.foo: empty); // string ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:118
118:     (this.state.foo: empty); // string ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.state.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
  118:     (this.state.foo: empty); // string ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:133
133:     (this.props.foo: empty); // string ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.props.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
  133:     (this.props.foo: empty); // string ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:137
137:     (this.props.foo: empty); // string ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.props.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
  137:     (this.props.foo: empty); // string ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:141
141:     (this.props.foo: empty); // string ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.props.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
  141:     (this.props.foo: empty); // string ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:142
142:     (nextProps.foo: empty); // string ~> empty
          ^^^^^^^^^^^^^ Cannot cast `nextProps.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
  142:     (nextProps.foo: empty); // string ~> empty
                           ^^^^^ [2]: empty

Error: create_class.js:146
146:     (this.props.foo: empty); // string ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.props.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
  146:     (this.props.foo: empty); // string ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:147
147:     (this.state.bar: empty); // number ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.state.bar` to empty because number [1] is incompatible with empty [2].
  References:
  130:     return { bar: 0 };
                         ^ [1]: number
  147:     (this.state.bar: empty); // number ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:148
148:     (nextProps.foo: empty); // string ~> empty
          ^^^^^^^^^^^^^ Cannot cast `nextProps.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
  148:     (nextProps.foo: empty); // string ~> empty
                           ^^^^^ [2]: empty

Error: create_class.js:149
149:     (nextState.bar: empty); // number ~> empty
          ^^^^^^^^^^^^^ Cannot cast `nextState.bar` to empty because number [1] is incompatible with empty [2].
  References:
  130:     return { bar: 0 };
                         ^ [1]: number
  149:     (nextState.bar: empty); // number ~> empty
                           ^^^^^ [2]: empty

Error: create_class.js:150
150:     return 0; // number ~> bool
                ^ Cannot return `0` because number [1] is incompatible with boolean [2].
  References:
  150:     return 0; // number ~> bool
                  ^ [1]: number
   55:   ): boolean;
            ^^^^^^^ [2]: boolean. See lib: <BUILTINS>/react.js:55

Error: create_class.js:153
153:     (this.props.foo: empty); // string ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.props.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
  153:     (this.props.foo: empty); // string ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:154
154:     (this.state.bar: empty); // number ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.state.bar` to empty because number [1] is incompatible with empty [2].
  References:
  130:     return { bar: 0 };
                         ^ [1]: number
  154:     (this.state.bar: empty); // number ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:155
155:     (nextProps.foo: empty); // string ~> empty
          ^^^^^^^^^^^^^ Cannot cast `nextProps.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
  155:     (nextProps.foo: empty); // string ~> empty
                           ^^^^^ [2]: empty

Error: create_class.js:156
156:     (nextState.bar: empty); // number ~> empty
          ^^^^^^^^^^^^^ Cannot cast `nextState.bar` to empty because number [1] is incompatible with empty [2].
  References:
  130:     return { bar: 0 };
                         ^ [1]: number
  156:     (nextState.bar: empty); // number ~> empty
                           ^^^^^ [2]: empty

Error: create_class.js:160
160:     (this.props.foo: empty); // string ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.props.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
  160:     (this.props.foo: empty); // string ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:161
161:     (this.state.bar: empty); // number ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.state.bar` to empty because number [1] is incompatible with empty [2].
  References:
  130:     return { bar: 0 };
                         ^ [1]: number
  161:     (this.state.bar: empty); // number ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:162
162:     (nextProps.foo: empty); // string ~> empty
          ^^^^^^^^^^^^^ Cannot cast `nextProps.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
  162:     (nextProps.foo: empty); // string ~> empty
                           ^^^^^ [2]: empty

Error: create_class.js:163
163:     (nextState.bar: empty); // number ~> empty
          ^^^^^^^^^^^^^ Cannot cast `nextState.bar` to empty because number [1] is incompatible with empty [2].
  References:
  130:     return { bar: 0 };
                         ^ [1]: number
  163:     (nextState.bar: empty); // number ~> empty
                           ^^^^^ [2]: empty

Error: create_class.js:167
167:     (this.props.foo: empty); // string ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.props.foo` to empty because string [1] is incompatible with empty [2].
  References:
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:296
  167:     (this.props.foo: empty); // string ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:168
168:     (this.state.bar: empty); // number ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.state.bar` to empty because number [1] is incompatible with empty [2].
  References:
  130:     return { bar: 0 };
                         ^ [1]: number
  168:     (this.state.bar: empty); // number ~> empty
                            ^^^^^ [2]: empty

Error: create_class.js:173
173: React.createClass({}); // error: spec must be [x] exact and [ ] sealed
     ^^^^^^^^^^^^^^^^^^^^^ call of method `createClass`. Expected an exact object instead of
173: React.createClass({}); // error: spec must be [x] exact and [ ] sealed
                       ^^ object literal

Error: create_class.js:174
174: React.createClass(({}: {})); // error: spec must be [ ] exact and [x] sealed
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `createClass`. Expected an exact object instead of
174: React.createClass(({}: {})); // error: spec must be [ ] exact and [x] sealed
                            ^^ object type

Error: create_class_initial_state_sealed.js:9
  9:     (this.state.q: empty); // number ~> empty
          ^^^^^^^^^^^^ Cannot cast `this.state.q` to empty because number [1] is incompatible with empty [2].
  References:
    6:     this.setState({ q: 0 });
                              ^ [1]: number
    9:     (this.state.q: empty); // number ~> empty
                          ^^^^^ [2]: empty

Error: create_class_initial_state_sealed.js:22
 22:     (this.state.q: empty); // number ~> empty
          ^^^^^^^^^^^^ Cannot cast `this.state.q` to empty because number [1] is incompatible with empty [2].
  References:
   19:     this.setState({ q: 0 });
                              ^ [1]: number
   22:     (this.state.q: empty); // number ~> empty
                          ^^^^^ [2]: empty

Error: create_class_initial_state_sealed.js:35
 35:     (this.state.q: empty); // number ~> empty
          ^^^^^^^^^^^^ Cannot cast `this.state.q` to empty because number [1] is incompatible with empty [2].
  References:
   32:     this.setState({ q: 0 });
                              ^ [1]: number
   35:     (this.state.q: empty); // number ~> empty
                          ^^^^^ [2]: empty

Error: create_class_initial_state_sealed.js:45
 45:     this.setState({ q: 0 }); // property `q` not found
                       ^^^^^^^^ Cannot call `this.setState` with object literal bound to `partialState` because in property `q`, property `q` is missing in object type [1].
  References:
   41:   getInitialState(): { p: number } {
                            ^^^^^^^^^^^^^ [1]: object type

Error: create_class_initial_state_sealed.js:48
 48:     (this.state.q: empty); // property `q` not found
                     ^ Cannot get `this.state.q` because property `q` is missing in object type [1].
  References:
   41:   getInitialState(): { p: number } {
                            ^^^^^^^^^^^^^ [1]: object type

Error: create_class_initial_state_sealed.js:66
 66:     (this.state.baz: empty); // number ~> empty
          ^^^^^^^^^^^^^^ Cannot cast `this.state.baz` to empty because number [1] is incompatible with empty [2].
  References:
   63:     this.setState({ baz: 0 });
                                ^ [1]: number
   66:     (this.state.baz: empty); // number ~> empty
                            ^^^^^ [2]: empty

Error: create_class_initial_state_sealed.js:81
 81:     this.setState({ baz: 0 }); // property `baz`  not found
                       ^^^^^^^^^^ Cannot call `this.setState` with object literal bound to `partialState` because in property `baz`, property `baz` is missing in object type [1].
  References:
   73:     getInitialState(): { foo: number } {
                              ^^^^^^^^^^^^^^^ [1]: object type

Error: create_class_initial_state_sealed.js:84
 84:     (this.state.baz: empty); // property `baz` not found
                     ^^^ Cannot get `this.state.baz` because property `baz` is missing in object type [1].
  References:
   73:     getInitialState(): { foo: number } {
                              ^^^^^^^^^^^^^^^ [1]: object type

Error: create_class_statics_sealed.js:5
  5: (A.bar: empty); // number ~> empty (inflow below)
      ^^^^^ Cannot cast `A.bar` to empty because number [1] is incompatible with empty [2].
  References:
    6: A.bar = 0;
               ^ [1]: number
    5: (A.bar: empty); // number ~> empty (inflow below)
               ^^^^^ [2]: empty

Error: create_class_statics_sealed.js:12
 12: (B.foo: empty); // number ~> empty
      ^^^^^ Cannot cast `B.foo` to empty because number [1] is incompatible with empty [2].
  References:
   10:   statics: { foo: 0 },
                         ^ [1]: number
   12: (B.foo: empty); // number ~> empty
               ^^^^^ [2]: empty

Error: create_class_statics_sealed.js:13
 13: (B.bar: empty); // number ~> empty (inflow below)
      ^^^^^ Cannot cast `B.bar` to empty because number [1] is incompatible with empty [2].
  References:
   14: B.bar = 0;
               ^ [1]: number
   13: (B.bar: empty); // number ~> empty (inflow below)
               ^^^^^ [2]: empty

Error: create_class_statics_sealed.js:20
 20: (C.foo: empty); // number ~> empty
      ^^^^^ Cannot cast `C.foo` to empty because number [1] is incompatible with empty [2].
  References:
   18:   statics: ({ foo: 0 }: {| foo: number |}),
                                       ^^^^^^ [1]: number
   20: (C.foo: empty); // number ~> empty
               ^^^^^ [2]: empty

Error: create_class_statics_sealed.js:21
 21: (C.bar: empty); // number ~> empty (inflow below)
      ^^^^^ Cannot cast `C.bar` to empty because number [1] is incompatible with empty [2].
  References:
   22: C.bar = 0;
               ^ [1]: number
   21: (C.bar: empty); // number ~> empty (inflow below)
               ^^^^^ [2]: empty

Error: create_class_statics_sealed.js:28
 28: (D.foo: empty); // number ~> empty
      ^^^^^ Cannot cast `D.foo` to empty because number [1] is incompatible with empty [2].
  References:
   26:   statics: ({ foo: 0 }: { foo: number }),
                                      ^^^^^^ [1]: number
   28: (D.foo: empty); // number ~> empty
               ^^^^^ [2]: empty

Error: create_class_statics_sealed.js:29
 29: (D.bar: empty); // property `bar` not found
        ^^^ Cannot get `D.bar` because property `bar` is missing in statics of React class [1].
  References:
   26:   statics: ({ foo: 0 }: { foo: number }),
                               ^^^^^^^^^^^^^^^ [1]: statics of React class

Error: create_class_statics_sealed.js:30
 30: D.bar = 0; // property `bar` not found
       ^^^ Cannot assign `0` to `D.bar` because property `bar` is missing in statics of React class [1].
  References:
   26:   statics: ({ foo: 0 }: { foo: number }),
                               ^^^^^^^^^^^^^^^ [1]: statics of React class

Error: create_class_statics_sealed.js:39
 39: (E.foo: empty); // number ~> empty
      ^^^^^ Cannot cast `E.foo` to empty because number [1] is incompatible with empty [2].
  References:
   35:     statics: { foo: 0 },
                           ^ [1]: number
   39: (E.foo: empty); // number ~> empty
               ^^^^^ [2]: empty

Error: create_class_statics_sealed.js:40
 40: (E.bar: empty); // number ~> empty
      ^^^^^ Cannot cast `E.bar` to empty because number [1] is incompatible with empty [2].
  References:
   37:   statics: { bar: 0 },
                         ^ [1]: number
   40: (E.bar: empty); // number ~> empty
               ^^^^^ [2]: empty

Error: create_class_statics_sealed.js:41
 41: (E.baz: empty); // number ~> empty (inflow below)
      ^^^^^ Cannot cast `E.baz` to empty because number [1] is incompatible with empty [2].
  References:
   42: E.baz = 0;
               ^ [1]: number
   41: (E.baz: empty); // number ~> empty (inflow below)
               ^^^^^ [2]: empty

Error: create_class_statics_sealed.js:51
 51: (F.foo: empty); // number ~> empty
      ^^^^^ Cannot cast `F.foo` to empty because number [1] is incompatible with empty [2].
  References:
   47:     statics: ({ foo: 0 }: { foo: number }),
                                        ^^^^^^ [1]: number
   51: (F.foo: empty); // number ~> empty
               ^^^^^ [2]: empty

Error: create_class_statics_sealed.js:52
 52: (F.bar: empty); // number ~> empty
      ^^^^^ Cannot cast `F.bar` to empty because number [1] is incompatible with empty [2].
  References:
   49:   statics: { bar: 0 },
                         ^ [1]: number
   52: (F.bar: empty); // number ~> empty
               ^^^^^ [2]: empty

Error: create_class_statics_sealed.js:53
 53: (F.baz: empty); // number ~> empty (inflow below)
        ^^^ Cannot get `F.baz` because property `baz` is missing in statics of React class [1].
  References:
   49:   statics: { bar: 0 },
                  ^^^^^^^^^^ [1]: statics of React class

Error: create_class_statics_sealed.js:54
 54: F.baz = 0;
       ^^^ Cannot assign `0` to `F.baz` because property `baz` is missing in statics of React class [1].
  References:
   49:   statics: { bar: 0 },
                  ^^^^^^^^^^ [1]: statics of React class

Error: default_props_undefined.js:10
 10: <Foo bar="42"/>; // Error
              ^^^^ Cannot create `Foo` element because in property `bar`, string [1] is incompatible with number [2].
  References:
   10: <Foo bar="42"/>; // Error
                ^^^^ [1]: string
    5: class Foo extends React.Component<{bar: number}, void> {
                                               ^^^^^^ [2]: number

Error: element_config.js:15
 15:   static defaultProps = {p: 'foo'}; // Error: string ~> number
                                 ^^^^^ string [1] is incompatible with number [2].
  References:
   15:   static defaultProps = {p: 'foo'}; // Error: string ~> number
                                   ^^^^^ [1]: string
   14: class B extends React.Component<{p: ?number}> {
                                            ^^^^^^ [2]: number

Error: element_config.js:31
 31:   static defaultProps = {p: 42}; // Error: extra property `p`
                             ^^^^^^^ Property `p` is missing in object literal [1] but exists in object type [2].
  References:
   31:   static defaultProps = {p: 42}; // Error: extra property `p`
                               ^^^^^^^ [1]: object literal
   30: class F extends React.Component<{||}> {
                                       ^^^^ [2]: object type

Error: element_config.js:39
 39:   static defaultProps = {p: 'foo'}; // Error: string ~> number
                                 ^^^^^ string [1] is incompatible with number [2].
  References:
   39:   static defaultProps = {p: 'foo'}; // Error: string ~> number
                                   ^^^^^ [1]: string
   38: class H extends React.Component<{p?: ?number}> {
                                             ^^^^^^ [2]: number

Error: element_config.js:47
 47:   static defaultProps = ({}: {p?: string}); // Error: string ~> number
                                       ^^^^^^ string [1] is incompatible with number [2].
  References:
   47:   static defaultProps = ({}: {p?: string}); // Error: string ~> number
                                         ^^^^^^ [1]: string
   46: class J extends React.Component<{p?: ?number}> {
                                             ^^^^^^ [2]: number

Error: element_config.js:52
 52: ({p: 'foo'}: React.ElementConfig<typeof A>); // Error: string ~> number
          ^^^^^ Cannot cast object literal to `ElementConfig` because in property `p`, string [1] is incompatible with number [2].
  References:
   52: ({p: 'foo'}: React.ElementConfig<typeof A>); // Error: string ~> number
            ^^^^^ [1]: string
   10: class A extends React.Component<{p: ?number}> {
                                            ^^^^^^ [2]: number

Error: element_config.js:56
 56: ({p: 'foo'}: React.ElementConfig<typeof B>); // Error: string ~> number
          ^^^^^ Cannot cast object literal to `ElementConfig` because in property `p`, string [1] is incompatible with number [2].
  References:
   56: ({p: 'foo'}: React.ElementConfig<typeof B>); // Error: string ~> number
            ^^^^^ [1]: string
   14: class B extends React.Component<{p: ?number}> {
                                            ^^^^^^ [2]: number

Error: element_config.js:58
 58: ({}: React.ElementConfig<typeof C>); // Error: missing property `p`
      ^^ Cannot cast object literal to `ElementConfig` because property `p` is missing in object literal [1] but exists in object type [2].
  References:
   58: ({}: React.ElementConfig<typeof C>); // Error: missing property `p`
        ^^ [1]: object literal
   58: ({}: React.ElementConfig<typeof C>); // Error: missing property `p`
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: element_config.js:60
 60: ({p: 'foo'}: React.ElementConfig<typeof C>); // Error: string ~> number
          ^^^^^ Cannot cast object literal to `ElementConfig` because in property `p`, string [1] is incompatible with number [2].
  References:
   60: ({p: 'foo'}: React.ElementConfig<typeof C>); // Error: string ~> number
            ^^^^^ [1]: string
   18: class C extends React.Component<{p: ?number}> {
                                            ^^^^^^ [2]: number

Error: element_config.js:62
 62: ({}: React.ElementConfig<typeof D>); // Error: missing property `p`
      ^^ Cannot cast object literal to `ElementConfig` because property `p` is missing in object literal [1] but exists in object type [2].
  References:
   62: ({}: React.ElementConfig<typeof D>); // Error: missing property `p`
        ^^ [1]: object literal
   62: ({}: React.ElementConfig<typeof D>); // Error: missing property `p`
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: element_config.js:64
 64: ({p: 'foo'}: React.ElementConfig<typeof D>); // Error: string ~> number
          ^^^^^ Cannot cast object literal to `ElementConfig` because in property `p`, string [1] is incompatible with number [2].
  References:
   64: ({p: 'foo'}: React.ElementConfig<typeof D>); // Error: string ~> number
            ^^^^^ [1]: string
   22: class D extends React.Component<{p: ?number}> {
                                            ^^^^^^ [2]: number

Error: element_config.js:71
 71: ({p: 42}: React.ElementConfig<typeof F>); // Error: extra property `p`
      ^^^^^^^ Cannot cast object literal to `ElementConfig` because property `p` is missing in object type [1] but exists in object literal [2].
  References:
   71: ({p: 42}: React.ElementConfig<typeof F>); // Error: extra property `p`
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: object type
   71: ({p: 42}: React.ElementConfig<typeof F>); // Error: extra property `p`
        ^^^^^^^ [2]: object literal

Error: element_config.js:72
 72: ({p: 'foo'}: React.ElementConfig<typeof F>); // Error: extra property `p`
      ^^^^^^^^^^ Cannot cast object literal to `ElementConfig` because property `p` is missing in object type [1] but exists in object literal [2].
  References:
   72: ({p: 'foo'}: React.ElementConfig<typeof F>); // Error: extra property `p`
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: object type
   72: ({p: 'foo'}: React.ElementConfig<typeof F>); // Error: extra property `p`
        ^^^^^^^^^^ [2]: object literal

Error: element_config.js:76
 76: ({p: 'foo'}: React.ElementConfig<typeof G>); // Error: string ~> number
          ^^^^^ Cannot cast object literal to `ElementConfig` because in property `p`, string [1] is incompatible with number [2].
  References:
   76: ({p: 'foo'}: React.ElementConfig<typeof G>); // Error: string ~> number
            ^^^^^ [1]: string
   34: class G extends React.Component<{p: ?number}> {
                                            ^^^^^^ [2]: number

Error: element_config.js:80
 80: ({p: 'foo'}: React.ElementConfig<typeof H>); // Error: string ~> number
          ^^^^^ Cannot cast object literal to `ElementConfig` because in property `p`, string [1] is incompatible with number [2].
  References:
   80: ({p: 'foo'}: React.ElementConfig<typeof H>); // Error: string ~> number
            ^^^^^ [1]: string
   38: class H extends React.Component<{p?: ?number}> {
                                             ^^^^^^ [2]: number

Error: element_config.js:84
 84: ({p: 'foo'}: React.ElementConfig<typeof I>); // Error: string ~> number
          ^^^^^ Cannot cast object literal to `ElementConfig` because in property `p`, string [1] is incompatible with number [2].
  References:
   84: ({p: 'foo'}: React.ElementConfig<typeof I>); // Error: string ~> number
            ^^^^^ [1]: string
   42: class I extends React.Component<{p?: ?number}> {
                                             ^^^^^^ [2]: number

Error: element_config.js:88
 88: ({p: 'foo'}: React.ElementConfig<typeof J>); // Error: string ~> number
          ^^^^^ Cannot cast object literal to `ElementConfig` because in property `p`, string [1] is incompatible with number [2].
  References:
   88: ({p: 'foo'}: React.ElementConfig<typeof J>); // Error: string ~> number
            ^^^^^ [1]: string
   46: class J extends React.Component<{p?: ?number}> {
                                             ^^^^^^ [2]: number

Error: element_with_component_type.js:8
  8: (<Foo a={42}/>: React.Element<React.ComponentType<{b: number}>>); // Error
       ^^^ Cannot cast `<Foo />` to `Element` because in property `type` and then type argument `Props`, property `b` is missing in object type [1] but exists in object type [2].
  References:
    5: class Foo extends React.Component<{a: number}> {}
                                         ^^^^^^^^^^^ [1]: object type
    8: (<Foo a={42}/>: React.Element<React.ComponentType<{b: number}>>); // Error
                                                         ^^^^^^^^^^^ [2]: object type

Error: hoc.js:11
 11:       <Component />; // Error: `foo` is required.
            ^^^^^^^^^ Cannot create `Component` element because property `bar` is missing in props [1] but exists in object type [2].
  References:
   11:       <Component />; // Error: `foo` is required.
             ^^^^^^^^^^^^^ [1]: props
    6:   Component: React$ComponentType<{foo: number, bar: number}>,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: hoc.js:11
 11:       <Component />; // Error: `foo` is required.
            ^^^^^^^^^ Cannot create `Component` element because property `foo` is missing in props [1] but exists in object type [2].
  References:
   11:       <Component />; // Error: `foo` is required.
             ^^^^^^^^^^^^^ [1]: props
    6:   Component: React$ComponentType<{foo: number, bar: number}>,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: hoc.js:12
 12:       <Component foo={42} />; // Error: `bar` is required.
            ^^^^^^^^^ Cannot create `Component` element because property `bar` is missing in props [1] but exists in object type [2].
  References:
   12:       <Component foo={42} />; // Error: `bar` is required.
             ^^^^^^^^^^^^^^^^^^^^^^ [1]: props
    6:   Component: React$ComponentType<{foo: number, bar: number}>,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: hoc.js:35
 35: myHOC(class Empty extends React.Component<{foo: string}, void> {}); // Error
                                                     ^^^^^^ Cannot call `myHOC` with `class { ... }` bound to `Component` because in type argument `Props` and then property `foo`, string [1] is incompatible with number [2].
  References:
   35: myHOC(class Empty extends React.Component<{foo: string}, void> {}); // Error
                                                       ^^^^^^ [1]: string
    6:   Component: React$ComponentType<{foo: number, bar: number}>,
                                              ^^^^^^ [2]: number

Error: hoc.js:36
 36: myHOC(function Empty(props: {foo: string}) {}); // Error
                                       ^^^^^^ Cannot call `myHOC` with function bound to `Component` because in the first argument and then property `foo`, string [1] is incompatible with number [2].
  References:
   36: myHOC(function Empty(props: {foo: string}) {}); // Error
                                         ^^^^^^ [1]: string
    6:   Component: React$ComponentType<{foo: number, bar: number}>,
                                              ^^^^^^ [2]: number

Error: hoc.js:41
 41: <Wrapped />; // Error: `foo` is required.
      ^^^^^^^ Cannot create `Wrapped` element because property `foo` is missing in props [1] but exists in object type [2].
  References:
   41: <Wrapped />; // Error: `foo` is required.
       ^^^^^^^^^^^ [1]: props
    7: ): React$ComponentType<{foo: number}> {
                              ^^^^^^^^^^^^^ [2]: object type

Error: hoc.js:43
 43: <WrappedFun />; // Error: `foo` is required.
      ^^^^^^^^^^ Cannot create `WrappedFun` element because property `foo` is missing in props [1] but exists in object type [2].
  References:
   43: <WrappedFun />; // Error: `foo` is required.
       ^^^^^^^^^^^^^^ [1]: props
    7: ): React$ComponentType<{foo: number}> {
                              ^^^^^^^^^^^^^ [2]: object type

Error: hoc2.js:6
  6:   Component: React.ComponentType<{|...TProps, prop: number|}>,
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Property `a` is missing in object type [1] but exists in object type [2].
  References:
    6:   Component: React.ComponentType<{|...TProps, prop: number|}>,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: object type
                                           v-
   17: function MyFunctionComponent(props: {|
   18:   a: number,
   19:   b: number,
   20:   prop: number,
   21: |}) {}
       -^ [2]: object type

Error: hoc2.js:6
  6:   Component: React.ComponentType<{|...TProps, prop: number|}>,
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Property `b` is missing in object type [1] but exists in object type [2].
  References:
    6:   Component: React.ComponentType<{|...TProps, prop: number|}>,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: object type
                                           v-
   17: function MyFunctionComponent(props: {|
   18:   a: number,
   19:   b: number,
   20:   prop: number,
   21: |}) {}
       -^ [2]: object type

Error: hoc2.js:18
 18:   a: number,
          ^^^^^^ number [1] is incompatible with string [2].
  References:
   18:   a: number,
            ^^^^^^ [1]: number
   32: <MyEnhancedFunctionComponent a="foo" b={2} />; // Error: string ~> number
                                      ^^^^^ [2]: string

Error: hoc2.js:23
 23: const MyEnhancedComponent = connect(MyComponent);
                                         ^^^^^^^^^^^ In type argument `Props`, number [1] is incompatible with string [2].
  References:
   12:   a: number,
            ^^^^^^ [1]: number
   28: <MyEnhancedComponent a="foo" b={2} />; // Error: string ~> number
                              ^^^^^ [2]: string

Error: hoc2.js:23
 23: const MyEnhancedComponent = connect(MyComponent);
                                         ^^^^^^^^^^^ In type argument `Props`, property `a` is missing in object type [1] but exists in object type [2].
  References:
    6:   Component: React.ComponentType<{|...TProps, prop: number|}>,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: object type
                                                 v-
   11: class MyComponent extends React.Component<{|
   12:   a: number,
   13:   b: number,
   14:   prop: number,
   15: |}> {}
       -^ [2]: object type

Error: hoc2.js:23
 23: const MyEnhancedComponent = connect(MyComponent);
                                         ^^^^^^^^^^^ In type argument `Props`, property `b` is missing in object type [1] but exists in object type [2].
  References:
    6:   Component: React.ComponentType<{|...TProps, prop: number|}>,
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: object type
                                                 v-
   11: class MyComponent extends React.Component<{|
   12:   a: number,
   13:   b: number,
   14:   prop: number,
   15: |}> {}
       -^ [2]: object type

Error: hoc3.js:26
 26: <MyEnhancedComponent />; // Error: Needs `a` and `b`.
      ^^^^^^^^^^^^^^^^^^^ Cannot create `MyEnhancedComponent` element because property `a` is missing in props [1] but exists in object type [2].
  References:
   26: <MyEnhancedComponent />; // Error: Needs `a` and `b`.
       ^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
                                                 v
   11: class MyComponent extends React.Component<{
   12:   a: number,
   13:   b: number,
   14:   prop: number,
   15: }> {}
       ^ [2]: object type

Error: hoc3.js:26
 26: <MyEnhancedComponent />; // Error: Needs `a` and `b`.
      ^^^^^^^^^^^^^^^^^^^ Cannot create `MyEnhancedComponent` element because property `b` is missing in props [1] but exists in object type [2].
  References:
   26: <MyEnhancedComponent />; // Error: Needs `a` and `b`.
       ^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
                                                 v
   11: class MyComponent extends React.Component<{
   12:   a: number,
   13:   b: number,
   14:   prop: number,
   15: }> {}
       ^ [2]: object type

Error: hoc3.js:28
 28: <MyEnhancedComponent a="foo" b={2} />; // Error: string ~> number
                            ^^^^^ Cannot create `MyEnhancedComponent` element because in property `a`, string [1] is incompatible with number [2].
  References:
   28: <MyEnhancedComponent a="foo" b={2} />; // Error: string ~> number
                              ^^^^^ [1]: string
   12:   a: number,
            ^^^^^^ [2]: number

Error: hoc3.js:30
 30: <MyEnhancedFunctionComponent/>; // Error: Needs `a` and `b`.
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot create `MyEnhancedFunctionComponent` element because property `a` is missing in props [1] but exists in object type [2].
  References:
   30: <MyEnhancedFunctionComponent/>; // Error: Needs `a` and `b`.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
                                           v
   17: function MyFunctionComponent(props: {
   18:   a: number,
   19:   b: number,
   20:   prop: number,
   21: }) {}
       ^ [2]: object type

Error: hoc3.js:30
 30: <MyEnhancedFunctionComponent/>; // Error: Needs `a` and `b`.
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot create `MyEnhancedFunctionComponent` element because property `b` is missing in props [1] but exists in object type [2].
  References:
   30: <MyEnhancedFunctionComponent/>; // Error: Needs `a` and `b`.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
                                           v
   17: function MyFunctionComponent(props: {
   18:   a: number,
   19:   b: number,
   20:   prop: number,
   21: }) {}
       ^ [2]: object type

Error: hoc3.js:32
 32: <MyEnhancedFunctionComponent a="foo" b={2} />; // Error: string ~> number
                                    ^^^^^ Cannot create `MyEnhancedFunctionComponent` element because in property `a`, string [1] is incompatible with number [2].
  References:
   32: <MyEnhancedFunctionComponent a="foo" b={2} />; // Error: string ~> number
                                      ^^^^^ [1]: string
   18:   a: number,
            ^^^^^^ [2]: number

Error: hoc4.js:26
 26: <MyEnhancedComponent />; // Error: Needs `a` and `b`.
      ^^^^^^^^^^^^^^^^^^^ Cannot create `MyEnhancedComponent` element because property `a` is missing in props [1] but exists in object type [2].
  References:
   26: <MyEnhancedComponent />; // Error: Needs `a` and `b`.
       ^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
                                                 v
   11: class MyComponent extends React.Component<{
   12:   a: number,
   13:   b: number,
   14:   prop: number,
   15: }> {}
       ^ [2]: object type

Error: hoc4.js:26
 26: <MyEnhancedComponent />; // Error: Needs `a` and `b`.
      ^^^^^^^^^^^^^^^^^^^ Cannot create `MyEnhancedComponent` element because property `b` is missing in props [1] but exists in object type [2].
  References:
   26: <MyEnhancedComponent />; // Error: Needs `a` and `b`.
       ^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
                                                 v
   11: class MyComponent extends React.Component<{
   12:   a: number,
   13:   b: number,
   14:   prop: number,
   15: }> {}
       ^ [2]: object type

Error: hoc4.js:28
 28: <MyEnhancedComponent a="foo" b={2} />; // Error: string ~> number
                            ^^^^^ Cannot create `MyEnhancedComponent` element because in property `a`, string [1] is incompatible with number [2].
  References:
   28: <MyEnhancedComponent a="foo" b={2} />; // Error: string ~> number
                              ^^^^^ [1]: string
   12:   a: number,
            ^^^^^^ [2]: number

Error: hoc4.js:30
 30: <MyEnhancedFunctionComponent/>; // Error: Needs `a` and `b`.
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot create `MyEnhancedFunctionComponent` element because property `a` is missing in props [1] but exists in object type [2].
  References:
   30: <MyEnhancedFunctionComponent/>; // Error: Needs `a` and `b`.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
                                           v
   17: function MyFunctionComponent(props: {
   18:   a: number,
   19:   b: number,
   20:   prop: number,
   21: }) {}
       ^ [2]: object type

Error: hoc4.js:30
 30: <MyEnhancedFunctionComponent/>; // Error: Needs `a` and `b`.
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot create `MyEnhancedFunctionComponent` element because property `b` is missing in props [1] but exists in object type [2].
  References:
   30: <MyEnhancedFunctionComponent/>; // Error: Needs `a` and `b`.
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
                                           v
   17: function MyFunctionComponent(props: {
   18:   a: number,
   19:   b: number,
   20:   prop: number,
   21: }) {}
       ^ [2]: object type

Error: hoc4.js:32
 32: <MyEnhancedFunctionComponent a="foo" b={2} />; // Error: string ~> number
                                    ^^^^^ Cannot create `MyEnhancedFunctionComponent` element because in property `a`, string [1] is incompatible with number [2].
  References:
   32: <MyEnhancedFunctionComponent a="foo" b={2} />; // Error: string ~> number
                                      ^^^^^ [1]: string
   18:   a: number,
            ^^^^^^ [2]: number

Error: hoc5.js:21
 21: <MyComponent1 />; // Error
      ^^^^^^^^^^^^ Cannot create `MyComponent1` element because property `bar` is missing in props [1] but exists in object type [2].
  References:
   21: <MyComponent1 />; // Error
       ^^^^^^^^^^^^^^^^ [1]: props
   14: class MyComponent1 extends React.Component<{foo: string, bar: number}> {
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: hoc5.js:23
 23: <MyComponent1 bar="nope" />; // Error
                       ^^^^^^ Cannot create `MyComponent1` element because in property `bar`, string [1] is incompatible with number [2].
  References:
   23: <MyComponent1 bar="nope" />; // Error
                         ^^^^^^ [1]: string
   14: class MyComponent1 extends React.Component<{foo: string, bar: number}> {
                                                                     ^^^^^^ [2]: number

Error: hoc5.js:25
 25: <MyComponent1 bar={42} foo={100} />; // Error
                                 ^^^ Cannot create `MyComponent1` element because in property `foo`, number [1] is incompatible with string [2].
  References:
   25: <MyComponent1 bar={42} foo={100} />; // Error
                                   ^^^ [1]: number
   14: class MyComponent1 extends React.Component<{foo: string, bar: number}> {
                                                        ^^^^^^ [2]: string

Error: hoc5.js:28
 28: <MyComponent2 />; // Error
      ^^^^^^^^^^^^ Cannot create `MyComponent2` element because property `bar` is missing in props [1] but exists in object type [2].
  References:
   28: <MyComponent2 />; // Error
       ^^^^^^^^^^^^^^^^ [1]: props
   18: function MyComponent2(props: {foo: string, bar: number}) {}
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: hoc5.js:30
 30: <MyComponent2 bar="nope" />; // Error
                       ^^^^^^ Cannot create `MyComponent2` element because in property `bar`, string [1] is incompatible with number [2].
  References:
   30: <MyComponent2 bar="nope" />; // Error
                         ^^^^^^ [1]: string
   18: function MyComponent2(props: {foo: string, bar: number}) {}
                                                       ^^^^^^ [2]: number

Error: hoc5.js:32
 32: <MyComponent2 bar={42} foo={100} />; // Error
                                 ^^^ Cannot create `MyComponent2` element because in property `foo`, number [1] is incompatible with string [2].
  References:
   32: <MyComponent2 bar={42} foo={100} />; // Error
                                   ^^^ [1]: number
   18: function MyComponent2(props: {foo: string, bar: number}) {}
                                          ^^^^^^ [2]: string

Error: hoc5.js:38
 38: <MyEnhancedComponent1 />; // Error
      ^^^^^^^^^^^^^^^^^^^^ Cannot create `MyEnhancedComponent1` element because property `bar` is missing in props [1] but exists in object type [2].
  References:
   38: <MyEnhancedComponent1 />; // Error
       ^^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
   10: ): React.ComponentType<React.ElementConfig<Component>> {
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: hoc5.js:40
 40: <MyEnhancedComponent1 bar="nope" />; // Error
                               ^^^^^^ Cannot create `MyEnhancedComponent1` element because in property `bar`, string [1] is incompatible with number [2].
  References:
   40: <MyEnhancedComponent1 bar="nope" />; // Error
                                 ^^^^^^ [1]: string
   14: class MyComponent1 extends React.Component<{foo: string, bar: number}> {
                                                                     ^^^^^^ [2]: number

Error: hoc5.js:42
 42: <MyEnhancedComponent1 bar={42} foo={100} />; // Error
                                         ^^^ Cannot create `MyEnhancedComponent1` element because in property `foo`, number [1] is incompatible with string [2].
  References:
   42: <MyEnhancedComponent1 bar={42} foo={100} />; // Error
                                           ^^^ [1]: number
   14: class MyComponent1 extends React.Component<{foo: string, bar: number}> {
                                                        ^^^^^^ [2]: string

Error: hoc5.js:45
 45: <MyEnhancedComponent2 />; // Error
      ^^^^^^^^^^^^^^^^^^^^ Cannot create `MyEnhancedComponent2` element because property `bar` is missing in props [1] but exists in object type [2].
  References:
   45: <MyEnhancedComponent2 />; // Error
       ^^^^^^^^^^^^^^^^^^^^^^^^ [1]: props
   10: ): React.ComponentType<React.ElementConfig<Component>> {
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: hoc5.js:47
 47: <MyEnhancedComponent2 bar="nope" />; // Error
                               ^^^^^^ Cannot create `MyEnhancedComponent2` element because in property `bar`, string [1] is incompatible with number [2].
  References:
   47: <MyEnhancedComponent2 bar="nope" />; // Error
                                 ^^^^^^ [1]: string
   18: function MyComponent2(props: {foo: string, bar: number}) {}
                                                       ^^^^^^ [2]: number

Error: hoc5.js:49
 49: <MyEnhancedComponent2 bar={42} foo={100} />; // Error
                                         ^^^ Cannot create `MyEnhancedComponent2` element because in property `foo`, number [1] is incompatible with string [2].
  References:
   49: <MyEnhancedComponent2 bar={42} foo={100} />; // Error
                                           ^^^ [1]: number
   18: function MyComponent2(props: {foo: string, bar: number}) {}
                                          ^^^^^^ [2]: string

Error: import_react.js:7
  7: var b: number = new react.Component(); // Error: ReactComponent ~> number
                     ^^^^^^^^^^^^^^^^^^^^^ Cannot assign `new react.Component()` to `b` because `React.Component` [1] is incompatible with number [2].
  References:
    7: var b: number = new react.Component(); // Error: ReactComponent ~> number
                       ^^^^^^^^^^^^^^^^^^^^^ [1]: `React.Component`
    7: var b: number = new react.Component(); // Error: ReactComponent ~> number
              ^^^^^^ [2]: number

Error: intersection_component_error.js:12
 12: <MyComponent />;
      ^^^^^^^^^^^ Cannot create `MyComponent` element because property `foo` is missing in props [1] but exists in object type [2].
  References:
   12: <MyComponent />;
       ^^^^^^^^^^^^^^^ [1]: props
    8: declare var MyComponent: React.ComponentType<{foo: number}> & {
                                                    ^^^^^^^^^^^^^ [2]: object type

Error: jsx_spread.js:11
 11: var blah = <Foo {...props} />; // error bar, number given string expected
                 ^^^ Cannot create `Foo` element because in property `bar`, number [1] is incompatible with string [2].
  References:
   10: var props = {bar: 42};
                         ^^ [1]: number
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [2]: string. See lib: <BUILTINS>/react.js:296

Error: key.js:12
 12: <Foo key={true} />; // Error
               ^^^^ boolean. This type is incompatible with
 12: <Foo key={true} />; // Error
     ^^^^^^^^^^^^^^^^^^ union: string | number
  Member 1:
  168: declare type React$Key = string | number;
                                ^^^^^^ string. See lib: <BUILTINS>/react.js:168
  Error:
   12: <Foo key={true} />; // Error
                 ^^^^ boolean. This type is incompatible with
  168: declare type React$Key = string | number;
                                ^^^^^^ string. See lib: <BUILTINS>/react.js:168
  Member 2:
  168: declare type React$Key = string | number;
                                         ^^^^^^ number. See lib: <BUILTINS>/react.js:168
  Error:
   12: <Foo key={true} />; // Error
                 ^^^^ boolean. This type is incompatible with
  168: declare type React$Key = string | number;
                                         ^^^^^^ number. See lib: <BUILTINS>/react.js:168

Error: key.js:21
 21: <FooExact key={true} />; // Error
                    ^^^^ boolean. This type is incompatible with
 21: <FooExact key={true} />; // Error
     ^^^^^^^^^^^^^^^^^^^^^^^ union: string | number
  Member 1:
  168: declare type React$Key = string | number;
                                ^^^^^^ string. See lib: <BUILTINS>/react.js:168
  Error:
   21: <FooExact key={true} />; // Error
                      ^^^^ boolean. This type is incompatible with
  168: declare type React$Key = string | number;
                                ^^^^^^ string. See lib: <BUILTINS>/react.js:168
  Member 2:
  168: declare type React$Key = string | number;
                                         ^^^^^^ number. See lib: <BUILTINS>/react.js:168
  Error:
   21: <FooExact key={true} />; // Error
                      ^^^^ boolean. This type is incompatible with
  168: declare type React$Key = string | number;
                                         ^^^^^^ number. See lib: <BUILTINS>/react.js:168

Error: portals.js:12
 12:       document.getElementById('portal'),
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot call `ReactDOM.createPortal` with `document.getElementById(...)` bound to `container` because null [1] is incompatible with `Element` [2].
  References:
  623:   getElementById(elementId: string): HTMLElement | null;
                                                          ^^^^ [1]: null. See lib: <BUILTINS>/dom.js:623
   24:     container: Element,
                      ^^^^^^^ [2]: `Element`. See lib: <BUILTINS>/react-dom.js:24

Error: proptype_arrayOf.js:13
 13: var fail_missing = <Example />
                         ^^^^^^^ Cannot create `Example` element because property `arr` is missing in props [1] but exists in propTypes of React component [2].
  References:
   13: var fail_missing = <Example />
                          ^^^^^^^^^^^ [1]: props
                    v
    5:   propTypes: {
    6:     arr: React.PropTypes.arrayOf(React.PropTypes.number).isRequired,
    7:   },
         ^ [2]: propTypes of React component

Error: proptype_arrayOf.js:14
 14: var fail_not_array = <Example arr={2} />
                                        ^ Cannot create `Example` element because in property `arr`, number [1] is incompatible with array type [2].
  References:
   14: var fail_not_array = <Example arr={2} />
                                          ^ [1]: number
    6:     arr: React.PropTypes.arrayOf(React.PropTypes.number).isRequired,
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: array type

Error: proptype_arrayOf.js:15
 15: var fail_mistyped_elems = <Example arr={[1, "foo"]} />
                                                 ^^^^^ Cannot create `Example` element because in property `arr` and then type argument `T`, string [1] is incompatible with number [2].
  References:
   15: var fail_mistyped_elems = <Example arr={[1, "foo"]} />
                                                   ^^^^^ [1]: string
  294:   number: React$PropType$Primitive<number>;
                                          ^^^^^^ [2]: number. See lib: <BUILTINS>/react.js:294

Error: proptype_arrayOf.js:20
 20: var todo_required = <Example arr={[null]} />
                                        ^^^^ Cannot create `Example` element because in property `arr` and then type argument `T`, null [1] is incompatible with number [2].
  References:
   20: var todo_required = <Example arr={[null]} />
                                          ^^^^ [1]: null
  294:   number: React$PropType$Primitive<number>;
                                          ^^^^^^ [2]: number. See lib: <BUILTINS>/react.js:294

Error: proptype_arrayOf.js:30
 30: (<OptionalExample arr={[""]} />); // error: string ~> number
                             ^^ Cannot create `OptionalExample` element because in property `arr` and then type argument `T`, string [1] is incompatible with number [2].
  References:
   30: (<OptionalExample arr={[""]} />); // error: string ~> number
                               ^^ [1]: string
  294:   number: React$PropType$Primitive<number>;
                                          ^^^^^^ [2]: number. See lib: <BUILTINS>/react.js:294

Error: proptype_arrayOf.js:38
 38: (<AnyExample arr={0} />); // error: still needs to be an array
                       ^ Cannot create `AnyExample` element because in property `arr`, number [1] is incompatible with array type [2].
  References:
   38: (<AnyExample arr={0} />); // error: still needs to be an array
                         ^ [1]: number
   34:     arr: React.PropTypes.arrayOf((0:any)), // OK
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: array type

Error: proptype_arrayOf.js:43
 43:     arr: React.PropTypes.arrayOf(0), // error: number not a prop type
              ^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `arrayOf`. Expected a React PropType instead of
 43:     arr: React.PropTypes.arrayOf(0), // error: number not a prop type
                                      ^ number

Error: proptype_custom_validator.js:8
  8:       (propName: empty); // error: propName is a string
            ^^^^^^^^ Cannot cast `propName` to empty because string [1] is incompatible with empty [2].
  References:
  266:   propName: string,
                   ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:266
    8:       (propName: empty); // error: propName is a string
                        ^^^^^ [2]: empty

Error: proptype_custom_validator.js:9
  9:       (componentName: empty); // error: componentName is a string
            ^^^^^^^^^^^^^ Cannot cast `componentName` to empty because string [1] is incompatible with empty [2].
  References:
  267:   componentName: string,
                        ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:267
    9:       (componentName: empty); // error: componentName is a string
                             ^^^^^ [2]: empty

Error: proptype_custom_validator.js:10
 10:       (href: empty); // error: href is an optional string
            ^^^^ Cannot cast `href` to empty because string [1] is incompatible with empty [2].
  References:
  268:   href?: string) => ?Error;
                ^^^^^^ [1]: string. See lib: <BUILTINS>/react.js:268
   10:       (href: empty); // error: href is an optional string
                    ^^^^^ [2]: empty

Error: proptype_custom_validator.js:10
 10:       (href: empty); // error: href is an optional string
            ^^^^ Cannot cast `href` to empty because undefined [1] is incompatible with empty [2].
  References:
  268:   href?: string) => ?Error;
                ^^^^^^ [1]: undefined. See lib: <BUILTINS>/react.js:268
   10:       (href: empty); // error: href is an optional string
                    ^^^^^ [2]: empty

Error: proptype_custom_validator.js:11
 11:       return (0: mixed); // error: should return ?Error
                      ^^^^^ Cannot return `0` because mixed [1] is incompatible with `Error` [2].
  References:
   11:       return (0: mixed); // error: should return ?Error
                        ^^^^^ [1]: mixed
  268:   href?: string) => ?Error;
                            ^^^^^ [2]: `Error`. See lib: <BUILTINS>/react.js:268

Error: proptype_func.js:14
 14: var fail_mistyped = <Example func={2} />
                                        ^ Cannot create `Example` element because in property `func`, number [1] is incompatible with function type [2].
  References:
   14: var fail_mistyped = <Example func={2} />
                                          ^ [1]: number
  293:   func: React$PropType$Primitive<Function>;
                                        ^^^^^^^^ [2]: function type. See lib: <BUILTINS>/react.js:293

Error: proptype_incompatible.js:3
                   v------------------
  3: var Example = React.createClass({
  4:   propTypes: {
  5:     foo: 0, // error: `0` is not a prop type
  6:   },
  7: });
     -^ call of method `createClass`. Expected a React PropType instead of
  5:     foo: 0, // error: `0` is not a prop type
              ^ number

Error: proptype_instanceOf.js:14
 14: (<Example x={new A} />); // error: A ~> B
                  ^^^^^ Cannot create `Example` element because in property `x`, `A` [1] is incompatible with `B` [2].
  References:
   14: (<Example x={new A} />); // error: A ~> B
                    ^^^^^ [1]: `A`
   10:     x: React.PropTypes.instanceOf(B),
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: `B`

Error: proptype_instanceOf.js:17
 17: (<Example x="wrong" />); // error: string ~> B
                 ^^^^^^^ Cannot create `Example` element because in property `x`, string [1] is incompatible with `B` [2].
  References:
   17: (<Example x="wrong" />); // error: string ~> B
                   ^^^^^^^ [1]: string
   10:     x: React.PropTypes.instanceOf(B),
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: `B`

Error: proptype_object.js:13
 13: var fail_mistyped = <Example object={2} />
                                          ^ Cannot create `Example` element because in property `object`, number [1] is incompatible with object type [2].
  References:
   13: var fail_mistyped = <Example object={2} />
                                            ^ [1]: number
  295:   object: React$PropType$Primitive<Object>;
                                          ^^^^^^ [2]: object type. See lib: <BUILTINS>/react.js:295

Error: proptype_objectOf.js:13
 13: var fail_missing = <Example />
                         ^^^^^^^ Cannot create `Example` element because property `obj` is missing in props [1] but exists in propTypes of React component [2].
  References:
   13: var fail_missing = <Example />
                          ^^^^^^^^^^^ [1]: props
                    v
    5:   propTypes: {
    6:     obj: React.PropTypes.objectOf(React.PropTypes.number).isRequired
    7:   },
         ^ [2]: propTypes of React component

Error: proptype_objectOf.js:14
 14: var fail_not_object = <Example obj={2} />
                                         ^ Cannot create `Example` element because in property `obj`, number [1] is incompatible with object type [2].
  References:
   14: var fail_not_object = <Example obj={2} />
                                           ^ [1]: number
    6:     obj: React.PropTypes.objectOf(React.PropTypes.number).isRequired
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: proptype_objectOf.js:15
 15: var fail_mistyped_props = <Example obj={{foo: "foo"}} />
                                                   ^^^^^ Cannot create `Example` element because in property `obj.foo`, string [1] is incompatible with number [2].
  References:
   15: var fail_mistyped_props = <Example obj={{foo: "foo"}} />
                                                     ^^^^^ [1]: string
  294:   number: React$PropType$Primitive<number>;
                                          ^^^^^^ [2]: number. See lib: <BUILTINS>/react.js:294

Error: proptype_objectOf.js:20
 20: var todo_required = <Example obj={{p:null}} />
                                          ^^^^ Cannot create `Example` element because in property `obj.p`, null [1] is incompatible with number [2].
  References:
   20: var todo_required = <Example obj={{p:null}} />
                                            ^^^^ [1]: null
  294:   number: React$PropType$Primitive<number>;
                                          ^^^^^^ [2]: number. See lib: <BUILTINS>/react.js:294

Error: proptype_objectOf.js:30
 30: (<OptionalExample obj={{p:""}} />); // error: string ~> number
                               ^^ Cannot create `OptionalExample` element because in property `obj.p`, string [1] is incompatible with number [2].
  References:
   30: (<OptionalExample obj={{p:""}} />); // error: string ~> number
                                 ^^ [1]: string
  294:   number: React$PropType$Primitive<number>;
                                          ^^^^^^ [2]: number. See lib: <BUILTINS>/react.js:294

Error: proptype_objectOf.js:38
 38: (<AnyExample obj={0} />); // error: still needs to be an object
                       ^ Cannot create `AnyExample` element because in property `obj`, number [1] is incompatible with object type [2].
  References:
   38: (<AnyExample obj={0} />); // error: still needs to be an object
                         ^ [1]: number
   34:     obj: React.PropTypes.objectOf((0:any)), // OK
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: object type

Error: proptype_objectOf.js:43
 43:     obj: React.PropTypes.objectOf(0), // error: number not a prop type
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `objectOf`. Expected a React PropType instead of
 43:     obj: React.PropTypes.objectOf(0), // error: number not a prop type
                                       ^ number

Error: proptype_oneOf.js:14
 14: (<Example str="baz" />); // error: 'baz' not in enum
                   ^^^^^ Cannot create `Example` element because in property `str`, string [1] is incompatible with string enum [2].
  References:
   14: (<Example str="baz" />); // error: 'baz' not in enum
                     ^^^^^ [1]: string
    6:     str: React.PropTypes.oneOf(["foo", "bar"]),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: string enum

Error: proptype_oneOf.js:17
 17: (<Example num={3} />); // error: 3 not in enum
                    ^ Cannot create `Example` element because in property `num`, number [1] is incompatible with number enum [2].
  References:
   17: (<Example num={3} />); // error: 3 not in enum
                      ^ [1]: number
    7:     num: React.PropTypes.oneOf([0, 1, 2]),
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: number enum

Error: proptype_oneOf.js:20
 20: (<Example bool={false} />); // error: false ~> true
                     ^^^^^ Cannot create `Example` element because in property `bool`, boolean [1] is incompatible with boolean literal `true` [2].
  References:
   20: (<Example bool={false} />); // error: false ~> true
                       ^^^^^ [1]: boolean
    8:     bool: React.PropTypes.oneOf([true]),
                                        ^^^^ [2]: boolean literal `true`

Error: proptype_oneOf.js:24
 24: (<Example mixed={"baz"} />); // error: 'baz' not in enum
      ^^^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
                  v
  5:   propTypes: {
  6:     str: React.PropTypes.oneOf(["foo", "bar"]),
  7:     num: React.PropTypes.oneOf([0, 1, 2]),
...:
 10:   },
       ^ propTypes of React component
  Property `mixed` is incompatible:
     24: (<Example mixed={"baz"} />); // error: 'baz' not in enum
                          ^^^^^ string. This type is incompatible with
      9:     mixed: React.PropTypes.oneOf(["foo", 0, true]),
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: string literal `foo` | number literal `0` | boolean literal `true`
      Member 1:
        9:     mixed: React.PropTypes.oneOf(["foo", 0, true]),
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string literal `foo`
      Error:
       24: (<Example mixed={"baz"} />); // error: 'baz' not in enum
                            ^^^^^ string. Expected string literal `foo`, got `baz` instead
        9:     mixed: React.PropTypes.oneOf(["foo", 0, true]),
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string literal `foo`
      Member 2:
        9:     mixed: React.PropTypes.oneOf(["foo", 0, true]),
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number literal `0`
      Error:
       24: (<Example mixed={"baz"} />); // error: 'baz' not in enum
                            ^^^^^ string. This type is incompatible with
        9:     mixed: React.PropTypes.oneOf(["foo", 0, true]),
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number literal `0`
      Member 3:
        9:     mixed: React.PropTypes.oneOf(["foo", 0, true]),
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ boolean literal `true`
      Error:
       24: (<Example mixed={"baz"} />); // error: 'baz' not in enum
                            ^^^^^ string. This type is incompatible with
        9:     mixed: React.PropTypes.oneOf(["foo", 0, true]),
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ boolean literal `true`

Error: proptype_oneOf.js:32
 32: (<RequiredExample />); // error: `p` not found
       ^^^^^^^^^^^^^^^ Cannot create `RequiredExample` element because property `p` is missing in props [1] but exists in propTypes of React component [2].
  References:
   32: (<RequiredExample />); // error: `p` not found
        ^^^^^^^^^^^^^^^^^^^ [1]: props
                    v
   27:   propTypes: {
   28:     p: React.PropTypes.oneOf([]).isRequired,
   29:   },
         ^ [2]: propTypes of React component

Error: proptype_oneOf.js:40
 40: (<EmptyExample nil={0} />); // number ~> empty
                         ^ Cannot create `EmptyExample` element because in property `nil`, number [1] is incompatible with empty [2].
  References:
   40: (<EmptyExample nil={0} />); // number ~> empty
                           ^ [1]: number
   36:     nil: React.PropTypes.oneOf([]), // i.e., `empty`
                ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: empty

Error: proptype_oneOf.js:76
 76:     p: React.PropTypes.oneOf(0), // error: expected array, got 0
            ^^^^^^^^^^^^^^^^^^^^^^^^ call of method `oneOf`. Expected an array instead of
 76:     p: React.PropTypes.oneOf(0), // error: expected array, got 0
                                  ^ number

Error: proptype_oneOfType.js:23
 23: var fail_missing = <Example />;
                         ^^^^^^^ Cannot create `Example` element because property `prop` is missing in props [1] but exists in propTypes of React component [2].
  References:
   23: var fail_missing = <Example />;
                          ^^^^^^^^^^^ [1]: props
                    v
    5:   propTypes: {
    6:     prop: React.PropTypes.oneOfType([
    7:       React.PropTypes.string,
  ...:
   10:   },
         ^ [2]: propTypes of React component

Error: proptype_oneOfType.js:24
 24: var fail_bool = <Example prop={true} />;
                     ^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
                  v
  5:   propTypes: {
  6:     prop: React.PropTypes.oneOfType([
  7:       React.PropTypes.string,
...:
 10:   },
       ^ propTypes of React component
  Property `prop` is incompatible:
     24: var fail_bool = <Example prop={true} />;
                                        ^^^^ boolean. This type is incompatible with
                   v--------------------------
      6:     prop: React.PropTypes.oneOfType([
      7:       React.PropTypes.string,
      8:       React.PropTypes.number
      9:     ]).isRequired
             ------------^ union: string | number
      Member 1:
                     v--------------------------
        6:     prop: React.PropTypes.oneOfType([
        7:       React.PropTypes.string,
        8:       React.PropTypes.number
        9:     ]).isRequired
               ------------^ string
      Error:
       24: var fail_bool = <Example prop={true} />;
                                          ^^^^ boolean. This type is incompatible with
                     v--------------------------
        6:     prop: React.PropTypes.oneOfType([
        7:       React.PropTypes.string,
        8:       React.PropTypes.number
        9:     ]).isRequired
               ------------^ string
      Member 2:
                     v--------------------------
        6:     prop: React.PropTypes.oneOfType([
        7:       React.PropTypes.string,
        8:       React.PropTypes.number
        9:     ]).isRequired
               ------------^ number
      Error:
       24: var fail_bool = <Example prop={true} />;
                                          ^^^^ boolean. This type is incompatible with
                     v--------------------------
        6:     prop: React.PropTypes.oneOfType([
        7:       React.PropTypes.string,
        8:       React.PropTypes.number
        9:     ]).isRequired
               ------------^ number

Error: proptype_oneOfType.js:29
 29: var todo_required = <Example prop={null} />;
                         ^^^^^^^^^^^^^^^^^^^^^^^ props. This type is incompatible with
                  v
  5:   propTypes: {
  6:     prop: React.PropTypes.oneOfType([
  7:       React.PropTypes.string,
...:
 10:   },
       ^ propTypes of React component
  Property `prop` is incompatible:
     29: var todo_required = <Example prop={null} />;
                                            ^^^^ null. This type is incompatible with
                   v--------------------------
      6:     prop: React.PropTypes.oneOfType([
      7:       React.PropTypes.string,
      8:       React.PropTypes.number
      9:     ]).isRequired
             ------------^ union: string | number
      Member 1:
                     v--------------------------
        6:     prop: React.PropTypes.oneOfType([
        7:       React.PropTypes.string,
        8:       React.PropTypes.number
        9:     ]).isRequired
               ------------^ string
      Error:
       29: var todo_required = <Example prop={null} />;
                                              ^^^^ null. This type is incompatible with
                     v--------------------------
        6:     prop: React.PropTypes.oneOfType([
        7:       React.PropTypes.string,
        8:       React.PropTypes.number
        9:     ]).isRequired
               ------------^ string
      Member 2:
                     v--------------------------
        6:     prop: React.PropTypes.oneOfType([
        7:       React.PropTypes.string,
        8:       React.PropTypes.number
        9:     ]).isRequired
               ------------^ number
      Error:
       29: var todo_required = <Example prop={null} />;
                                              ^^^^ null. This type is incompatible with
                     v--------------------------
        6:     prop: React.PropTypes.oneOfType([
        7:       React.PropTypes.string,
        8:       React.PropTypes.number
        9:     ]).isRequired
               ------------^ number

Error: proptype_oneOfType.js:41
 41: (<OptionalExample p={0} />); // error: number ~> string
                          ^ Cannot create `OptionalExample` element because in property `p`, number [1] is incompatible with string [2].
  References:
   41: (<OptionalExample p={0} />); // error: number ~> string
                            ^ [1]: number
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [2]: string. See lib: <BUILTINS>/react.js:296

Error: proptype_oneOfType.js:49
 49: (<EmptyExample nil={0} />); // number ~> empty
                         ^ Cannot create `EmptyExample` element because in property `nil`, number [1] is incompatible with empty [2].
  References:
   49: (<EmptyExample nil={0} />); // number ~> empty
                           ^ [1]: number
   45:     nil: React.PropTypes.oneOfType([]), // i.e., `empty`
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: empty

Error: proptype_oneOfType.js:91
 91:     p: React.PropTypes.oneOfType(0), // error: expected array, got 0
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `oneOfType`. Expected an array instead of
 91:     p: React.PropTypes.oneOfType(0), // error: expected array, got 0
                                      ^ number

Error: proptype_oneOfType.js:99
 99:     p: React.PropTypes.oneOfType([{}]), // error: expected prop type, got {}
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `oneOfType`. Expected a React PropType instead of
 99:     p: React.PropTypes.oneOfType([{}]), // error: expected prop type, got {}
                                       ^^ object literal

Error: proptype_shape.js:20
 20:     (this.props.foo.baz: string);
                         ^^^ Cannot get `this.props.foo.baz` because property `baz` is missing in object type [1].
  References:
                v----------------------
   14:     foo: React.PropTypes.shape({
   15:       bar: React.PropTypes.string.isRequired,
   16:     }).isRequired,
           -^ [1]: object type

Error: proptype_shape.js:24
 24:     this.props.foo.baz = 0;
                        ^^^ Cannot assign `0` to `this.props.foo.baz` because property `baz` is missing in object type [1].
  References:
                v----------------------
   14:     foo: React.PropTypes.shape({
   15:       bar: React.PropTypes.string.isRequired,
   16:     }).isRequired,
           -^ [1]: object type

Error: proptypes_builtins.js:7
  7: (React.PropTypes.arrayOf : NoFun);
      ^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `React.PropTypes.arrayOf` to `NoFun` because in the first argument, `ReactPropsCheckType` [1] is incompatible with mixed [2].
  References:
  276:   (typeChecker: ReactPropsCheckType) => ReactPropsChainableTypeChecker;
                       ^^^^^^^^^^^^^^^^^^^ [1]: `ReactPropsCheckType`. See lib: <BUILTINS>/react.js:276
    3: type NoFun = mixed => empty;
                    ^^^^^ [2]: mixed

Error: proptypes_builtins.js:7
  7: (React.PropTypes.arrayOf : NoFun);
      ^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `React.PropTypes.arrayOf` to `NoFun` because in the return value, `ReactPropsChainableTypeChecker` [1] is incompatible with empty [2].
  References:
  276:   (typeChecker: ReactPropsCheckType) => ReactPropsChainableTypeChecker;
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: `ReactPropsChainableTypeChecker`. See lib: <BUILTINS>/react.js:276
    3: type NoFun = mixed => empty;
                             ^^^^^ [2]: empty

Error: proptypes_builtins.js:11
 11: (React.PropTypes.instanceOf : NoFun);
      ^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `React.PropTypes.instanceOf` to `NoFun` because in the return value, `ReactPropsChainableTypeChecker` [1] is incompatible with empty [2].
  References:
  278:   (expectedClass: any) => ReactPropsChainableTypeChecker;
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: `ReactPropsChainableTypeChecker`. See lib: <BUILTINS>/react.js:278
    3: type NoFun = mixed => empty;
                             ^^^^^ [2]: empty

Error: proptypes_builtins.js:15
 15: (React.PropTypes.objectOf : NoFun);
      ^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `React.PropTypes.objectOf` to `NoFun` because in the first argument, `ReactPropsCheckType` [1] is incompatible with mixed [2].
  References:
  280:   (typeChecker: ReactPropsCheckType) => ReactPropsChainableTypeChecker;
                       ^^^^^^^^^^^^^^^^^^^ [1]: `ReactPropsCheckType`. See lib: <BUILTINS>/react.js:280
    3: type NoFun = mixed => empty;
                    ^^^^^ [2]: mixed

Error: proptypes_builtins.js:15
 15: (React.PropTypes.objectOf : NoFun);
      ^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `React.PropTypes.objectOf` to `NoFun` because in the return value, `ReactPropsChainableTypeChecker` [1] is incompatible with empty [2].
  References:
  280:   (typeChecker: ReactPropsCheckType) => ReactPropsChainableTypeChecker;
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: `ReactPropsChainableTypeChecker`. See lib: <BUILTINS>/react.js:280
    3: type NoFun = mixed => empty;
                             ^^^^^ [2]: empty

Error: proptypes_builtins.js:19
 19: (React.PropTypes.oneOf : NoFun);
      ^^^^^^^^^^^^^^^^^^^^^ Cannot cast `React.PropTypes.oneOf` to `NoFun` because in the first argument, array type [1] is incompatible with mixed [2].
  References:
  282:   (expectedValues: Array<any>) => ReactPropsChainableTypeChecker;
                          ^^^^^^^^^^ [1]: array type. See lib: <BUILTINS>/react.js:282
    3: type NoFun = mixed => empty;
                    ^^^^^ [2]: mixed

Error: proptypes_builtins.js:19
 19: (React.PropTypes.oneOf : NoFun);
      ^^^^^^^^^^^^^^^^^^^^^ Cannot cast `React.PropTypes.oneOf` to `NoFun` because in the return value, `ReactPropsChainableTypeChecker` [1] is incompatible with empty [2].
  References:
  282:   (expectedValues: Array<any>) => ReactPropsChainableTypeChecker;
                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: `ReactPropsChainableTypeChecker`. See lib: <BUILTINS>/react.js:282
    3: type NoFun = mixed => empty;
                             ^^^^^ [2]: empty

Error: proptypes_builtins.js:23
 23: (React.PropTypes.oneOfType : NoFun);
      ^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `React.PropTypes.oneOfType` to `NoFun` because in the first argument, array type [1] is incompatible with mixed [2].
  References:
  284:   (arrayOfTypeCheckers: Array<ReactPropsCheckType>) =>
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: array type. See lib: <BUILTINS>/react.js:284
    3: type NoFun = mixed => empty;
                    ^^^^^ [2]: mixed

Error: proptypes_builtins.js:23
 23: (React.PropTypes.oneOfType : NoFun);
      ^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `React.PropTypes.oneOfType` to `NoFun` because in the return value, `ReactPropsChainableTypeChecker` [1] is incompatible with empty [2].
  References:
  285:     ReactPropsChainableTypeChecker;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: `ReactPropsChainableTypeChecker`. See lib: <BUILTINS>/react.js:285
    3: type NoFun = mixed => empty;
                             ^^^^^ [2]: empty

Error: proptypes_builtins.js:27
 27: (React.PropTypes.shape : NoFun);
      ^^^^^^^^^^^^^^^^^^^^^ Cannot cast `React.PropTypes.shape` to `NoFun` because in the first argument, object type [1] is incompatible with mixed [2].
  References:
  287:   (shapeTypes: { [key: string]: ReactPropsCheckType }) =>
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: object type. See lib: <BUILTINS>/react.js:287
    3: type NoFun = mixed => empty;
                    ^^^^^ [2]: mixed

Error: proptypes_builtins.js:27
 27: (React.PropTypes.shape : NoFun);
      ^^^^^^^^^^^^^^^^^^^^^ Cannot cast `React.PropTypes.shape` to `NoFun` because in the return value, `ReactPropsChainableTypeChecker` [1] is incompatible with empty [2].
  References:
  288:     ReactPropsChainableTypeChecker;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: `ReactPropsChainableTypeChecker`. See lib: <BUILTINS>/react.js:288
    3: type NoFun = mixed => empty;
                             ^^^^^ [2]: empty

Error: proptypes_sealed.js:18
 18:     (this.props.baz: string);
                     ^^^ Cannot get `this.props.baz` because property `baz` is missing in propTypes of React component [1].
  References:
                    v
   13:   propTypes: {
   14:     foo: React.PropTypes.string.isRequired,
   15:   },
         ^ [1]: propTypes of React component

Error: proptypes_sealed.js:22
 22:     this.props.baz = 0;
                    ^^^ Cannot assign `0` to `this.props.baz` because property `baz` is missing in propTypes of React component [1].
  References:
                    v
   13:   propTypes: {
   14:     foo: React.PropTypes.string.isRequired,
   15:   },
         ^ [1]: propTypes of React component

Error: ref.js:12
 12: <Foo ref={(foo: number) => {}} />; // Error: `Foo` is not a `number`.
                     ^^^^^^ number [1] is incompatible with `Foo` [2].
  References:
   12: <Foo ref={(foo: number) => {}} />; // Error: `Foo` is not a `number`.
                       ^^^^^^ [1]: number
    5: class Foo extends React.Component<{}, void> {}
             ^^^ [2]: `Foo`

Error: ref.js:13
 13: <Foo ref={foo => (foo: Foo)} />; // Error: `Foo` may be null.
                       ^^^ Cannot cast `foo` to `Foo` because null [1] is incompatible with `Foo` [2].
  References:
  174:   | ((React$ElementRef<ElementType> | null) => mixed)
                                             ^^^^ [1]: null. See lib: <BUILTINS>/react.js:174
   13: <Foo ref={foo => (foo: Foo)} />; // Error: `Foo` may be null.
                              ^^^ [2]: `Foo`

Error: ref.js:15
 15: <Foo ref={foo => (foo: Bar | null)} />; // Error: `Foo` is not `Bar`.
                       ^^^ Cannot cast `foo` to union type because `Foo` [1] is incompatible with `Bar` [2].
  References:
    5: class Foo extends React.Component<{}, void> {}
             ^^^ [1]: `Foo`
   15: <Foo ref={foo => (foo: Bar | null)} />; // Error: `Foo` is not `Bar`.
                              ^^^ [2]: `Bar`

Error: ref.js:23
 23: <FooExact ref={(foo: number) => {}} />; // Error: `FooExact` is not a `number`.
                          ^^^^^^ number [1] is incompatible with `FooExact` [2].
  References:
   23: <FooExact ref={(foo: number) => {}} />; // Error: `FooExact` is not a `number`.
                            ^^^^^^ [1]: number
   17: class FooExact extends React.Component<{||}, void> {}
             ^^^^^^^^ [2]: `FooExact`

Error: ref.js:24
 24: <FooExact ref={foo => (foo: FooExact)} />; // Error: `FooExact` may be null.
                            ^^^ Cannot cast `foo` to `FooExact` because null [1] is incompatible with `FooExact` [2].
  References:
  174:   | ((React$ElementRef<ElementType> | null) => mixed)
                                             ^^^^ [1]: null. See lib: <BUILTINS>/react.js:174
   24: <FooExact ref={foo => (foo: FooExact)} />; // Error: `FooExact` may be null.
                                   ^^^^^^^^ [2]: `FooExact`

Error: ref.js:26
 26: <FooExact ref={foo => (foo: Bar | null)} />; // Error: `FooExact` is not `Bar`.
                            ^^^ Cannot cast `foo` to union type because `FooExact` [1] is incompatible with `Bar` [2].
  References:
   17: class FooExact extends React.Component<{||}, void> {}
             ^^^^^^^^ [1]: `FooExact`
   26: <FooExact ref={foo => (foo: Bar | null)} />; // Error: `FooExact` is not `Bar`.
                                   ^^^ [2]: `Bar`

Error: render_callback.js:13
 13: ReactDOM.render(<Example/>, document.querySelector('#site'), () => {
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot call `ReactDOM.render` with `document.querySelector(...)` bound to `container` because null [1] is incompatible with `Element` [2].
  References:
  788:   querySelector(selector: string): HTMLElement | null;
                                                        ^^^^ [1]: null. See lib: <BUILTINS>/dom.js:788
   18:     container: Element,
                      ^^^^^^^ [2]: `Element`. See lib: <BUILTINS>/react-dom.js:18

Error: render_callback.js:17
 17: ReactDOM.render(<Example/>, document.querySelector('#site'), function() {
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot call `ReactDOM.render` with `document.querySelector(...)` bound to `container` because null [1] is incompatible with `Element` [2].
  References:
  788:   querySelector(selector: string): HTMLElement | null;
                                                        ^^^^ [1]: null. See lib: <BUILTINS>/dom.js:788
   18:     container: Element,
                      ^^^^^^^ [2]: `Element`. See lib: <BUILTINS>/react-dom.js:18

Error: render_callback.js:22
 22: ReactDOM.render(<Example/>, document.querySelector('#site'), 1);
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot call `ReactDOM.render` with `document.querySelector(...)` bound to `container` because null [1] is incompatible with `Element` [2].
  References:
  788:   querySelector(selector: string): HTMLElement | null;
                                                        ^^^^ [1]: null. See lib: <BUILTINS>/dom.js:788
   18:     container: Element,
                      ^^^^^^^ [2]: `Element`. See lib: <BUILTINS>/react-dom.js:18

Error: render_callback.js:22
 22: ReactDOM.render(<Example/>, document.querySelector('#site'), 1);
                                                                  ^ Cannot call `ReactDOM.render` with `1` bound to `callback` because number [1] is incompatible with function type [2].
  References:
   22: ReactDOM.render(<Example/>, document.querySelector('#site'), 1);
                                                                    ^ [1]: number
   19:     callback?: () => void,
                      ^^^^^^^^^^ [2]: function type. See lib: <BUILTINS>/react-dom.js:19

Error: render_callback.js:23
 23: ReactDOM.render(<Example/>, document.querySelector('#site'), {});
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot call `ReactDOM.render` with `document.querySelector(...)` bound to `container` because null [1] is incompatible with `Element` [2].
  References:
  788:   querySelector(selector: string): HTMLElement | null;
                                                        ^^^^ [1]: null. See lib: <BUILTINS>/dom.js:788
   18:     container: Element,
                      ^^^^^^^ [2]: `Element`. See lib: <BUILTINS>/react-dom.js:18

Error: render_callback.js:23
 23: ReactDOM.render(<Example/>, document.querySelector('#site'), {});
                                                                  ^^ Cannot call `ReactDOM.render` with object literal bound to `callback` because a callable signature is missing in object literal [1] but exists in function type [2].
  References:
   23: ReactDOM.render(<Example/>, document.querySelector('#site'), {});
                                                                    ^^ [1]: object literal
   19:     callback?: () => void,
                      ^^^^^^^^^^ [2]: function type. See lib: <BUILTINS>/react-dom.js:19

Error: render_callback.js:24
 24: ReactDOM.render(<Example/>, document.querySelector('#site'), '');
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot call `ReactDOM.render` with `document.querySelector(...)` bound to `container` because null [1] is incompatible with `Element` [2].
  References:
  788:   querySelector(selector: string): HTMLElement | null;
                                                        ^^^^ [1]: null. See lib: <BUILTINS>/dom.js:788
   18:     container: Element,
                      ^^^^^^^ [2]: `Element`. See lib: <BUILTINS>/react-dom.js:18

Error: render_callback.js:24
 24: ReactDOM.render(<Example/>, document.querySelector('#site'), '');
                                                                  ^^ Cannot call `ReactDOM.render` with empty string bound to `callback` because string [1] is incompatible with function type [2].
  References:
   24: ReactDOM.render(<Example/>, document.querySelector('#site'), '');
                                                                    ^^ [1]: string
   19:     callback?: () => void,
                      ^^^^^^^^^^ [2]: function type. See lib: <BUILTINS>/react-dom.js:19

Error: render_callback.js:25
 25: ReactDOM.render(<Example/>, document.querySelector('#site'), null);
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot call `ReactDOM.render` with `document.querySelector(...)` bound to `container` because null [1] is incompatible with `Element` [2].
  References:
  788:   querySelector(selector: string): HTMLElement | null;
                                                        ^^^^ [1]: null. See lib: <BUILTINS>/dom.js:788
   18:     container: Element,
                      ^^^^^^^ [2]: `Element`. See lib: <BUILTINS>/react-dom.js:18

Error: render_callback.js:25
 25: ReactDOM.render(<Example/>, document.querySelector('#site'), null);
                                                                  ^^^^ Cannot call `ReactDOM.render` with `null` bound to `callback` because null [1] is incompatible with function type [2].
  References:
   25: ReactDOM.render(<Example/>, document.querySelector('#site'), null);
                                                                    ^^^^ [1]: null
   19:     callback?: () => void,
                      ^^^^^^^^^^ [2]: function type. See lib: <BUILTINS>/react-dom.js:19

Error: test-utils.js:34
 34:   child => child.tagName === 'BUTTON',
                      ^^^^^^^ Cannot get `child.tagName` because property `tagName` is missing in `React.Component` [1].
  References:
   79:     test: (child: React$Component<any, any>) => boolean,
                         ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: `React.Component`. See lib: <BUILTINS>/react-dom.js:79

Error: undefined_prop.js:7
  7: <MyComponent title={undefined} />;
                         ^^^^^^^^^ Cannot create `MyComponent` element because in property `title`, undefined [1] is incompatible with string [2].
  References:
   13: declare var undefined: void;
                              ^^^^ [1]: undefined. See lib: <BUILTINS>/core.js:13
    5: class MyComponent extends React.Component<{title: string}> {}
                                                         ^^^^^^ [2]: string


Found 188 errors
