Error: identity.js:19
      v
 19: ({
 20:   a: 'asd', // Error: string ~> number
 21:   b: 'asd', // Error: string ~> number
 22: }: Foo);
     ^ object literal. This type is incompatible with
 22: }: Foo);
        ^^^ object type
  Property `a` is incompatible:
     20:   a: 'asd', // Error: string ~> number
              ^^^^^ string. This type is incompatible with
                    v-------
      5: type Foo = $ObjMap<
      6:   {
      7:     a: number,
    ...:
     11: >;
         ^ number

Error: identity.js:19
      v
 19: ({
 20:   a: 'asd', // Error: string ~> number
 21:   b: 'asd', // Error: string ~> number
 22: }: Foo);
     ^ object literal. This type is incompatible with
 22: }: Foo);
        ^^^ object type
  Property `b` is incompatible:
     21:   b: 'asd', // Error: string ~> number
              ^^^^^ string. This type is incompatible with
                    v-------
      5: type Foo = $ObjMap<
      6:   {
      7:     a: number,
    ...:
     11: >;
         ^ number

Error: identity.js:24
            v
 24: ((any: {
 25:   a: string, // Error: string ~> number
 26:   b: string, // Error: string ~> number
 27: }): Foo);
     ^ object type. This type is incompatible with
 27: }): Foo);
         ^^^ object type
  Property `a` is incompatible:
     25:   a: string, // Error: string ~> number
              ^^^^^^ string. This type is incompatible with
                    v-------
      5: type Foo = $ObjMap<
      6:   {
      7:     a: number,
    ...:
     11: >;
         ^ number

Error: identity.js:24
            v
 24: ((any: {
 25:   a: string, // Error: string ~> number
 26:   b: string, // Error: string ~> number
 27: }): Foo);
     ^ object type. This type is incompatible with
 27: }): Foo);
         ^^^ object type
  Property `b` is incompatible:
     26:   b: string, // Error: string ~> number
              ^^^^^^ string. This type is incompatible with
                    v-------
      5: type Foo = $ObjMap<
      6:   {
      7:     a: number,
    ...:
     11: >;
         ^ number

Error: identity.js:29
 29: ({}: Foo); // Error: `a` and `b` are not defined.
      ^^ object literal. This type is incompatible with
 29: ({}: Foo); // Error: `a` and `b` are not defined.
          ^^^ object type
  Property `a` is incompatible:
     29: ({}: Foo); // Error: `a` and `b` are not defined.
              ^^^ property `a`. Property not found in
     29: ({}: Foo); // Error: `a` and `b` are not defined.
          ^^ object literal

Error: identity.js:29
 29: ({}: Foo); // Error: `a` and `b` are not defined.
      ^^ object literal. This type is incompatible with
 29: ({}: Foo); // Error: `a` and `b` are not defined.
          ^^^ object type
  Property `b` is incompatible:
     29: ({}: Foo); // Error: `a` and `b` are not defined.
              ^^^ property `b`. Property not found in
     29: ({}: Foo); // Error: `a` and `b` are not defined.
          ^^ object literal

Error: identity.js:31
 31: ((any: {}): Foo); // Error: `a` and `b` are not defined.
            ^^ object type. This type is incompatible with
 31: ((any: {}): Foo); // Error: `a` and `b` are not defined.
                 ^^^ object type
  Property `a` is incompatible:
     31: ((any: {}): Foo); // Error: `a` and `b` are not defined.
                     ^^^ property `a`. Property not found in
     31: ((any: {}): Foo); // Error: `a` and `b` are not defined.
                ^^ object type

Error: identity.js:31
 31: ((any: {}): Foo); // Error: `a` and `b` are not defined.
            ^^ object type. This type is incompatible with
 31: ((any: {}): Foo); // Error: `a` and `b` are not defined.
                 ^^^ object type
  Property `b` is incompatible:
     31: ((any: {}): Foo); // Error: `a` and `b` are not defined.
                     ^^^ property `b`. Property not found in
     31: ((any: {}): Foo); // Error: `a` and `b` are not defined.
                ^^ object type

Error: identity.js:38
 38: (foo: {
      ^^^ object type. This type is incompatible with
           v
 38: (foo: {
 39:   a: string, // Error: number ~> string
 40:   b: string, // Error: number ~> string
 41: });
     ^ object type
  Property `a` is incompatible:
                    v-------
      5: type Foo = $ObjMap<
      6:   {
      7:     a: number,
    ...:
     11: >;
         ^ number. This type is incompatible with
     39:   a: string, // Error: number ~> string
              ^^^^^^ string

Error: identity.js:38
 38: (foo: {
      ^^^ object type. This type is incompatible with
           v
 38: (foo: {
 39:   a: string, // Error: number ~> string
 40:   b: string, // Error: number ~> string
 41: });
     ^ object type
  Property `b` is incompatible:
                    v-------
      5: type Foo = $ObjMap<
      6:   {
      7:     a: number,
    ...:
     11: >;
         ^ number. This type is incompatible with
     40:   b: string, // Error: number ~> string
              ^^^^^^ string

Error: identity.js:43
 43: (foo.a: empty); // Error: number ~> empty
      ^^^^^ Cannot cast `foo.a` to empty because number [1] is incompatible with empty [2].
  References:
   43: (foo.a: empty); // Error: number ~> empty
        ^^^^^ [1]: number
   43: (foo.a: empty); // Error: number ~> empty
               ^^^^^ [2]: empty

Error: identity.js:61
      v
 61: ({
 62:   foo: true, // Error: boolean ~> number | string
 63: }: $ObjMap<
     ^ object literal. This type is incompatible with
        v-------
 63: }: $ObjMap<
 64:   {
 65:     foo: number | string,
...:
 68: >);
     ^ object type
  Property `foo` is incompatible:
     62:   foo: true, // Error: boolean ~> number | string
                ^^^^ boolean. This type is incompatible with
            v-------
     63: }: $ObjMap<
     64:   {
     65:     foo: number | string,
    ...:
     68: >);
         ^ union: number | string
      Member 1:
              v-------
       63: }: $ObjMap<
       64:   {
       65:     foo: number | string,
      ...:
       68: >);
           ^ number
      Error:
       62:   foo: true, // Error: boolean ~> number | string
                  ^^^^ boolean. This type is incompatible with
              v-------
       63: }: $ObjMap<
       64:   {
       65:     foo: number | string,
      ...:
       68: >);
           ^ number
      Member 2:
              v-------
       63: }: $ObjMap<
       64:   {
       65:     foo: number | string,
      ...:
       68: >);
           ^ string
      Error:
       62:   foo: true, // Error: boolean ~> number | string
                  ^^^^ boolean. This type is incompatible with
              v-------
       63: }: $ObjMap<
       64:   {
       65:     foo: number | string,
      ...:
       68: >);
           ^ string

Error: identity.js:70
      v
 70: ({
 71:   foo: true, // Error: boolean ~> number | string
 72: }: $ObjMap<
     ^ object literal. This type is incompatible with
        v-------
 72: }: $ObjMap<
 73:   ({ foo: number } | { foo: string }),
 74:   <T>(T) => T,
 75: >);
     ^ union: object map(s)
  Member 1:
          v-------
   72: }: $ObjMap<
   73:   ({ foo: number } | { foo: string }),
   74:   <T>(T) => T,
   75: >);
       ^ object map
  Error:
        v
   70: ({
   71:   foo: true, // Error: boolean ~> number | string
   72: }: $ObjMap<
       ^ object literal. This type is incompatible with
          v-------
   72: }: $ObjMap<
   73:   ({ foo: number } | { foo: string }),
   74:   <T>(T) => T,
   75: >);
       ^ object type
    Property `foo` is incompatible:
       71:   foo: true, // Error: boolean ~> number | string
                  ^^^^ boolean. This type is incompatible with
              v-------
       72: }: $ObjMap<
       73:   ({ foo: number } | { foo: string }),
       74:   <T>(T) => T,
       75: >);
           ^ number
  Member 2:
          v-------
   72: }: $ObjMap<
   73:   ({ foo: number } | { foo: string }),
   74:   <T>(T) => T,
   75: >);
       ^ object map
  Error:
        v
   70: ({
   71:   foo: true, // Error: boolean ~> number | string
   72: }: $ObjMap<
       ^ object literal. This type is incompatible with
          v-------
   72: }: $ObjMap<
   73:   ({ foo: number } | { foo: string }),
   74:   <T>(T) => T,
   75: >);
       ^ object type
    Property `foo` is incompatible:
       71:   foo: true, // Error: boolean ~> number | string
                  ^^^^ boolean. This type is incompatible with
              v-------
       72: }: $ObjMap<
       73:   ({ foo: number } | { foo: string }),
       74:   <T>(T) => T,
       75: >);
           ^ string

Error: issue-2674.js:7
  7: (a.FOO: 'BAR'); // error
      ^^^^^ string literal `FOO`. Expected string literal `BAR`, got `FOO` instead
  7: (a.FOO: 'BAR'); // error
             ^^^^^ string literal `BAR`

Error: issue-2674.js:8
  8: a.FOO = 'BAR'; // error
             ^^^^^ string. Expected string literal `FOO`, got `BAR` instead
  8: a.FOO = 'BAR'; // error
     ^^^^^ string literal `FOO`

Error: issue-2674.js:14
 14: (b.FOO : 'BAR'); // error
      ^^^^^ string literal `FOO`. Expected string literal `BAR`, got `FOO` instead
 14: (b.FOO : 'BAR'); // error
              ^^^^^ string literal `BAR`

Error: issue-2674.js:15
 15: b.FOO = 'BAR'; // error
             ^^^^^ string. Expected string literal `FOO`, got `BAR` instead
 15: b.FOO = 'BAR'; // error
     ^^^^^ string literal `FOO`

Error: issue-2674.js:21
 21: (c[0]: 'BAR'); // error
      ^^^^ string literal `FOO`. Expected string literal `BAR`, got `FOO` instead
 21: (c[0]: 'BAR'); // error
            ^^^^^ string literal `BAR`

Error: issue-2674.js:22
 22: c[0] = 'BAR'; // error
            ^^^^^ string. Expected string literal `FOO`, got `BAR` instead
 22: c[0] = 'BAR'; // error
     ^^^^ string literal `FOO`

Error: objmap.js:10
 10: (o.FOO : 'BAR'); // error, 'FOO' incompatible with 'BAR'
      ^^^^^ string literal `FOO`. Expected string literal `BAR`, got `FOO` instead
 10: (o.FOO : 'BAR'); // error, 'FOO' incompatible with 'BAR'
              ^^^^^ string literal `BAR`

Error: objmap.js:16
 16:   (o.foo: string); // error, number ~> string
        ^^^^^ Cannot cast `o.foo` to string because number [1] is incompatible with string [2].
  References:
   16:   (o.foo: string); // error, number ~> string
          ^^^^^ [1]: number
   16:   (o.foo: string); // error, number ~> string
                 ^^^^^^ [2]: string

Error: optional.js:13
 13: (o3.b: Array<number | void>); // Error: void ~> array
      ^^^^ Cannot cast `o3.b` to array type because undefined [1] is incompatible with array type [2].
  References:
   13: (o3.b: Array<number | void>); // Error: void ~> array
        ^^^^ [1]: undefined
   13: (o3.b: Array<number | void>); // Error: void ~> array
              ^^^^^^^^^^^^^^^^^^^^ [2]: array type

Error: optional.js:17
 17: (o6.b: Array<number | void>); // Error: void ~> array
      ^^^^ Cannot cast `o6.b` to array type because undefined [1] is incompatible with array type [2].
  References:
   17: (o6.b: Array<number | void>); // Error: void ~> array
        ^^^^ [1]: undefined
   17: (o6.b: Array<number | void>); // Error: void ~> array
              ^^^^^^^^^^^^^^^^^^^^ [2]: array type


Found 23 errors
