Error ------------------------------------- class-extends-and-implements.js:15:6

Error: class-extends-and-implements.js:15
 15:   p: string;
          ^^^^^^ Cannot extend `A` [1] with `C` because in property `p`, string [2] is incompatible with number [3].
  References:
   14: class C extends A {
                       ^ [1]: `A`
   15:   p: string;
            ^^^^^^ [2]: string
    7:   p: number;
            ^^^^^^ [3]: number

Error ------------------------------------- class-extends-and-implements.js:19:6

Error: class-extends-and-implements.js:19
 19:   p: string;
          ^^^^^^ Cannot extend `B` [1] with `D` because in property `p`, string [2] is incompatible with number [3].
  References:
   18: class D extends B<empty> {
                       ^^^^^^^^ [1]: `B`
   19:   p: string;
            ^^^^^^ [2]: string
   11:   p: number;
            ^^^^^^ [3]: number

Error ------------------------------------- class-extends-and-implements.js:31:6

Error: class-extends-and-implements.js:31
 31:   p: string;
          ^^^^^^ Cannot implement `E` [1] with `G` because in property `p`, string [2] is incompatible with number [3].
  References:
   30: class G implements E {
                          ^ [1]: `E`
   31:   p: string;
            ^^^^^^ [2]: string
   23:   p: number;
            ^^^^^^ [3]: number

Error ------------------------------------- class-extends-and-implements.js:35:6

Error: class-extends-and-implements.js:35
 35:   p: string;
          ^^^^^^ Cannot implement `F` [1] with `H` because in property `p`, string [2] is incompatible with number [3].
  References:
   34: class H implements F<empty> {
                          ^^^^^^^^ [1]: `F`
   35:   p: string;
            ^^^^^^ [2]: string
   27:   p: number;
            ^^^^^^ [3]: number

Error ------------------------------------- class-extends-and-implements.js:47:6

Error: class-extends-and-implements.js:47
 47:   p: string;
          ^^^^^^ Cannot extend `I` [1] with `K` because in property `p`, string [2] is incompatible with number [3].
  References:
   46: interface K extends I {
                           ^ [1]: `I`
   47:   p: string;
            ^^^^^^ [2]: string
   39:   p: number;
            ^^^^^^ [3]: number

Error ------------------------------------- class-extends-and-implements.js:51:6

Error: class-extends-and-implements.js:51
 51:   p: string;
          ^^^^^^ Cannot extend `J` [1] with `L` because in property `p`, string [2] is incompatible with number [3].
  References:
   50: interface L extends J<empty> {
                           ^^^^^^^^ [1]: `J`
   51:   p: string;
            ^^^^^^ [2]: string
   43:   p: number;
            ^^^^^^ [3]: number

Error ------------------------------------- class-extends-and-implements.js:71:7

Error: class-extends-and-implements.js:71
 71:   p1: string;
           ^^^^^^ Cannot extend `M1` [1] with `O` because in property `p1`, string [2] is incompatible with number [3].
  References:
   70: interface O extends M1, M2 {
                           ^^ [1]: `M1`
   71:   p1: string;
             ^^^^^^ [2]: string
   55:   p1: number;
             ^^^^^^ [3]: number

Error ------------------------------------- class-extends-and-implements.js:72:7

Error: class-extends-and-implements.js:72
 72:   p2: string;
           ^^^^^^ Cannot extend `M2` [1] with `O` because in property `p2`, string [2] is incompatible with number [3].
  References:
   70: interface O extends M1, M2 {
                               ^^ [1]: `M2`
   72:   p2: string;
             ^^^^^^ [2]: string
   59:   p2: number;
             ^^^^^^ [3]: number

Error ------------------------------------- class-extends-and-implements.js:76:7

Error: class-extends-and-implements.js:76
 76:   p1: string;
           ^^^^^^ Cannot extend `N1` [1] with `P` because in property `p1`, string [2] is incompatible with number [3].
  References:
   75: interface P extends N1<empty>, N2<empty> {
                           ^^^^^^^^^ [1]: `N1`
   76:   p1: string;
             ^^^^^^ [2]: string
   63:   p1: number;
             ^^^^^^ [3]: number

Error ------------------------------------- class-extends-and-implements.js:77:7

Error: class-extends-and-implements.js:77
 77:   p2: string;
           ^^^^^^ Cannot extend `N2` [1] with `P` because in property `p2`, string [2] is incompatible with number [3].
  References:
   75: interface P extends N1<empty>, N2<empty> {
                                      ^^^^^^^^^ [1]: `N2`
   77:   p2: string;
             ^^^^^^ [2]: string
   67:   p2: number;
             ^^^^^^ [3]: number

Error ------------------------------------- class-extends-and-implements.js:97:7

Error: class-extends-and-implements.js:97
 97:   p1: number;
           ^^^^^^ Cannot implement `Q1` [1] with `S` because in property `p1`, number [2] is incompatible with string [3].
  References:
   96: class S implements Q1, Q2 {
                          ^^ [1]: `Q1`
   97:   p1: number;
             ^^^^^^ [2]: number
   81:   p1: string;
             ^^^^^^ [3]: string

Error ------------------------------------- class-extends-and-implements.js:98:7

Error: class-extends-and-implements.js:98
 98:   p2: number;
           ^^^^^^ Cannot implement `Q2` [1] with `S` because in property `p2`, number [2] is incompatible with string [3].
  References:
   96: class S implements Q1, Q2 {
                              ^^ [1]: `Q2`
   98:   p2: number;
             ^^^^^^ [2]: number
   85:   p2: string;
             ^^^^^^ [3]: string

Error ------------------------------------ class-extends-and-implements.js:102:7

Error: class-extends-and-implements.js:102
102:   p1: number;
           ^^^^^^ Cannot implement `R1` [1] with `T` because in property `p1`, number [2] is incompatible with string [3].
  References:
  101: class T implements R1<empty>, R2<empty> {
                          ^^^^^^^^^ [1]: `R1`
  102:   p1: number;
             ^^^^^^ [2]: number
   89:   p1: string;
             ^^^^^^ [3]: string

Error ------------------------------------ class-extends-and-implements.js:103:7

Error: class-extends-and-implements.js:103
103:   p2: number;
           ^^^^^^ Cannot implement `R2` [1] with `T` because in property `p2`, number [2] is incompatible with string [3].
  References:
  101: class T implements R1<empty>, R2<empty> {
                                     ^^^^^^^^^ [1]: `R2`
  103:   p2: number;
             ^^^^^^ [2]: number
   93:   p2: string;
             ^^^^^^ [3]: string

Error --------------------------------------- class-refinement-env-merge.js:12:6

Error: class-refinement-env-merge.js:12
 12:     (this.p: number);
          ^^^^^^ Cannot cast `this.p` to number because string [1] is incompatible with number [2].
  References:
    7:   p: number | string;
                     ^^^^^^ [1]: string
   12:     (this.p: number);
                    ^^^^^^ [2]: number

Error --------------------------------------- class-refinement-env-merge.js:12:6

Error: class-refinement-env-merge.js:12
 12:     (this.p: number);
          ^^^^^^ Cannot cast `this.p` to number because string [1] is incompatible with number [2].
  References:
   10:       this.p = 'foo';
                      ^^^^^ [1]: string
   12:     (this.p: number);
                    ^^^^^^ [2]: number

Error -------------------------------------------- desc-class-properties.js:16:6

Error: desc-class-properties.js:16
 16:     (this.a: number); // Error: string ~> number
          ^^^^^^ Cannot cast `this.a` to number because string [1] is incompatible with number [2].
  References:
    7:   a: string;
            ^^^^^^ [1]: string
   16:     (this.a: number); // Error: string ~> number
                    ^^^^^^ [2]: number

Error -------------------------------------------- desc-class-properties.js:17:6

Error: desc-class-properties.js:17
 17:     (super.a: number); // Error: string ~> number
          ^^^^^^^ Cannot cast `super.a` to number because string [1] is incompatible with number [2].
  References:
    7:   a: string;
            ^^^^^^ [1]: string
   17:     (super.a: number); // Error: string ~> number
                     ^^^^^^ [2]: number

Error -------------------------------------------- desc-class-properties.js:18:6

Error: desc-class-properties.js:18
 18:     (this.b: number); // Error: string ~> number
          ^^^^^^ Cannot cast `this.b` to number because string [1] is incompatible with number [2].
  References:
   11:   b: string;
            ^^^^^^ [1]: string
   18:     (this.b: number); // Error: string ~> number
                    ^^^^^^ [2]: number

Error -------------------------------------------- desc-class-properties.js:19:6

Error: desc-class-properties.js:19
 19:     (this.#c: number); // Error: string ~> number
          ^^^^^^^ Cannot cast `this.#c` to number because string [1] is incompatible with number [2].
  References:
   13:   #c: string;
             ^^^^^^ [1]: string
   19:     (this.#c: number); // Error: string ~> number
                     ^^^^^^ [2]: number

Error ----------------------------------------- indexer-key-compatibility.js:7:2

Error: indexer-key-compatibility.js:7
  7: (o: {[k: string]: any});
      ^ Cannot cast `o` to object type because in the indexer property's key, number [1] is incompatible with string [2].
  References:
    6: declare var o: {[k: number]: any};
                           ^^^^^^ [1]: number
    7: (o: {[k: string]: any});
                ^^^^^^ [2]: string

Error ------------------------------------ loc-primary-for-covariant-ops.js:8:16

Error: loc-primary-for-covariant-ops.js:8
  8: ((any: (x: {p: number}) => void): (x: {p: string}) => void);
                    ^^^^^^ Cannot cast `any` to function type because in the first argument and then property `p`, number [1] is incompatible with string [2].
  References:
    8: ((any: (x: {p: number}) => void): (x: {p: string}) => void);
                      ^^^^^^ [1]: number
    8: ((any: (x: {p: number}) => void): (x: {p: string}) => void);
                                                 ^^^^^^ [2]: string

Error ----------------------------------- loc-primary-for-covariant-ops.js:11:14

Error: loc-primary-for-covariant-ops.js:11
 11: ((any: X<{p: number}>): X<{p: string}>);
                  ^^^^^^ Cannot cast `any` to `X` because in type argument `T` and then property `p`, number [1] is incompatible with string [2].
  References:
   11: ((any: X<{p: number}>): X<{p: string}>);
                    ^^^^^^ [1]: number
   11: ((any: X<{p: number}>): X<{p: string}>);
                                     ^^^^^^ [2]: string

Error ------------------------------------------------------- loc-primary.js:8:2

Error: loc-primary.js:8
  8: (a1: A); // Error: string ~> number. We should point to a1.
      ^^ Cannot cast `a1` to `A` because in property `p`, number [1] is incompatible with string [2].
  References:
    7: declare var a1: {p: number};
                           ^^^^^^ [1]: number
    6: type A = {p: string};
                    ^^^^^^ [2]: string

Error ------------------------------------------------------ loc-primary.js:10:6

Error: loc-primary.js:10
 10: ({p: a2}: A); // Error: string ~> number. We should point to a2.
          ^^ Cannot cast object literal to `A` because in property `p`, number [1] is incompatible with string [2].
  References:
    9: declare var a2: number;
                       ^^^^^^ [1]: number
    6: type A = {p: string};
                    ^^^^^^ [2]: string

Error ------------------------------------------------------ loc-primary.js:11:6

Error: loc-primary.js:11
 11: ({p: 42}: A); // Error: string ~> number. We should point to 42.
          ^^ Cannot cast object literal to `A` because in property `p`, number [1] is incompatible with string [2].
  References:
   11: ({p: 42}: A); // Error: string ~> number. We should point to 42.
            ^^ [1]: number
    6: type A = {p: string};
                    ^^^^^^ [2]: string

Error ------------------------------------------------------ loc-primary.js:15:2

Error: loc-primary.js:15
 15: (b1: B); // Error: string ~> number. We should point to b1.
      ^^ Cannot cast `b1` to `B` because in property `a.b`, number [1] is incompatible with string [2].
  References:
   14: declare var b1: {a: {b: number}};
                               ^^^^^^ [1]: number
   13: type B = {a: {b: string}};
                        ^^^^^^ [2]: string

Error ------------------------------------------------------ loc-primary.js:17:6

Error: loc-primary.js:17
 17: ({a: b2}: B); // Error: string ~> number. We should point to b2.
          ^^ Cannot cast object literal to `B` because in property `a.b`, number [1] is incompatible with string [2].
  References:
   16: declare var b2: {b: number};
                           ^^^^^^ [1]: number
   13: type B = {a: {b: string}};
                        ^^^^^^ [2]: string

Error ----------------------------------------------------- loc-primary.js:19:10

Error: loc-primary.js:19
 19: ({a: {b: b3}}: B); // Error: string ~> number. We should point to b3.
              ^^ Cannot cast object literal to `B` because in property `a.b`, number [1] is incompatible with string [2].
  References:
   18: declare var b3: number;
                       ^^^^^^ [1]: number
   13: type B = {a: {b: string}};
                        ^^^^^^ [2]: string

Error ----------------------------------------------------- loc-primary.js:20:10

Error: loc-primary.js:20
 20: ({a: {b: 42}}: B); // Error: string ~> number. We should point to 42.
              ^^ Cannot cast object literal to `B` because in property `a.b`, number [1] is incompatible with string [2].
  References:
   20: ({a: {b: 42}}: B); // Error: string ~> number. We should point to 42.
                ^^ [1]: number
   13: type B = {a: {b: string}};
                        ^^^^^^ [2]: string

Error ------------------------------------------------------ loc-primary.js:24:2

Error: loc-primary.js:24
 24: (c1: C); // Error: string ~> number. We should point to c1.
      ^^ Cannot cast `c1` to `C` because in property `a.b.c`, number [1] is incompatible with string [2].
  References:
   23: declare var c1: {a: {b: {c: number}}};
                                   ^^^^^^ [1]: number
   22: type C = {a: {b: {c: string}}};
                            ^^^^^^ [2]: string

Error ------------------------------------------------------ loc-primary.js:26:6

Error: loc-primary.js:26
 26: ({a: c2}: C); // Error: string ~> number. We should point to c2.
          ^^ Cannot cast object literal to `C` because in property `a.b.c`, number [1] is incompatible with string [2].
  References:
   25: declare var c2: {b: {c: number}};
                               ^^^^^^ [1]: number
   22: type C = {a: {b: {c: string}}};
                            ^^^^^^ [2]: string

Error ----------------------------------------------------- loc-primary.js:28:10

Error: loc-primary.js:28
 28: ({a: {b: c3}}: C); // Error: string ~> number. We should point to c3.
              ^^ Cannot cast object literal to `C` because in property `a.b.c`, number [1] is incompatible with string [2].
  References:
   27: declare var c3: {c: number};
                           ^^^^^^ [1]: number
   22: type C = {a: {b: {c: string}}};
                            ^^^^^^ [2]: string

Error ----------------------------------------------------- loc-primary.js:30:14

Error: loc-primary.js:30
 30: ({a: {b: {c: c4}}}: C); // Error: string ~> number. We should point to c4.
                  ^^ Cannot cast object literal to `C` because in property `a.b.c`, number [1] is incompatible with string [2].
  References:
   29: declare var c4: number;
                       ^^^^^^ [1]: number
   22: type C = {a: {b: {c: string}}};
                            ^^^^^^ [2]: string

Error ----------------------------------------------------- loc-primary.js:31:14

Error: loc-primary.js:31
 31: ({a: {b: {c: 42}}}: C); // Error: string ~> number. We should point to 42.
                  ^^ Cannot cast object literal to `C` because in property `a.b.c`, number [1] is incompatible with string [2].
  References:
   31: ({a: {b: {c: 42}}}: C); // Error: string ~> number. We should point to 42.
                    ^^ [1]: number
   22: type C = {a: {b: {c: string}}};
                            ^^^^^^ [2]: string

Error ------------------------------------------------------ loc-primary.js:35:2

Error: loc-primary.js:35
 35: (d1: D); // Error: string ~> number. We should point to d1.
      ^^ Cannot cast `d1` to `D` because in property `a.b.c.d`, number [1] is incompatible with string [2].
  References:
   34: declare var d1: {a: {b: {c: {d: number}}}};
                                       ^^^^^^ [1]: number
   33: type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]: string

Error ------------------------------------------------------ loc-primary.js:37:6

Error: loc-primary.js:37
 37: ({a: d2}: D); // Error: string ~> number. We should point to d2.
          ^^ Cannot cast object literal to `D` because in property `a.b.c.d`, number [1] is incompatible with string [2].
  References:
   36: declare var d2: {b: {c: {d: number}}};
                                   ^^^^^^ [1]: number
   33: type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]: string

Error ----------------------------------------------------- loc-primary.js:39:10

Error: loc-primary.js:39
 39: ({a: {b: d3}}: D); // Error: string ~> number. We should point to d3.
              ^^ Cannot cast object literal to `D` because in property `a.b.c.d`, number [1] is incompatible with string [2].
  References:
   38: declare var d3: {c: {d: number}};
                               ^^^^^^ [1]: number
   33: type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]: string

Error ----------------------------------------------------- loc-primary.js:41:14

Error: loc-primary.js:41
 41: ({a: {b: {c: d4}}}: D); // Error: string ~> number. We should point to d4.
                  ^^ Cannot cast object literal to `D` because in property `a.b.c.d`, number [1] is incompatible with string [2].
  References:
   40: declare var d4: {d: number};
                           ^^^^^^ [1]: number
   33: type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]: string

Error ----------------------------------------------------- loc-primary.js:43:18

Error: loc-primary.js:43
 43: ({a: {b: {c: {d: d5}}}}: D); // Error: string ~> number. We should point to d5.
                      ^^ Cannot cast object literal to `D` because in property `a.b.c.d`, number [1] is incompatible with string [2].
  References:
   42: declare var d5: number;
                       ^^^^^^ [1]: number
   33: type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]: string

Error ----------------------------------------------------- loc-primary.js:44:18

Error: loc-primary.js:44
 44: ({a: {b: {c: {d: 42}}}}: D); // Error: string ~> number. We should point to 42.
                      ^^ Cannot cast object literal to `D` because in property `a.b.c.d`, number [1] is incompatible with string [2].
  References:
   44: ({a: {b: {c: {d: 42}}}}: D); // Error: string ~> number. We should point to 42.
                        ^^ [1]: number
   33: type D = {a: {b: {c: {d: string}}}};
                                ^^^^^^ [2]: string

Error ---------------------------------------------------- loc-reference.js:15:2

Error: loc-reference.js:15
 15: (x1: empty); // X ~> empty. Ref should point to first `new X()`.
      ^^ Cannot cast `x1` to empty because `X` [1] is incompatible with empty [2].
  References:
    8: const x1 = new X();
                  ^^^^^^^ [1]: `X`
   15: (x1: empty); // X ~> empty. Ref should point to first `new X()`.
            ^^^^^ [2]: empty

Error ---------------------------------------------------- loc-reference.js:16:2

Error: loc-reference.js:16
 16: (x2: empty); // X ~> empty. Ref should point to first `X` annotation.
      ^^ Cannot cast `x2` to empty because `X` [1] is incompatible with empty [2].
  References:
    9: const x2: X = new X();
                 ^ [1]: `X`
   16: (x2: empty); // X ~> empty. Ref should point to first `X` annotation.
            ^^^^^ [2]: empty

Error ---------------------------------------------------- loc-reference.js:17:2

Error: loc-reference.js:17
 17: (x3: empty); // X ~> empty. Ref should point to first `new X()`.
      ^^ Cannot cast `x3` to empty because `X` [1] is incompatible with empty [2].
  References:
    8: const x1 = new X();
                  ^^^^^^^ [1]: `X`
   17: (x3: empty); // X ~> empty. Ref should point to first `new X()`.
            ^^^^^ [2]: empty

Error ---------------------------------------------------- loc-reference.js:18:2

Error: loc-reference.js:18
 18: (x4: empty); // X ~> empty. Ref should point to first `X` annotation.
      ^^ Cannot cast `x4` to empty because `X` [1] is incompatible with empty [2].
  References:
    9: const x2: X = new X();
                 ^ [1]: `X`
   18: (x4: empty); // X ~> empty. Ref should point to first `X` annotation.
            ^^^^^ [2]: empty

Error ---------------------------------------------------- loc-reference.js:19:2

Error: loc-reference.js:19
 19: (x5: empty); // X ~> empty. Ref should point to second `X` annotation.
      ^^ Cannot cast `x5` to empty because `X` [1] is incompatible with empty [2].
  References:
   12: const x5: X = x1;
                 ^ [1]: `X`
   19: (x5: empty); // X ~> empty. Ref should point to second `X` annotation.
            ^^^^^ [2]: empty

Error ---------------------------------------------------- loc-reference.js:20:2

Error: loc-reference.js:20
 20: (x6: empty); // X ~> empty. Ref should point to second `X` annotation.
      ^^ Cannot cast `x6` to empty because `X` [1] is incompatible with empty [2].
  References:
    8: const x1 = new X();
                  ^^^^^^^ [1]: `X`
   20: (x6: empty); // X ~> empty. Ref should point to second `X` annotation.
            ^^^^^ [2]: empty

Error ---------------------------------------------------- loc-reference.js:29:2

Error: loc-reference.js:29
 29: (y1: empty); // number ~> empty. Ref should point to 42.
      ^^ Cannot cast `y1` to empty because number [1] is incompatible with empty [2].
  References:
   22: const y1 = 42;
                  ^^ [1]: number
   29: (y1: empty); // number ~> empty. Ref should point to 42.
            ^^^^^ [2]: empty

Error ---------------------------------------------------- loc-reference.js:30:2

Error: loc-reference.js:30
 30: (y2: empty); // number ~> empty. Ref should point to first `number` annotation.
      ^^ Cannot cast `y2` to empty because number [1] is incompatible with empty [2].
  References:
   23: const y2: number = -42;
                 ^^^^^^ [1]: number
   30: (y2: empty); // number ~> empty. Ref should point to first `number` annotation.
            ^^^^^ [2]: empty

Error ---------------------------------------------------- loc-reference.js:31:2

Error: loc-reference.js:31
 31: (y3: empty); // number ~> empty. Ref should point to 42.
      ^^ Cannot cast `y3` to empty because number [1] is incompatible with empty [2].
  References:
   22: const y1 = 42;
                  ^^ [1]: number
   31: (y3: empty); // number ~> empty. Ref should point to 42.
            ^^^^^ [2]: empty

Error ---------------------------------------------------- loc-reference.js:32:2

Error: loc-reference.js:32
 32: (y4: empty); // number ~> empty. Ref should point to first `number` annotation.
      ^^ Cannot cast `y4` to empty because number [1] is incompatible with empty [2].
  References:
   23: const y2: number = -42;
                 ^^^^^^ [1]: number
   32: (y4: empty); // number ~> empty. Ref should point to first `number` annotation.
            ^^^^^ [2]: empty

Error ---------------------------------------------------- loc-reference.js:33:2

Error: loc-reference.js:33
 33: (y5: empty); // number ~> empty. Ref should point to second `number` annotation.
      ^^ Cannot cast `y5` to empty because number [1] is incompatible with empty [2].
  References:
   26: const y5: number = y1;
                 ^^^^^^ [1]: number
   33: (y5: empty); // number ~> empty. Ref should point to second `number` annotation.
            ^^^^^ [2]: empty

Error ---------------------------------------------------- loc-reference.js:34:2

Error: loc-reference.js:34
 34: (y6: empty); // number ~> empty. Ref should point to 42.
      ^^ Cannot cast `y6` to empty because number [1] is incompatible with empty [2].
  References:
   22: const y1 = 42;
                  ^^ [1]: number
   34: (y6: empty); // number ~> empty. Ref should point to 42.
            ^^^^^ [2]: empty

Error ---------------------------------------------------- loc-reference.js:37:4

Error: loc-reference.js:37
 37:   (x: number); // string ~> number. Ref should point to `x: string`.
        ^ Cannot cast `x` to number because string [1] is incompatible with number [2].
  References:
   36: function fn1(x: string) {
                       ^^^^^^ [1]: string
   37:   (x: number); // string ~> number. Ref should point to `x: string`.
             ^^^^^^ [2]: number

Error ---------------------------------------------------- loc-reference.js:41:4

Error: loc-reference.js:41
 41:   (x: number); // T ~> number. Ref should point to `x: T`.
        ^ Cannot cast `x` to number because `T` [1] is incompatible with number [2].
  References:
   40: function fn2<T>(x: T) {
                          ^ [1]: `T`
   41:   (x: number); // T ~> number. Ref should point to `x: T`.
             ^^^^^^ [2]: number

Error ----------------------------------------------- misc-incompatibles.js:8:24

Error: misc-incompatibles.js:8
  8: declare class X mixins Y {}
                            ^ number [1] is not a class.
  References:
    6: const Y = 42;
                 ^^ [1]: number

Error ---------------------------------------------- misc-incompatibles.js:11:11

Error: misc-incompatibles.js:11
 11: interface B extends A {}
               ^ Cannot extend `A` [1] with `B` because number [2] is not inheritable.
  References:
   11: interface B extends A {}
                           ^ [1]: `A`
   11: interface B extends A {}
                           ^ [2]: number

Error ---------------------------------------------- misc-incompatibles.js:11:21

Error: misc-incompatibles.js:11
 11: interface B extends A {}
                         ^ number [1] is not supported by unclassified use GetStaticsT.
  References:
   11: interface B extends A {}
                           ^ [1]: number

Error ----------------------------------------------- misc-incompatibles.js:14:3

Error: misc-incompatibles.js:14
 14: o[true];
       ^^^^ Cannot access computed property using boolean [1].
  References:
   14: o[true];
         ^^^^ [1]: boolean

Error ----------------------------------------------- misc-incompatibles.js:15:3

Error: misc-incompatibles.js:15
 15: o[true] = 42;
       ^^^^ Cannot assign computed property using boolean [1].
  References:
   15: o[true] = 42;
         ^^^^ [1]: boolean

Error ----------------------------------------------- misc-incompatibles.js:17:1

Error: misc-incompatibles.js:17
 17: [nope] += 1;
     ^^^^^^ Invalid left-hand side in assignment expression.

Error ------------------------------------------------------------- order.js:9:6

Error: order.js:9
  9:   a: 42,
          ^^ Cannot cast object literal to object type because in property `a`, number [1] is incompatible with boolean [2].
  References:
    9:   a: 42,
            ^^ [1]: number
   13:   a: boolean,
            ^^^^^^^ [2]: boolean

Error ------------------------------------------------------------ order.js:11:6

Error: order.js:11
 11:   c: true,
          ^^^^ Cannot cast object literal to object type because in property `c`, boolean [1] is incompatible with number [2].
  References:
   11:   c: true,
            ^^^^ [1]: boolean
   14:   c: number,
            ^^^^^^ [2]: number

Error ------------------------------------------------------------ order.js:10:7

Error: order.js:10
 10:   b: ('foo': empty),
           ^^^^^ Cannot cast `'foo'` to empty because string [1] is incompatible with empty [2].
  References:
   10:   b: ('foo': empty),
             ^^^^^ [1]: string
   10:   b: ('foo': empty),
                    ^^^^^ [2]: empty

Error ---------------------------------------------------- prop-variance.js:12:8

Error: prop-variance.js:12
 12: ((any: {+p: T}): {p: T}); // Error: read-only ~> writable
            ^^^^^^^ Cannot cast `any` to object type because property `p` is read-only in object type [1] but writable in object type [2].
  References:
   12: ((any: {+p: T}): {p: T}); // Error: read-only ~> writable
              ^^^^^^^ [1]: object type
   12: ((any: {+p: T}): {p: T}); // Error: read-only ~> writable
                        ^^^^^^ [2]: object type

Error ---------------------------------------------------- prop-variance.js:14:8

Error: prop-variance.js:14
 14: ((any: {+p: T}): {-p: T}); // Error: read-only ~> write-only
            ^^^^^^^ Cannot cast `any` to object type because property `p` is read-only in object type [1] but write-only in object type [2].
  References:
   14: ((any: {+p: T}): {-p: T}); // Error: read-only ~> write-only
              ^^^^^^^ [1]: object type
   14: ((any: {+p: T}): {-p: T}); // Error: read-only ~> write-only
                        ^^^^^^^ [2]: object type

Error ---------------------------------------------------- prop-variance.js:15:8

Error: prop-variance.js:15
 15: ((any: {-p: T}): {p: T}); // Error: write-only ~> readable
            ^^^^^^^ Cannot cast `any` to object type because property `p` is write-only in object type [1] but readable in object type [2].
  References:
   15: ((any: {-p: T}): {p: T}); // Error: write-only ~> readable
              ^^^^^^^ [1]: object type
   15: ((any: {-p: T}): {p: T}); // Error: write-only ~> readable
                        ^^^^^^ [2]: object type

Error ---------------------------------------------------- prop-variance.js:16:8

Error: prop-variance.js:16
 16: ((any: {-p: T}): {+p: T}); // Error: write-only ~> read-only
            ^^^^^^^ Cannot cast `any` to object type because property `p` is write-only in object type [1] but read-only in object type [2].
  References:
   16: ((any: {-p: T}): {+p: T}); // Error: write-only ~> read-only
              ^^^^^^^ [1]: object type
   16: ((any: {-p: T}): {+p: T}); // Error: write-only ~> read-only
                        ^^^^^^^ [2]: object type

Error ------------------------------------------------ typeof-unexpected.js:6:15

Error: typeof-unexpected.js:6
  6: (null: typeof 42);
                   ^^ `typeof` can only be used to get the type of variables.


Found 69 errors
