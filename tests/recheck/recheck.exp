
Test a:
Error --------------------------------------------------------------- a1.js:3:42

Cannot return `5` because number [1] is incompatible with string [2].


Error --------------------------------------------------------------- a2.js:5:22

Cannot call `foo` with empty string bound to `x` because string [1] is
incompatible with number [2].



Found 2 errors
Error --------------------------------------------------------------- a2.js:5:22

Cannot call `foo` with empty string bound to `x` because string [1] is
incompatible with number [2].


Error ---------------------------------------------------------------- a3.js:5:2

Cannot cast `five + five` to string because number [1] is incompatible with
string [2].



Found 2 errors
Error ---------------------------------------------------------------- a1.js:5:5

Cannot call `foo` with empty string bound to `x` because string [1] is
incompatible with number [2].


Error --------------------------------------------------------------- a2.js:5:22

Cannot call `foo` with empty string bound to `x` because string [1] is
incompatible with number [2].


Error ---------------------------------------------------------------- a3.js:5:2

Cannot cast `five + five` to string because number [1] is incompatible with
string [2].



Found 3 errors

Test b:
Error ---------------------------------------------------------------- b3.js:5:2

Cannot cast `new D()` to `C` because `D` [1] is incompatible with `C` [2].



Found 1 error
No errors!

Test c:
Error ---------------------------------------------------------------- c2.js:6:7

Cannot call `foo` with object literal bound to `props` because property `x` is
missing in object literal [1] but exists in object type [2].


Error ---------------------------------------------------------------- c3.js:5:5

Cannot call `bar` with object literal bound to `props` because property `y` is
missing in object literal [1] but exists in object type [2].



Found 2 errors
Error ---------------------------------------------------------------- c3.js:5:5

Cannot call `bar` with object literal bound to `props` because property `y` is
missing in object literal [1] but exists in object type [2].



Found 1 error

Test d:
Error --------------------------------------------------------------- d2.js:4:19

Cannot assign `x` to `y` because `B` [1] is incompatible with `A` [2].



Found 1 error

Test e:
Error: e2.js:6
  6:   return { type: 'QUX' };
              ^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected return type of
  5: const f = (): Action => {
                   ^^^^^^ union: object type(s)
  Member 1:
    4:   | { type: 'FOO' }
           ^^^^^^^^^^^^^^^ object type. See: e1.js:4
  Error:
    6:   return { type: 'QUX' };
                ^^^^^^^^^^^^^^^ object literal. This type is incompatible with
    4:   | { type: 'FOO' }
           ^^^^^^^^^^^^^^^ object type. See: e1.js:4
    Property `type` is incompatible:
        6:   return { type: 'QUX' };
                            ^^^^^ string. Expected string literal `FOO`, got `QUX` instead
        4:   | { type: 'FOO' }
                       ^^^^^ string literal `FOO`. See: e1.js:4
  Member 2:
    5:   | { type: 'BAR' }
           ^^^^^^^^^^^^^^^ object type. See: e1.js:5
  Error:
    6:   return { type: 'QUX' };
                ^^^^^^^^^^^^^^^ object literal. This type is incompatible with
    5:   | { type: 'BAR' }
           ^^^^^^^^^^^^^^^ object type. See: e1.js:5
    Property `type` is incompatible:
        6:   return { type: 'QUX' };
                            ^^^^^ string. Expected string literal `BAR`, got `QUX` instead
        5:   | { type: 'BAR' }
                       ^^^^^ string literal `BAR`. See: e1.js:5


Found 1 error
No errors!
No errors!

Test f:
Error ---------------------------------------------------------------- f2.js:4:2

Cannot cast `c` to object type because in property `x`, string [1] is
incompatible with number [2].



Found 1 error
No errors!
No errors!
Error ---------------------------------------------------------------- f2.js:4:2

Cannot cast `c` to object type because in property `x`, string [1] is
incompatible with number [2].



Found 1 error

Test g:
No errors!

Test h:
Error --------------------------------------------------------------- h2.js:3:15

Cannot import `Foo` because there is no `Foo` export in `./h1`.



Found 1 error

Test i:
Error ---------------------------------------------------------------- i2.js:5:5

Cannot assign `0` to `foo.p` because property `p` is not writable.



Found 1 error

Test j:
Error ---------------------------------------------------------------- j2.js:5:5

Cannot assign `0` to `foo.p` because property `p` is not writable.



Found 1 error

Test l:
No errors!

Test m:
Error ---------------------------------------------------------------- m3.js:6:2

Cannot cast `x` to `T` because in type argument `X`, string [1] is incompatible
with number [2].



Found 1 error

Test k:
Error ----------------------------------------------------------------- k.js:4:4

Cannot get `x.p` because property `p` is missing in `LibK` [1].



Found 1 error
No errors!
Error ----------------------------------------------------------------- k.js:4:4

Cannot get `x.p` because property `p` is missing in `LibK` [1].



Found 1 error
