
Test a:
Error: a1.js:3
  3: function foo(x: number): string { return 5; }
                                              ^ number. This type is incompatible with the expected return type of
  3: function foo(x: number): string { return 5; }
                              ^^^^^^ string

Error: a2.js:5
  5: module.exports = foo("");
                          ^^ string. This type is incompatible with the expected param type of
  3: function foo(x: number): string { return 5; }
                     ^^^^^^ number. See: a1.js:3


Found 2 errors
Error: a2.js:5
  5: module.exports = foo("");
                          ^^ string. This type is incompatible with the expected param type of
  3: function foo(x: number): number { return 5; }
                     ^^^^^^ number. See: a1.js:3

Error: a3.js:5
  5: (five + five: string);
      ^^^^^^^^^^^ Cannot cast `five + five` to string because number [1] is incompatible with string [2].
  References:
    5: (five + five: string);
        ^^^^^^^^^^^ [1]: number
    5: (five + five: string);
                     ^^^^^^ [2]: string


Found 2 errors
Error: a1.js:5
  5: foo("");
         ^^ string. This type is incompatible with the expected param type of
  3: function foo(x: number): number { return 5; }
                     ^^^^^^ number

Error: a2.js:5
  5: module.exports = foo("");
                          ^^ string. This type is incompatible with the expected param type of
  3: function foo(x: number): number { return 5; }
                     ^^^^^^ number. See: a1.js:3

Error: a3.js:5
  5: (five + five: string);
      ^^^^^^^^^^^ Cannot cast `five + five` to string because number [1] is incompatible with string [2].
  References:
    5: (five + five: string);
        ^^^^^^^^^^^ [1]: number
    5: (five + five: string);
                     ^^^^^^ [2]: string


Found 3 errors

Test b:
Error: b3.js:5
  5: (new D: C);
      ^^^^^ Cannot cast `new D()` to `C` because `D` [1] is incompatible with `C` [2].
  References:
    5: (new D: C);
        ^^^^^ [1]: `D`
    5: (new D: C);
               ^ [2]: `C`


Found 1 error
No errors!

Test c:
Error: c2.js:6
  6:   foo({ y: 0 });
           ^^^^^^^^ object literal. This type is incompatible with the expected param type of
  3: export function foo(props: { x: number }) { }
                                ^^^^^^^^^^^^^ object type. See: c1.js:3
  Property `x` is incompatible:
      3: export function foo(props: { x: number }) { }
                                    ^^^^^^^^^^^^^ property `x`. Property not found in. See: c1.js:3
      6:   foo({ y: 0 });
               ^^^^^^^^ object literal

Error: c3.js:5
  5: bar({ x: 0 });
         ^^^^^^^^ object literal. This type is incompatible with the expected param type of
  5: export function bar(props: { y: number }) {
                                ^^^^^^^^^^^^^ object type. See: c2.js:5
  Property `y` is incompatible:
      5: export function bar(props: { y: number }) {
                                    ^^^^^^^^^^^^^ property `y`. Property not found in. See: c2.js:5
      5: bar({ x: 0 });
             ^^^^^^^^ object literal


Found 2 errors
Error: c3.js:5
  5: bar({ x: 0 });
         ^^^^^^^^ object literal. This type is incompatible with the expected param type of
  5: export function bar(props: { y: number }) {
                                ^^^^^^^^^^^^^ object type. See: c2.js:5
  Property `y` is incompatible:
      5: export function bar(props: { y: number }) {
                                    ^^^^^^^^^^^^^ property `y`. Property not found in. See: c2.js:5
      5: bar({ x: 0 });
             ^^^^^^^^ object literal


Found 1 error

Test d:
Error: d2.js:4
  4: export var y: A = x;
                       ^ B. This type is incompatible with
  4: export var y: A = x;
                   ^ A


Found 1 error

Test e:
Error: e2.js:6
  6:   return { type: 'QUX' };
              ^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected return type of
  5: const f = (): Action => {
                   ^^^^^^ union: object type(s)
  Member 1:
    4:   | { type: 'FOO' }
           ^^^^^^^^^^^^^^^ object type. See: e1.js:4
  Error:
    6:   return { type: 'QUX' };
                ^^^^^^^^^^^^^^^ object literal. This type is incompatible with
    4:   | { type: 'FOO' }
           ^^^^^^^^^^^^^^^ object type. See: e1.js:4
    Property `type` is incompatible:
        6:   return { type: 'QUX' };
                            ^^^^^ string. Expected string literal `FOO`, got `QUX` instead
        4:   | { type: 'FOO' }
                       ^^^^^ string literal `FOO`. See: e1.js:4
  Member 2:
    5:   | { type: 'BAR' }
           ^^^^^^^^^^^^^^^ object type. See: e1.js:5
  Error:
    6:   return { type: 'QUX' };
                ^^^^^^^^^^^^^^^ object literal. This type is incompatible with
    5:   | { type: 'BAR' }
           ^^^^^^^^^^^^^^^ object type. See: e1.js:5
    Property `type` is incompatible:
        6:   return { type: 'QUX' };
                            ^^^^^ string. Expected string literal `BAR`, got `QUX` instead
        5:   | { type: 'BAR' }
                       ^^^^^ string literal `BAR`. See: e1.js:5


Found 1 error
No errors!
No errors!

Test f:
Error: f2.js:4
  4: (c: { x: number });
      ^ Cannot cast `c` to object type because in property `x`, string [1] is incompatible with number [2].
  References:
    4: type S = { x: string };
                     ^^^^^^ [1]: string. See: f1.js:4
    4: (c: { x: number });
                ^^^^^^ [2]: number


Found 1 error
No errors!
No errors!
Error: f2.js:4
  4: (c: { x: number });
      ^ Cannot cast `c` to object type because in property `x`, string [1] is incompatible with number [2].
  References:
    4: type S = { x: string };
                     ^^^^^^ [1]: string. See: f1.js:4
    4: (c: { x: number });
                ^^^^^^ [2]: number


Found 1 error

Test g:
No errors!

Test h:
Error: h2.js:3
  3: import type { Foo } from './h1';
                   ^^^ Named import from module `./h1`. This module has no named export called `Foo`.


Found 1 error

Test i:
Error: i2.js:5
  5: foo.p = 0;
     ^^^ object type. Covariant property `p` incompatible with contravariant use in
  5: foo.p = 0;
     ^^^^^ assignment of property `p`


Found 1 error

Test j:
Error: j2.js:5
  5: foo.p = 0;
     ^^^ object type. Covariant property `p` incompatible with contravariant use in
  5: foo.p = 0;
     ^^^^^ assignment of property `p`


Found 1 error

Test l:
No errors!

Test m:
Error: m3.js:6
  6: (x: T<number>);
      ^ Cannot cast `x` to `T` because in type argument `X`, string [1] is incompatible with number [2].
  References:
    5: export var x: T<string> = null;
                       ^^^^^^ [1]: string. See: m1.js:5
    6: (x: T<number>);
             ^^^^^^ [2]: number


Found 1 error

Test k:
Error: k.js:4
  4: (x.p: string);
        ^ property `p`. Property not found in
  4: (x.p: string);
      ^ LibK


Found 1 error
No errors!
Error: k.js:4
  4: (x.p: string);
        ^ property `p`. Property not found in
  4: (x.p: string);
      ^ LibK


Found 1 error
