Error ---------------------------------------------------------------------------------------------------- pred.js:15:10

Cannot return `options.objectMode || options.readableObjectMode || options.writableObjectMode` because undefined [1] is
incompatible with boolean [2].

   pred.js:15:10
                v-----------------
   15|   return options.objectMode
   16|     || options.readableObjectMode
   17|     || options.writableObjectMode; // error, undefined ~> boolean
           ----------------------------^

References:
   pred.js:11:25
   11|   writableObjectMode? : boolean
                               ^^^^^^^ [1]
   pred.js:14:59
   14| function hasObjectMode_bad(options: DuplexStreamOptions): boolean {
                                                                 ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- proper_blaming.js:9:1

Cannot get `x.nope` because property `nope` is missing in null [1].

   proper_blaming.js:9:1
   9| x.nope; // error here
      ^^^^^^

References:
   proper_blaming.js:5:14
   5| type O = {p: null} & E;
                   ^^^^ [1]


Error: test_obj.js:29
 29: var e: E = c; // error
                ^ intersection. This type is incompatible with
 29: var e: E = c; // error
            ^ E
  Member 1:
   33: type C = { [key: string]: number } & { [key: string]: number };
                ^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: lib/lib.js:33
  Error:
   29: var e: E = c; // error
                  ^ c
   29: var e: E = c; // error
              ^ E. This type is incompatible with
   33: type C = { [key: string]: number } & { [key: string]: number };
                ^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: lib/lib.js:33
    Indexable signature is incompatible:
       33: type C = { [key: string]: number } & { [key: string]: number };
                                     ^^^^^^ number. This type is incompatible with. See lib: lib/lib.js:33
       28: type E = { [key: string]: string };
                                     ^^^^^^ string
  Member 2:
   33: type C = { [key: string]: number } & { [key: string]: number };
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: lib/lib.js:33
  Error:
   29: var e: E = c; // error
                  ^ c
   29: var e: E = c; // error
              ^ E. This type is incompatible with
   33: type C = { [key: string]: number } & { [key: string]: number };
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: lib/lib.js:33
    Indexable signature is incompatible:
       33: type C = { [key: string]: number } & { [key: string]: number };
                                                                 ^^^^^^ number. This type is incompatible with. See lib: lib/lib.js:33
       28: type E = { [key: string]: string };
                                     ^^^^^^ string


Found 3 errors
