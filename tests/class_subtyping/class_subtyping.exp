Error ---------------------------------------------------------------------------------------------------- test2.js:7:14

Cannot assign `new C()` to `y` because `C` is incompatible with `B`.

Error: test2.js:7
  7: var y: I.B = new C();
                  ^^^^^^^ Cannot assign `new C()` to `y` because `C` [1] is incompatible with `B` [2].
  References:
    7: var y: I.B = new C();
                    ^^^^^^^ [1]: `C`
    7: var y: I.B = new C();
              ^^^ [2]: `B`

Error ---------------------------------------------------------------------------------------------------- test3.js:6:41

Cannot assign `c` to `a` because in type argument `Z`, boolean is incompatible with array type.

Error: test3.js:6
  6: var a: A<string, number, Array<bool>> = c; // the third type arg is incorrect
                                             ^ Cannot assign `c` to `a` because in type argument `Z`, boolean [1] is incompatible with array type [2].
  References:
    2: class B extends A<string, number, bool> {}
                                         ^^^^ [1]: boolean
    6: var a: A<string, number, Array<bool>> = c; // the third type arg is incorrect
                                ^^^^^^^^^^^ [2]: array type

Error ---------------------------------------------------------------------------------------------------- test4.js:7:20

Cannot call `foo` with object literal bound to `x` because property `f` is missing in object literal but exists in `O`.

Error: test4.js:7
  7: foo((new C: C<O>), { f_: 0 });
                        ^^^^^^^^^ Cannot call `foo` with object literal bound to `x` because property `f` is missing in object literal [1] but exists in `O` [2].
  References:
    7: foo((new C: C<O>), { f_: 0 });
                          ^^^^^^^^^ [1]: object literal
    7: foo((new C: C<O>), { f_: 0 });
                     ^ [2]: `O`

Error --------------------------------------------------------------------------------------------------- test4.js:13:12

Cannot call `foo` with object literal bound to `x` because property `f` is missing in object literal but exists in `O`.

Error: test4.js:13
 13: foo(new D, { f_: 0 });
                ^^^^^^^^^ Cannot call `foo` with object literal bound to `x` because property `f` is missing in object literal [1] but exists in `O` [2].
  References:
   13: foo(new D, { f_: 0 });
                  ^^^^^^^^^ [1]: object literal
    9: class D extends C<O> {
                         ^ [2]: `O`


Found 4 errors
