Error: intersection.js:10
 10: function foo(x: X): A { return x; } // error
                                    ^ Cannot return `x` because `B` [1] is incompatible with `A` [2].
  References:
   10: function foo(x: X): A { return x; } // error
                       ^ [1]: `B`
   10: function foo(x: X): A { return x; } // error
                           ^ [2]: `A`

Error: intersection.js:11
 11: function bar(x: X): B { return x; } // error
                                    ^ Cannot return `x` because `A` [1] is incompatible with `B` [2].
  References:
   11: function bar(x: X): B { return x; } // error
                       ^ [1]: `A`
   11: function bar(x: X): B { return x; } // error
                           ^ [2]: `B`

Error: test.js:7
  7: type A = $Call; // Error: one or more arguments are required.
              ^^^^^ Cannot use type without at least 1 type argument.

Error: test.js:8
  8: type B = $Call<>; // Error: one or more arguments are required.
              ^^^^^^^ Cannot use type without at least 1 type argument.

Error: test.js:13
 13: ((null: mixed): C); // Error: mixed ~> number
             ^^^^^ Cannot cast `null` to `C` because mixed [1] is incompatible with number [2].
  References:
   13: ((null: mixed): C); // Error: mixed ~> number
               ^^^^^ [1]: mixed
   13: ((null: mixed): C); // Error: mixed ~> number
                       ^ [2]: number

Error: test.js:15
 15: (c: empty); // Error: number ~> empty
      ^ Cannot cast `c` to empty because number [1] is incompatible with empty [2].
  References:
   11: declare var c: C;
                      ^ [1]: number
   15: (c: empty); // Error: number ~> empty
           ^^^^^ [2]: empty

Error: test.js:19
 19: (42: D); // Error: number ~> undefined
      ^^ Cannot cast `42` to `D` because number [1] is incompatible with undefined [2].
  References:
   19: (42: D); // Error: number ~> undefined
        ^^ [1]: number
   19: (42: D); // Error: number ~> undefined
            ^ [2]: undefined

Error: test.js:24
 24: ((null: mixed): E); // Error: mixed ~> number
             ^^^^^ Cannot cast `null` to `E` because mixed [1] is incompatible with number [2].
  References:
   24: ((null: mixed): E); // Error: mixed ~> number
               ^^^^^ [1]: mixed
   24: ((null: mixed): E); // Error: mixed ~> number
                       ^ [2]: number

Error: test.js:26
 26: (e: empty); // Error: number ~> empty
      ^ Cannot cast `e` to empty because number [1] is incompatible with empty [2].
  References:
   22: declare var e: E;
                      ^ [1]: number
   26: (e: empty); // Error: number ~> empty
           ^^^^^ [2]: empty

Error: test.js:31
 31: ((null: mixed): F); // Error: mixed ~> number
             ^^^^^ Cannot cast `null` to `F` because mixed [1] is incompatible with number [2].
  References:
   31: ((null: mixed): F); // Error: mixed ~> number
               ^^^^^ [1]: mixed
   31: ((null: mixed): F); // Error: mixed ~> number
                       ^ [2]: number

Error: test.js:33
 33: (f: empty); // Error: number ~> empty
      ^ Cannot cast `f` to empty because number [1] is incompatible with empty [2].
  References:
   29: declare var f: F;
                      ^ [1]: number
   33: (f: empty); // Error: number ~> empty
           ^^^^^ [2]: empty

Error: test.js:38
 38: ((null: mixed): G); // Error: mixed ~> number | string
             ^^^^^ mixed. This type is incompatible with
 38: ((null: mixed): G); // Error: mixed ~> number | string
                     ^ union: `A` | `B`
  Member 1:
   35: type G = $Call<Fn2, number, string>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^ A
  Error:
   38: ((null: mixed): G); // Error: mixed ~> number | string
               ^^^^^ mixed. This type is incompatible with
   35: type G = $Call<Fn2, number, string>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^ number
  Member 2:
   35: type G = $Call<Fn2, number, string>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^ B
  Error:
   38: ((null: mixed): G); // Error: mixed ~> number | string
               ^^^^^ mixed. This type is incompatible with
   35: type G = $Call<Fn2, number, string>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^ string

Error: test.js:39
 39: (g: number); // Error: number | string ~> number
      ^ Cannot cast `g` to number because string [1] is incompatible with number [2].
  References:
   36: declare var g: G;
                      ^ [1]: string
   39: (g: number); // Error: number | string ~> number
           ^^^^^^ [2]: number

Error: test.js:41
 41: (g: empty); // Error: number | string ~> empty
      ^ Cannot cast `g` to empty because number [1] is incompatible with empty [2].
  References:
   36: declare var g: G;
                      ^ [1]: number
   41: (g: empty); // Error: number | string ~> empty
           ^^^^^ [2]: empty

Error: test.js:41
 41: (g: empty); // Error: number | string ~> empty
      ^ Cannot cast `g` to empty because string [1] is incompatible with empty [2].
  References:
   36: declare var g: G;
                      ^ [1]: string
   41: (g: empty); // Error: number | string ~> empty
           ^^^^^ [2]: empty

Error: union.js:6
  6: ((null: mixed): A); // Error: mixed ~> number | string
             ^^^^^ mixed. This type is incompatible with
  6: ((null: mixed): A); // Error: mixed ~> number | string
                     ^ union: `A`(s)
  Member 1:
    3: type A = $Call<(() => number) | (() => string)>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ A
  Error:
    6: ((null: mixed): A); // Error: mixed ~> number | string
               ^^^^^ mixed. This type is incompatible with
    3: type A = $Call<(() => number) | (() => string)>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number
  Member 2:
    3: type A = $Call<(() => number) | (() => string)>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ A
  Error:
    6: ((null: mixed): A); // Error: mixed ~> number | string
               ^^^^^ mixed. This type is incompatible with
    3: type A = $Call<(() => number) | (() => string)>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string

Error: union.js:7
  7: (a: number); // Error: number | string ~> number
      ^ Cannot cast `a` to number because string [1] is incompatible with number [2].
  References:
    4: declare var a: A;
                      ^ [1]: string
    7: (a: number); // Error: number | string ~> number
           ^^^^^^ [2]: number

Error: union.js:9
  9: (a: empty); // Error: number | string ~> empty
      ^ Cannot cast `a` to empty because number [1] is incompatible with empty [2].
  References:
    4: declare var a: A;
                      ^ [1]: number
    9: (a: empty); // Error: number | string ~> empty
           ^^^^^ [2]: empty

Error: union.js:9
  9: (a: empty); // Error: number | string ~> empty
      ^ Cannot cast `a` to empty because string [1] is incompatible with empty [2].
  References:
    4: declare var a: A;
                      ^ [1]: string
    9: (a: empty); // Error: number | string ~> empty
           ^^^^^ [2]: empty

Error: union.js:14
 14: ((null: mixed): B); // Error: mixed ~> number | string
             ^^^^^ mixed. This type is incompatible with
 14: ((null: mixed): B); // Error: mixed ~> number | string
                     ^ union: `B`(s)
  Member 1:
   11: type B = $Call<(<T>(T) => T) | (<T>(any, T) => T), number, string>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B
  Error:
   14: ((null: mixed): B); // Error: mixed ~> number | string
               ^^^^^ mixed. This type is incompatible with
   11: type B = $Call<(<T>(T) => T) | (<T>(any, T) => T), number, string>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number
  Member 2:
   11: type B = $Call<(<T>(T) => T) | (<T>(any, T) => T), number, string>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B
  Error:
   14: ((null: mixed): B); // Error: mixed ~> number | string
               ^^^^^ mixed. This type is incompatible with
   11: type B = $Call<(<T>(T) => T) | (<T>(any, T) => T), number, string>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string

Error: union.js:15
 15: (b: number); // Error: number | string ~> number
      ^ Cannot cast `b` to number because string [1] is incompatible with number [2].
  References:
   12: declare var b: B;
                      ^ [1]: string
   15: (b: number); // Error: number | string ~> number
           ^^^^^^ [2]: number

Error: union.js:17
 17: (b: empty); // Error: number | string ~> empty
      ^ Cannot cast `b` to empty because number [1] is incompatible with empty [2].
  References:
   12: declare var b: B;
                      ^ [1]: number
   17: (b: empty); // Error: number | string ~> empty
           ^^^^^ [2]: empty

Error: union.js:17
 17: (b: empty); // Error: number | string ~> empty
      ^ Cannot cast `b` to empty because string [1] is incompatible with empty [2].
  References:
   12: declare var b: B;
                      ^ [1]: string
   17: (b: empty); // Error: number | string ~> empty
           ^^^^^ [2]: empty

Error: union.js:22
 22: ((null: mixed): C); // Error: mixed ~> number | string
             ^^^^^ mixed. This type is incompatible with
 22: ((null: mixed): C); // Error: mixed ~> number | string
                     ^ union: number | string
  Member 1:
   19: type C = $Call<<T>(T) => T, number | string>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number
  Error:
   22: ((null: mixed): C); // Error: mixed ~> number | string
               ^^^^^ mixed. This type is incompatible with
   19: type C = $Call<<T>(T) => T, number | string>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number
  Member 2:
   19: type C = $Call<<T>(T) => T, number | string>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string
  Error:
   22: ((null: mixed): C); // Error: mixed ~> number | string
               ^^^^^ mixed. This type is incompatible with
   19: type C = $Call<<T>(T) => T, number | string>;
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string

Error: union.js:23
 23: (c: number); // Error: number | string ~> number
      ^ Cannot cast `c` to number because string [1] is incompatible with number [2].
  References:
   20: declare var c: C;
                      ^ [1]: string
   23: (c: number); // Error: number | string ~> number
           ^^^^^^ [2]: number

Error: union.js:25
 25: (c: empty); // Error: number | string ~> empty
      ^ Cannot cast `c` to empty because number [1] is incompatible with empty [2].
  References:
   20: declare var c: C;
                      ^ [1]: number
   25: (c: empty); // Error: number | string ~> empty
           ^^^^^ [2]: empty

Error: union.js:25
 25: (c: empty); // Error: number | string ~> empty
      ^ Cannot cast `c` to empty because string [1] is incompatible with empty [2].
  References:
   20: declare var c: C;
                      ^ [1]: string
   25: (c: empty); // Error: number | string ~> empty
           ^^^^^ [2]: empty


Found 27 errors
