Error: A.js:13
 13: var bad: number = Bad.foo();
                       ^^^^^^^^^ string. This type is incompatible with
 13: var bad: number = Bad.foo();
              ^^^^^^ number

Error: A.js:21
 21: var good: number = Good.foo();
                        ^^^^^^^^^^ string. This type is incompatible with
 21: var good: number = Good.foo();
               ^^^^^^ number

Error: B.js:7
  7: var good: number = A.Good.foo(); // string ~> number
                        ^^^^^^^^^^^^ string. This type is incompatible with
  7: var good: number = A.Good.foo(); // string ~> number
               ^^^^^^ number

Error: B.js:10
 10: var bad_: number = f(); // errors: string ~> number, global object incompatible with `this`
                        ^^^ global object. This type is incompatible with
 13: var bad: number = Bad.foo();
                       ^^^ object literal. See: A.js:13
  Property `foo` is incompatible:
     13: var bad: number = Bad.foo();
                           ^^^ property `foo`. Property not found in. See: A.js:13
     10: var bad_: number = f(); // errors: string ~> number, global object incompatible with `this`
                            ^^^ global object

Error: B.js:10
 10: var bad_: number = f(); // errors: string ~> number, global object incompatible with `this`
                        ^^^ string. This type is incompatible with
 10: var bad_: number = f(); // errors: string ~> number, global object incompatible with `this`
               ^^^^^^ number

Error: B.js:12
 12: var bad: number = A.Bad.foo(); // error: string, number (but `this` types are compatible)
                       ^^^^^^^^^^^ string. This type is incompatible with
 12: var bad: number = A.Bad.foo(); // error: string, number (but `this` types are compatible)
              ^^^^^^ number

Error: non_objects.js:3
  3: Object.assign("123", {a: "foo"});
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `a` of object literal. Property cannot be assigned on
  3: Object.assign("123", {a: "foo"});
                   ^^^^^ string

Error: non_objects.js:4
  4: Object.assign(123, {a: "foo"});
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ property `a` of object literal. Property cannot be assigned on
  4: Object.assign(123, {a: "foo"});
                   ^^^ number

Error: non_objects.js:5
  5: Object.assign({a: "foo"}, 123);
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call of method `assign`. Expected object instead of
  5: Object.assign({a: "foo"}, 123);
                               ^^^ number

Error: spread.js:7
  7: (Object.assign({}, ...arrOfObjs): { foo: number}); // Error: string ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Object.assign(...)` to object type because in property `foo`, string [1] is incompatible with number [2].
  References:
    3: declare var arrOfObjs: Array<{ foo: string }>;
                                           ^^^^^^ [1]: string
    7: (Object.assign({}, ...arrOfObjs): { foo: number}); // Error: string ~> number
                                                ^^^^^^ [2]: number

Error: spread.js:8
  8: (Object.assign({}, ...roArrOfObjs): { foo: number}); // Error: string ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Object.assign(...)` to object type because in property `foo`, string [1] is incompatible with number [2].
  References:
    4: declare var roArrOfObjs: $ReadOnlyArray<{foo: string}>;
                                                     ^^^^^^ [1]: string
    8: (Object.assign({}, ...roArrOfObjs): { foo: number}); // Error: string ~> number
                                                  ^^^^^^ [2]: number

Error: spread.js:9
  9: (Object.assign({}, ...tup): { foo: string, bar: boolean}); // Error: number ~> boolean
      ^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Object.assign(...)` to object type because in property `bar`, number [1] is incompatible with boolean [2].
  References:
    5: declare var tup: [{foo: string}, {bar: number}];
                                              ^^^^^^ [1]: number
    9: (Object.assign({}, ...tup): { foo: string, bar: boolean}); // Error: number ~> boolean
                                                       ^^^^^^^ [2]: boolean

Error: spread.js:13
 13:   ...[{a: 1}, {b: 'foo'}],
                       ^^^^^ Cannot cast `Object.assign(...)` to object type because in property `b`, string [1] is incompatible with boolean literal `true` [2].
  References:
   13:   ...[{a: 1}, {b: 'foo'}],
                         ^^^^^ [1]: string
   15: ): {a: number, b: true, c: boolean}); // Error: 'foo' => true
                         ^^^^ [2]: boolean literal `true`


Found 13 errors
