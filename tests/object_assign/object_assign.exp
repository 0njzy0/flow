Error --------------------------------------------------------------- A.js:13:19

Cannot assign `Bad.foo()` to `bad` because string is incompatible with number.

Error: A.js:13
 13: var bad: number = Bad.foo();
                       ^^^^^^^^^ Cannot assign `Bad.foo()` to `bad` because string [1] is incompatible with number [2].
  References:
    9:   foo: function(): string { return 'hi'; }
                          ^^^^^^ [1]: string
   13: var bad: number = Bad.foo();
                ^^^^^^ [2]: number

Error --------------------------------------------------------------- A.js:21:20

Cannot assign `Good.foo()` to `good` because string is incompatible with number.

Error: A.js:21
 21: var good: number = Good.foo();
                        ^^^^^^^^^^ Cannot assign `Good.foo()` to `good` because string [1] is incompatible with number [2].
  References:
   18:   foo: function(): string { return 'hi'; }
                          ^^^^^^ [1]: string
   21: var good: number = Good.foo();
                 ^^^^^^ [2]: number

Error ---------------------------------------------------------------- B.js:7:20

Cannot assign `A.Good.foo()` to `good` because string is incompatible with
number.

Error: B.js:7
  7: var good: number = A.Good.foo(); // string ~> number
                        ^^^^^^^^^^^^ Cannot assign `A.Good.foo()` to `good` because string [1] is incompatible with number [2].
  References:
   18:   foo: function(): string { return 'hi'; }
                          ^^^^^^ [1]: string. See: A.js:18
    7: var good: number = A.Good.foo(); // string ~> number
                 ^^^^^^ [2]: number

Error --------------------------------------------------------------- B.js:10:20

Cannot assign `f()` to `bad_` because string is incompatible with number.

Error: B.js:10
 10: var bad_: number = f(); // errors: string ~> number, global object incompatible with `this`
                        ^^^ Cannot assign `f()` to `bad_` because string [1] is incompatible with number [2].
  References:
    9:   foo: function(): string { return 'hi'; }
                          ^^^^^^ [1]: string. See: A.js:9
   10: var bad_: number = f(); // errors: string ~> number, global object incompatible with `this`
                 ^^^^^^ [2]: number

Error --------------------------------------------------------------- B.js:10:20

Cannot call `f` because property `foo` is missing in global object but exists in
object literal.

Error: B.js:10
 10: var bad_: number = f(); // errors: string ~> number, global object incompatible with `this`
                        ^ Cannot call `f` because property `foo` is missing in global object [1] but exists in object literal [2].
  References:
   10: var bad_: number = f(); // errors: string ~> number, global object incompatible with `this`
                          ^^^ [1]: global object
    8: var Bad = Object.assign({}, EventEmitter.prototype, {
                               ^^ [2]: object literal. See: A.js:8

Error --------------------------------------------------------------- B.js:12:19

Cannot assign `A.Bad.foo()` to `bad` because string is incompatible with number.

Error: B.js:12
 12: var bad: number = A.Bad.foo(); // error: string, number (but `this` types are compatible)
                       ^^^^^^^^^^^ Cannot assign `A.Bad.foo()` to `bad` because string [1] is incompatible with number [2].
  References:
    9:   foo: function(): string { return 'hi'; }
                          ^^^^^^ [1]: string. See: A.js:9
   12: var bad: number = A.Bad.foo(); // error: string, number (but `this` types are compatible)
                ^^^^^^ [2]: number

Error ------------------------------------------------------- non_objects.js:3:1

Property `a` is missing in string.

Error: non_objects.js:3
  3: Object.assign("123", {a: "foo"});
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Property `a` is missing in string [1].
  References:
    3: Object.assign("123", {a: "foo"});
                     ^^^^^ [1]: string

Error ------------------------------------------------------- non_objects.js:4:1

Property `a` is missing in number.

Error: non_objects.js:4
  4: Object.assign(123, {a: "foo"});
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Property `a` is missing in number [1].
  References:
    4: Object.assign(123, {a: "foo"});
                     ^^^ [1]: number

Error ------------------------------------------------------- non_objects.js:5:1

number is not an object.

Error: non_objects.js:5
  5: Object.assign({a: "foo"}, 123);
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ number [1] is not an object.
  References:
    5: Object.assign({a: "foo"}, 123);
                                 ^^^ [1]: number

Error ------------------------------------------------------------ spread.js:7:2

Cannot cast `Object.assign(...)` to object type because in property `foo`,
string is incompatible with number.

Error: spread.js:7
  7: (Object.assign({}, ...arrOfObjs): { foo: number}); // Error: string ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Object.assign(...)` to object type because in property `foo`, string [1] is incompatible with number [2].
  References:
    3: declare var arrOfObjs: Array<{ foo: string }>;
                                           ^^^^^^ [1]: string
    7: (Object.assign({}, ...arrOfObjs): { foo: number}); // Error: string ~> number
                                                ^^^^^^ [2]: number

Error ------------------------------------------------------------ spread.js:8:2

Cannot cast `Object.assign(...)` to object type because in property `foo`,
string is incompatible with number.

Error: spread.js:8
  8: (Object.assign({}, ...roArrOfObjs): { foo: number}); // Error: string ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Object.assign(...)` to object type because in property `foo`, string [1] is incompatible with number [2].
  References:
    4: declare var roArrOfObjs: $ReadOnlyArray<{foo: string}>;
                                                     ^^^^^^ [1]: string
    8: (Object.assign({}, ...roArrOfObjs): { foo: number}); // Error: string ~> number
                                                  ^^^^^^ [2]: number

Error ------------------------------------------------------------ spread.js:9:2

Cannot cast `Object.assign(...)` to object type because in property `bar`,
number is incompatible with boolean.

Error: spread.js:9
  9: (Object.assign({}, ...tup): { foo: string, bar: boolean}); // Error: number ~> boolean
      ^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Object.assign(...)` to object type because in property `bar`, number [1] is incompatible with boolean [2].
  References:
    5: declare var tup: [{foo: string}, {bar: number}];
                                              ^^^^^^ [1]: number
    9: (Object.assign({}, ...tup): { foo: string, bar: boolean}); // Error: number ~> boolean
                                                       ^^^^^^^ [2]: boolean

Error ---------------------------------------------------------- spread.js:13:19

Cannot cast `Object.assign(...)` to object type because in property `b`, string
is incompatible with boolean literal `true`.

Error: spread.js:13
 13:   ...[{a: 1}, {b: 'foo'}],
                       ^^^^^ Cannot cast `Object.assign(...)` to object type because in property `b`, string [1] is incompatible with boolean literal `true` [2].
  References:
   13:   ...[{a: 1}, {b: 'foo'}],
                         ^^^^^ [1]: string
   15: ): {a: number, b: true, c: boolean}); // Error: 'foo' => true
                         ^^^^ [2]: boolean literal `true`


Found 13 errors
