Error: Traces.js:3
  3: function f0(x) { g0(x) }
                         ^ Cannot call `g0` with `x` bound to `y` because number [1] is incompatible with string [2].
Trace:
* path 1:
  3: function f0(x) { g0(x) }
                         ^ NumT [number]
  2: function g0(y:string) { }
                   ^^^^^^ ~> UseT(FunParam, StrT) [string] (from path 2)
* path 2:
  3: function f0(x) { g0(x) }
                         ^ NumT [number]
  3: function f0(x) { g0(x) }
                         ^ ~> UseT(FunParam, OpenT) [`x`] (from path 3)
  3: function f0(x) { g0(x) }
                         ^ OpenT [`x`]
  3: function f0(x) { g0(x) }
                         ^ ~> ReposLowerT [`x`] (from [not shown])
* path 3:
  4: f0(0);
        ^ NumT [number]
  3: function f0(x) { g0(x) }
                 ^ ~> UseT(FunParam, OpenT) [`x`] (from [not shown])
  3: function f0(x) { g0(x) }
                         ^ ~> ReposLowerT [`x`]
  References:
    4: f0(0);
          ^ [1]: number
    2: function g0(y:string) { }
                     ^^^^^^ [2]: string

Error: Traces.js:8
  8: function f1(x, y) { g1(x, y) }
                               ^ Cannot call `g1` with `y` bound to `b` because number [1] is incompatible with string [2].
Trace:
* path 1:
  8: function f1(x, y) { g1(x, y) }
                               ^ NumT [number]
  7: function g1(a:string, b:string) { }
                             ^^^^^^ ~> UseT(FunParam, StrT) [string] (from path 2)
* path 2:
  8: function f1(x, y) { g1(x, y) }
                               ^ NumT [number]
  8: function f1(x, y) { g1(x, y) }
                               ^ ~> UseT(FunParam, OpenT) [`y`] (from path 3)
  8: function f1(x, y) { g1(x, y) }
                               ^ OpenT [`y`]
  8: function f1(x, y) { g1(x, y) }
                               ^ ~> ReposLowerT [`y`] (from [not shown])
* path 3:
  9: f1("hey", 0);
               ^ NumT [number]
  8: function f1(x, y) { g1(x, y) }
                    ^ ~> UseT(FunParam, OpenT) [`y`] (from [not shown])
  8: function f1(x, y) { g1(x, y) }
                               ^ ~> ReposLowerT [`y`]
  References:
    9: f1("hey", 0);
                 ^ [1]: number
    7: function g1(a:string, b:string) { }
                               ^^^^^^ [2]: string

Error: Traces.js:14
 14: f2(function(x) { return x * x });
                             ^ string. The operand of an arithmetic operation must be a number.
Trace:
* path 1:
 14: f2(function(x) { return x * x });
                             ^ StrT [string]
 14: f2(function(x) { return x * x });
                             ^ ~> UseT(FunParam, OpenT) [`x`] (from path 2)
 14: f2(function(x) { return x * x });
                             ^ OpenT [`x`]
 14: f2(function(x) { return x * x });
                             ^^^^^ ~> AssertArithmeticOperandT [arithmetic operation]
* path 2:
 12: function g2(ylam: (s:string) => number) { }
                          ^^^^^^ StrT [string]
 14: f2(function(x) { return x * x });
                 ^ ~> UseT(FunParam, OpenT) [`x`] (from path 3)
 14: f2(function(x) { return x * x });
                             ^ ~> ReposLowerT [`x`]
* path 3:
 12: function g2(ylam: (s:string) => number) { }
                          ^^^^^^ StrT [string]
 12: function g2(ylam: (s:string) => number) { }
                          ^^^^^^ ~> ReposLowerT [string] (from [not shown])

Error: Traces.js:14
 14: f2(function(x) { return x * x });
                                 ^ string. The operand of an arithmetic operation must be a number.
Trace:
* path 1:
 14: f2(function(x) { return x * x });
                                 ^ StrT [string]
 14: f2(function(x) { return x * x });
                                 ^ ~> UseT(FunParam, OpenT) [`x`] (from path 2)
 14: f2(function(x) { return x * x });
                                 ^ OpenT [`x`]
 14: f2(function(x) { return x * x });
                             ^^^^^ ~> AssertArithmeticOperandT [arithmetic operation]
* path 2:
 12: function g2(ylam: (s:string) => number) { }
                          ^^^^^^ StrT [string]
 14: f2(function(x) { return x * x });
                 ^ ~> UseT(FunParam, OpenT) [`x`] (from path 3)
 14: f2(function(x) { return x * x });
                                 ^ ~> ReposLowerT [`x`]
* path 3:
 12: function g2(ylam: (s:string) => number) { }
                          ^^^^^^ StrT [string]
 12: function g2(ylam: (s:string) => number) { }
                          ^^^^^^ ~> ReposLowerT [string] (from [not shown])

Error: Traces.js:19
 19: function double(n) { return n * 2 }
                                 ^ string. The operand of an arithmetic operation must be a number.
Trace:
* path 1:
 19: function double(n) { return n * 2 }
                                 ^ StrT [string]
 19: function double(n) { return n * 2 }
                                 ^ ~> UseT(FunParam, OpenT) [`n`] (from path 2)
 19: function double(n) { return n * 2 }
                                 ^ OpenT [`n`]
 19: function double(n) { return n * 2 }
                                 ^^^^^ ~> AssertArithmeticOperandT [arithmetic operation]
* path 2:
 17: function g3(ylam: (s:string) => number) { }
                          ^^^^^^ StrT [string]
 19: function double(n) { return n * 2 }
                     ^ ~> UseT(FunParam, OpenT) [`n`] (from path 3)
 19: function double(n) { return n * 2 }
                                 ^ ~> ReposLowerT [`n`]
* path 3:
 17: function g3(ylam: (s:string) => number) { }
                          ^^^^^^ StrT [string]
 17: function g3(ylam: (s:string) => number) { }
                          ^^^^^^ ~> ReposLowerT [string] (from [not shown])

Error: Traces2.js:18
 18:     return <B bar="hey"/>;
                ^^^^^^^^^^^^^^ Cannot return `<B />` because in property `props`, property `foo` is missing in propTypes of React component [1] but exists in propTypes of React component [2].
Trace:
* path 1:
 11:   propTypes: { bar: React.PropTypes.string.isRequired }
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ObjProtoT [object literal]
  7:   propTypes: { foo: React.PropTypes.string.isRequired }
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ~> LookupT [propTypes of React component] (from path 2)
* path 2:
 11:   propTypes: { bar: React.PropTypes.string.isRequired }
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ObjT [propTypes of React component]
  7:   propTypes: { foo: React.PropTypes.string.isRequired }
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ~> UseT(PropertyCompatibility, ObjT) [propTypes of React component] (from path 3)
* path 3:
159:   +props: React$ElementProps<ElementType>,
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ OpenT [`React.ElementProps`]. See lib: <BUILTINS>/react.js:159
159:   +props: React$ElementProps<ElementType>,
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ~> UseT(PropertyCompatibility, OpenT) [`React.ElementProps`] (from [not shown]). See lib: <BUILTINS>/react.js:159
  References:
   11:   propTypes: { bar: React.PropTypes.string.isRequired }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: propTypes of React component
    7:   propTypes: { foo: React.PropTypes.string.isRequired }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: propTypes of React component

Error: Traces2.js:18
 18:     return <B bar="hey"/>;
                 ^ In type argument `Props`, property `bar` is missing in propTypes of React component [1] but exists in propTypes of React component [2].
Trace:
* path 1:
  7:   propTypes: { foo: React.PropTypes.string.isRequired }
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ObjT [propTypes of React component]
 11:   propTypes: { bar: React.PropTypes.string.isRequired }
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ~> UseT(UnifyFlip, ObjT) [propTypes of React component] (from path 2)
* path 2:
 11:   propTypes: { bar: React.PropTypes.string.isRequired }
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ObjT [propTypes of React component]
159:   +props: React$ElementProps<ElementType>,
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ~> UseT(TypeArgCompatibility, OpenT) [`React.ElementProps`] (from path 3). See lib: <BUILTINS>/react.js:159
* path 3:
 18:     return <B bar="hey"/>;
                 ^ InstanceT [`React.Component`]
 18:     return <B bar="hey"/>;
                 ^ ~> ExtendsUseT [extends `React.Component`] (from [not shown])
  References:
    7:   propTypes: { foo: React.PropTypes.string.isRequired }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: propTypes of React component
   11:   propTypes: { bar: React.PropTypes.string.isRequired }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: propTypes of React component

Error: Traces2.js:18
 18:     return <B bar="hey"/>;
                 ^ In type argument `Props`, property `foo` is missing in propTypes of React component [1] but exists in propTypes of React component [2].
Trace:
* path 1:
  7:   propTypes: { foo: React.PropTypes.string.isRequired }
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ObjT [propTypes of React component]
 11:   propTypes: { bar: React.PropTypes.string.isRequired }
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ~> UseT(UnifyFlip, ObjT) [propTypes of React component] (from path 2)
* path 2:
 11:   propTypes: { bar: React.PropTypes.string.isRequired }
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ObjT [propTypes of React component]
159:   +props: React$ElementProps<ElementType>,
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ~> UseT(TypeArgCompatibility, OpenT) [`React.ElementProps`] (from path 3). See lib: <BUILTINS>/react.js:159
* path 3:
 18:     return <B bar="hey"/>;
                 ^ InstanceT [`React.Component`]
 18:     return <B bar="hey"/>;
                 ^ ~> ExtendsUseT [extends `React.Component`] (from [not shown])
  References:
   11:   propTypes: { bar: React.PropTypes.string.isRequired }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: propTypes of React component
    7:   propTypes: { foo: React.PropTypes.string.isRequired }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]: propTypes of React component


Found 8 errors
