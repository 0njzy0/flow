Error: fetch.js:12
 12: const b: Promise<string> = fetch(myRequest); // incorrect
                                ^^^^^^^^^^^^^^^^ Cannot assign `fetch(...)` to `b` because in type argument `R`, `Response` [1] is incompatible with string [2].
  References:
  1002: declare function fetch(input: RequestInfo, init?: RequestOptions): Promise<Response>;
                                                                                   ^^^^^^^^ [1]: `Response`. See lib: <BUILTINS>/bom.js:1002
   12: const b: Promise<string> = fetch(myRequest); // incorrect
                        ^^^^^^ [2]: string

Error: fetch.js:25
 25: const d: Promise<Blob> = fetch('image.png'); // incorrect
                              ^^^^^^^^^^^^^^^^^^ Cannot assign `fetch(...)` to `d` because in type argument `R`, `Blob` [1] is incompatible with `Response` [2].
  References:
   25: const d: Promise<Blob> = fetch('image.png'); // incorrect
                        ^^^^ [1]: `Blob`
  1002: declare function fetch(input: RequestInfo, init?: RequestOptions): Promise<Response>;
                                                                                   ^^^^^^^^ [2]: `Response`. See lib: <BUILTINS>/bom.js:1002

Error: headers.js:3
  3: const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with the expected param type of
886:     constructor(init?: HeadersInit): void;
                            ^^^^^^^^^^^ union: `Headers` | object type. See lib: <BUILTINS>/bom.js:886
  Member 1:
  879: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:879
  Error:
    3: const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  879: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:879
  Member 2:
  879: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:879
  Error:
    3: const a = new Headers("'Content-Type': 'image/jpeg'"); // not correct
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
  879: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:879

Error: headers.js:4
  4: const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with the expected param type of
886:     constructor(init?: HeadersInit): void;
                            ^^^^^^^^^^^ union: `Headers` | object type. See lib: <BUILTINS>/bom.js:886
  Member 1:
  879: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:879
  Error:
    4: const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
  879: type HeadersInit = Headers | {[key: string]: string};
                          ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:879
  Member 2:
  879: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:879
  Error:
    4: const b = new Headers(['Content-Type', 'image/jpeg']); // not correct
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ array literal. This type is incompatible with
  879: type HeadersInit = Headers | {[key: string]: string};
                                    ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:879

Error: headers.js:9
  9: e.append('Content-Type'); // not correct
       ^^^^^^ Cannot call `e.append` because function [1] requires another argument.
  References:
  887:     append(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function. See lib: <BUILTINS>/bom.js:887

Error: headers.js:10
 10: e.append({'Content-Type': 'image/jpeg'}); // not correct
       ^^^^^^ Cannot call `e.append` because function [1] requires another argument.
  References:
  887:     append(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function. See lib: <BUILTINS>/bom.js:887

Error: headers.js:10
 10: e.append({'Content-Type': 'image/jpeg'}); // not correct
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
887:     append(name: string, value: string): void;
                      ^^^^^^ string. See lib: <BUILTINS>/bom.js:887

Error: headers.js:12
 12: e.set('Content-Type'); // not correct
       ^^^ Cannot call `e.set` because function [1] requires another argument.
  References:
  894:     set(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function. See lib: <BUILTINS>/bom.js:894

Error: headers.js:13
 13: e.set({'Content-Type': 'image/jpeg'}); // not correct
       ^^^ Cannot call `e.set` because function [1] requires another argument.
  References:
  894:     set(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function. See lib: <BUILTINS>/bom.js:894

Error: headers.js:13
 13: e.set({'Content-Type': 'image/jpeg'}); // not correct
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
894:     set(name: string, value: string): void;
                   ^^^^^^ string. See lib: <BUILTINS>/bom.js:894

Error: headers.js:15
 15: const f: Headers = e.append('Content-Type', 'image/jpeg'); // not correct
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `e.append(...)` to `f` because undefined [1] is incompatible with `Headers` [2].
  References:
  887:     append(name: string, value: string): void;
                                                ^^^^ [1]: undefined. See lib: <BUILTINS>/bom.js:887
   15: const f: Headers = e.append('Content-Type', 'image/jpeg'); // not correct
                ^^^^^^^ [2]: `Headers`

Error: headers.js:18
 18: const h: number = e.get('Content-Type'); // not correct
                       ^^^^^^^^^^^^^^^^^^^^^ Cannot assign `e.get(...)` to `h` because string [1] is incompatible with number [2].
  References:
  891:     get(name: string): string;
                              ^^^^^^ [1]: string. See lib: <BUILTINS>/bom.js:891
   18: const h: number = e.get('Content-Type'); // not correct
                ^^^^^^ [2]: number

Error: headers.js:28
 28: e.getAll('content-type'); // incorrect
       ^^^^^^ property `getAll`. Property not found in
 28: e.getAll('content-type'); // incorrect
     ^ Headers

Error: request.js:2
  2: const a: Request = new Request(); // incorrect
                            ^^^^^^^ Cannot call `Request` because function [1] requires another argument.
  References:
  977:     constructor(input: RequestInfo, init?: RequestOptions): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function. See lib: <BUILTINS>/bom.js:977

Error: request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Cannot call `Request` with `c` bound to `init` because in property `cache`, string enum [1] is incompatible with undefined [2].
  References:
  982:     cache: CacheType;
                  ^^^^^^^^^ [1]: string enum. See lib: <BUILTINS>/bom.js:982
  931:     cache?: CacheType;
                   ^^^^^^^^^ [2]: undefined. See lib: <BUILTINS>/bom.js:931

Error: request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Cannot call `Request` with `c` bound to `init` because in property `credentials`, string enum [1] is incompatible with undefined [2].
  References:
  983:     credentials: CredentialsType;
                        ^^^^^^^^^^^^^^^ [1]: string enum. See lib: <BUILTINS>/bom.js:983
  932:     credentials?: CredentialsType;
                         ^^^^^^^^^^^^^^^ [2]: undefined. See lib: <BUILTINS>/bom.js:932

Error: request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Cannot call `Request` with `c` bound to `init` because in property `headers`, `Headers` [1] is incompatible with object type [2].
  References:
  984:     headers: Headers;
                    ^^^^^^^ [1]: `Headers`. See lib: <BUILTINS>/bom.js:984
  933:     headers?: HeadersInit;
                     ^^^^^^^^^^^ [2]: object type. See lib: <BUILTINS>/bom.js:933

Error: request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Cannot call `Request` with `c` bound to `init` because in property `headers`, `Headers` [1] is incompatible with undefined [2].
  References:
  984:     headers: Headers;
                    ^^^^^^^ [1]: `Headers`. See lib: <BUILTINS>/bom.js:984
  933:     headers?: HeadersInit;
                     ^^^^^^^^^^^ [2]: undefined. See lib: <BUILTINS>/bom.js:933

Error: request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Cannot call `Request` with `c` bound to `init` because in property `integrity`, string [1] is incompatible with undefined [2].
  References:
  985:     integrity: string;
                      ^^^^^^ [1]: string. See lib: <BUILTINS>/bom.js:985
  934:     integrity?: string;
                       ^^^^^^ [2]: undefined. See lib: <BUILTINS>/bom.js:934

Error: request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Cannot call `Request` with `c` bound to `init` because in property `method`, string [1] is incompatible with undefined [2].
  References:
  986:     method: string;
                   ^^^^^^ [1]: string. See lib: <BUILTINS>/bom.js:986
  936:     method?: string;
                    ^^^^^^ [2]: undefined. See lib: <BUILTINS>/bom.js:936

Error: request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Cannot call `Request` with `c` bound to `init` because in property `mode`, string enum [1] is incompatible with undefined [2].
  References:
  987:     mode: ModeType;
                 ^^^^^^^^ [1]: string enum. See lib: <BUILTINS>/bom.js:987
  937:     mode?: ModeType;
                  ^^^^^^^^ [2]: undefined. See lib: <BUILTINS>/bom.js:937

Error: request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Cannot call `Request` with `c` bound to `init` because in property `redirect`, string enum [1] is incompatible with undefined [2].
  References:
  988:     redirect: RedirectType;
                     ^^^^^^^^^^^^ [1]: string enum. See lib: <BUILTINS>/bom.js:988
  938:     redirect?: RedirectType;
                      ^^^^^^^^^^^^ [2]: undefined. See lib: <BUILTINS>/bom.js:938

Error: request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Cannot call `Request` with `c` bound to `init` because in property `referrer`, string [1] is incompatible with undefined [2].
  References:
  989:     referrer: string;
                     ^^^^^^ [1]: string. See lib: <BUILTINS>/bom.js:989
  939:     referrer?: string;
                      ^^^^^^ [2]: undefined. See lib: <BUILTINS>/bom.js:939

Error: request.js:6
  6: const e: Request = new Request(b, c); // incorrect
                                       ^ Cannot call `Request` with `c` bound to `init` because in property `referrerPolicy`, string enum [1] is incompatible with undefined [2].
  References:
  990:     referrerPolicy: ReferrerPolicyType;
                           ^^^^^^^^^^^^^^^^^^ [1]: string enum. See lib: <BUILTINS>/bom.js:990
  940:     referrerPolicy?: ReferrerPolicyType;
                            ^^^^^^^^^^^^^^^^^^ [2]: undefined. See lib: <BUILTINS>/bom.js:940

Error: request.js:8
  8: const f: Request = new Request({}) // incorrect
                                    ^^ object literal. This type is incompatible with the expected param type of
977:     constructor(input: RequestInfo, init?: RequestOptions): void;
                            ^^^^^^^^^^^ union: `Request` | `URL` | string. See lib: <BUILTINS>/bom.js:977
  Member 1:
  926: type RequestInfo = Request | URL | string;
                          ^^^^^^^ Request. See lib: <BUILTINS>/bom.js:926
  Error:
    8: const f: Request = new Request({}) // incorrect
                                      ^^ object literal. This type is incompatible with
  926: type RequestInfo = Request | URL | string;
                          ^^^^^^^ Request. See lib: <BUILTINS>/bom.js:926
  Member 2:
  926: type RequestInfo = Request | URL | string;
                                    ^^^ URL. See lib: <BUILTINS>/bom.js:926
  Error:
    8: const f: Request = new Request({}) // incorrect
                                      ^^ object literal. This type is incompatible with
  926: type RequestInfo = Request | URL | string;
                                    ^^^ URL. See lib: <BUILTINS>/bom.js:926

Error: request.js:24
 24: h.text().then((t: Buffer) => t); // incorrect
                       ^^^^^^ Cannot call `h.text().then` with function bound to `onFulfill` because in the first argument, `Buffer` [1] is incompatible with string [2].
  References:
   24: h.text().then((t: Buffer) => t); // incorrect
                         ^^^^^^ [1]: `Buffer`
  999:     text(): Promise<string>;
                           ^^^^^^ [2]: string. See lib: <BUILTINS>/bom.js:999

Error: request.js:26
 26: h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                               ^^^^^^ Cannot call `h.arrayBuffer().then` with function bound to `onFulfill` because in the first argument, `ArrayBuffer` [1] is incompatible with `Buffer` [2].
  References:
  995:     arrayBuffer(): Promise<ArrayBuffer>;
                                  ^^^^^^^^^^^ [1]: `ArrayBuffer`. See lib: <BUILTINS>/bom.js:995
   26: h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                                 ^^^^^^ [2]: `Buffer`

Error: request.js:54
                                                          v
 54: const l: Request = new Request('http://example.org', {
 55:   method: 'GET',
 56:   headers: 'Content-Type: image/jpeg',
...:
 59: }) // incorrect - headers is string
     ^ object literal. This type is incompatible with the expected param type of
977:     constructor(input: RequestInfo, init?: RequestOptions): void;
                                                ^^^^^^^^^^^^^^ RequestOptions. See lib: <BUILTINS>/bom.js:977
  Property `headers` is incompatible:
     56:   headers: 'Content-Type: image/jpeg',
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
    933:     headers?: HeadersInit;
                       ^^^^^^^^^^^ union: `Headers` | object type. See lib: <BUILTINS>/bom.js:933
      Member 1:
      879: type HeadersInit = Headers | {[key: string]: string};
                              ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:879
      Error:
       56:   headers: 'Content-Type: image/jpeg',
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
      879: type HeadersInit = Headers | {[key: string]: string};
                              ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:879
      Member 2:
      879: type HeadersInit = Headers | {[key: string]: string};
                                        ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:879
      Error:
       56:   headers: 'Content-Type: image/jpeg',
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
      879: type HeadersInit = Headers | {[key: string]: string};
                                        ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:879

Error: request.js:63
 63: new Request('/', { method: null }); // incorrect
                                ^^^^ Cannot call `Request` with object literal bound to `init` because in property `method`, null [1] is incompatible with string [2].
  References:
   63: new Request('/', { method: null }); // incorrect
                                  ^^^^ [1]: null
  936:     method?: string;
                    ^^^^^^ [2]: string. See lib: <BUILTINS>/bom.js:936

Error: response.js:8
  8: new Response("", { status: "404" }); // incorrect
                                ^^^^^ Cannot call `Response` with object literal bound to `init` because in property `status`, string [1] is incompatible with number [2].
  References:
    8: new Response("", { status: "404" }); // incorrect
                                  ^^^^^ [1]: string
  945:     status?: number;
                    ^^^^^^ [2]: number. See lib: <BUILTINS>/bom.js:945

Error: response.js:9
  9: new Response("", { status: null }); // incorrect
                                ^^^^ Cannot call `Response` with object literal bound to `init` because in property `status`, null [1] is incompatible with number [2].
  References:
    9: new Response("", { status: null }); // incorrect
                                  ^^^^ [1]: null
  945:     status?: number;
                    ^^^^^^ [2]: number. See lib: <BUILTINS>/bom.js:945

Error: response.js:11
                                                      v
 11: const f: Response = new Response("responsebody", {
 12:     status: 404,
 13:     headers: "'Content-Type': 'image/jpeg'"
 14: }); // incorrect
     ^ object literal. This type is incompatible with the expected param type of
951:     constructor(input?: ?BodyInit, init?: ResponseOptions): void;
                                               ^^^^^^^^^^^^^^^ ResponseOptions. See lib: <BUILTINS>/bom.js:951
  Property `headers` is incompatible:
     13:     headers: "'Content-Type': 'image/jpeg'"
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
    947:     headers?: HeadersInit
                       ^^^^^^^^^^^ union: `Headers` | object type. See lib: <BUILTINS>/bom.js:947
      Member 1:
      879: type HeadersInit = Headers | {[key: string]: string};
                              ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:879
      Error:
       13:     headers: "'Content-Type': 'image/jpeg'"
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
      879: type HeadersInit = Headers | {[key: string]: string};
                              ^^^^^^^ Headers. See lib: <BUILTINS>/bom.js:879
      Member 2:
      879: type HeadersInit = Headers | {[key: string]: string};
                                        ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:879
      Error:
       13:     headers: "'Content-Type': 'image/jpeg'"
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string. This type is incompatible with
      879: type HeadersInit = Headers | {[key: string]: string};
                                        ^^^^^^^^^^^^^^^^^^^^^^^ object type. See lib: <BUILTINS>/bom.js:879

Error: response.js:30
                                      v
 30: const i: Response = new Response({
 31:     status: 404,
 32:     headers: new Headers({
...:
 35: }); // incorrect
     ^ object literal. This type is incompatible with the expected param type of
951:     constructor(input?: ?BodyInit, init?: ResponseOptions): void;
                              ^^^^^^^^ union: string | `URLSearchParams` | `FormData` | `Blob` | `ArrayBuffer` | `$ArrayBufferView`. See lib: <BUILTINS>/bom.js:951
  Member 2:
  924: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:924
  Error:
                                        v
   30: const i: Response = new Response({
   31:     status: 404,
   32:     headers: new Headers({
  ...:
   35: }); // incorrect
       ^ object literal. This type is incompatible with
  924: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                ^^^^^^^^^^^^^^^ URLSearchParams. See lib: <BUILTINS>/bom.js:924
  Member 3:
  924: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                  ^^^^^^^^ FormData. See lib: <BUILTINS>/bom.js:924
  Error:
                                        v
   30: const i: Response = new Response({
   31:     status: 404,
   32:     headers: new Headers({
  ...:
   35: }); // incorrect
       ^ object literal. This type is incompatible with
  924: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                  ^^^^^^^^ FormData. See lib: <BUILTINS>/bom.js:924
  Member 4:
  924: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                             ^^^^ Blob. See lib: <BUILTINS>/bom.js:924
  Error:
                                        v
   30: const i: Response = new Response({
   31:     status: 404,
   32:     headers: new Headers({
  ...:
   35: }); // incorrect
       ^ object literal. This type is incompatible with
  924: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                             ^^^^ Blob. See lib: <BUILTINS>/bom.js:924
  Member 5:
  924: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                                    ^^^^^^^^^^^ ArrayBuffer. See lib: <BUILTINS>/bom.js:924
  Error:
                                        v
   30: const i: Response = new Response({
   31:     status: 404,
   32:     headers: new Headers({
  ...:
   35: }); // incorrect
       ^ object literal. This type is incompatible with
  924: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                                    ^^^^^^^^^^^ ArrayBuffer. See lib: <BUILTINS>/bom.js:924
  Member 6:
  924: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                                                  ^^^^^^^^^^^^^^^^ $ArrayBufferView. See lib: <BUILTINS>/bom.js:924
  Error:
                                        v
   30: const i: Response = new Response({
   31:     status: 404,
   32:     headers: new Headers({
  ...:
   35: }); // incorrect
       ^ object literal. This type is incompatible with
  924: type BodyInit = string | URLSearchParams | FormData | Blob | ArrayBuffer | $ArrayBufferView;
                                                                                  ^^^^^^^^^^^^^^^^ union: `$TypedArray` | `DataView`. See lib: <BUILTINS>/bom.js:924
    Member 1:
    628: type $ArrayBufferView = $TypedArray | DataView;
                                 ^^^^^^^^^^^ $TypedArray. See lib: <BUILTINS>/core.js:628
    Error:
                                          v
     30: const i: Response = new Response({
     31:     status: 404,
     32:     headers: new Headers({
    ...:
     35: }); // incorrect
         ^ object literal. This type is incompatible with
    628: type $ArrayBufferView = $TypedArray | DataView;
                                 ^^^^^^^^^^^ $TypedArray. See lib: <BUILTINS>/core.js:628
    Member 2:
    628: type $ArrayBufferView = $TypedArray | DataView;
                                               ^^^^^^^^ DataView. See lib: <BUILTINS>/core.js:628
    Error:
                                          v
     30: const i: Response = new Response({
     31:     status: 404,
     32:     headers: new Headers({
    ...:
     35: }); // incorrect
         ^ object literal. This type is incompatible with
    628: type $ArrayBufferView = $TypedArray | DataView;
                                               ^^^^^^^^ DataView. See lib: <BUILTINS>/core.js:628

Error: response.js:42
 42: h.text().then((t: Buffer) => t); // incorrect
                       ^^^^^^ Cannot call `h.text().then` with function bound to `onFulfill` because in the first argument, `Buffer` [1] is incompatible with string [2].
  References:
   42: h.text().then((t: Buffer) => t); // incorrect
                         ^^^^^^ [1]: `Buffer`
  973:     text(): Promise<string>;
                           ^^^^^^ [2]: string. See lib: <BUILTINS>/bom.js:973

Error: response.js:44
 44: h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                               ^^^^^^ Cannot call `h.arrayBuffer().then` with function bound to `onFulfill` because in the first argument, `ArrayBuffer` [1] is incompatible with `Buffer` [2].
  References:
  969:     arrayBuffer(): Promise<ArrayBuffer>;
                                  ^^^^^^^^^^^ [1]: `ArrayBuffer`. See lib: <BUILTINS>/bom.js:969
   44: h.arrayBuffer().then((ab: Buffer) => ab); // incorrect
                                 ^^^^^^ [2]: `Buffer`

Error: urlsearchparams.js:4
  4: const b = new URLSearchParams(['key1', 'value1']); // not correct
                                    ^^^^^^ Cannot call `URLSearchParams` with array literal bound to `query` because in type argument `T`, string [1] is incompatible with tuple type [2].
  References:
    4: const b = new URLSearchParams(['key1', 'value1']); // not correct
                                      ^^^^^^ [1]: string
  900:     constructor(query?: string | URLSearchParams | Array<[string, string]> | {[string]: string} ): void;
                                                                ^^^^^^^^^^^^^^^^ [2]: tuple type. See lib: <BUILTINS>/bom.js:900

Error: urlsearchparams.js:4
  4: const b = new URLSearchParams(['key1', 'value1']); // not correct
                                            ^^^^^^^^ Cannot call `URLSearchParams` with array literal bound to `query` because in type argument `T`, string [1] is incompatible with tuple type [2].
  References:
    4: const b = new URLSearchParams(['key1', 'value1']); // not correct
                                              ^^^^^^^^ [1]: string
  900:     constructor(query?: string | URLSearchParams | Array<[string, string]> | {[string]: string} ): void;
                                                                ^^^^^^^^^^^^^^^^ [2]: tuple type. See lib: <BUILTINS>/bom.js:900

Error: urlsearchparams.js:9
  9: e.append('key1'); // not correct
       ^^^^^^ Cannot call `e.append` because function [1] requires another argument.
  References:
  901:     append(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function. See lib: <BUILTINS>/bom.js:901

Error: urlsearchparams.js:10
 10: e.append({'key1': 'value1'}); // not correct
       ^^^^^^ Cannot call `e.append` because function [1] requires another argument.
  References:
  901:     append(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function. See lib: <BUILTINS>/bom.js:901

Error: urlsearchparams.js:10
 10: e.append({'key1': 'value1'}); // not correct
              ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
901:     append(name: string, value: string): void;
                      ^^^^^^ string. See lib: <BUILTINS>/bom.js:901

Error: urlsearchparams.js:12
 12: e.set('key1'); // not correct
       ^^^ Cannot call `e.set` because function [1] requires another argument.
  References:
  909:     set(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function. See lib: <BUILTINS>/bom.js:909

Error: urlsearchparams.js:13
 13: e.set({'key1': 'value1'}); // not correct
       ^^^ Cannot call `e.set` because function [1] requires another argument.
  References:
  909:     set(name: string, value: string): void;
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function. See lib: <BUILTINS>/bom.js:909

Error: urlsearchparams.js:13
 13: e.set({'key1': 'value1'}); // not correct
           ^^^^^^^^^^^^^^^^^^ object literal. This type is incompatible with the expected param type of
909:     set(name: string, value: string): void;
                   ^^^^^^ string. See lib: <BUILTINS>/bom.js:909

Error: urlsearchparams.js:15
 15: const f: URLSearchParams = e.append('key1', 'value1'); // not correct
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `e.append(...)` to `f` because undefined [1] is incompatible with `URLSearchParams` [2].
  References:
  901:     append(name: string, value: string): void;
                                                ^^^^ [1]: undefined. See lib: <BUILTINS>/bom.js:901
   15: const f: URLSearchParams = e.append('key1', 'value1'); // not correct
                ^^^^^^^^^^^^^^^ [2]: `URLSearchParams`

Error: urlsearchparams.js:18
 18: const h: number = e.get('key1'); // not correct
                       ^^^^^^^^^^^^^ Cannot assign `e.get(...)` to `h` because string [1] is incompatible with number [2].
  References:
  905:     get(name: string): string;
                              ^^^^^^ [1]: string. See lib: <BUILTINS>/bom.js:905
   18: const h: number = e.get('key1'); // not correct
                ^^^^^^ [2]: number


Found 45 errors
