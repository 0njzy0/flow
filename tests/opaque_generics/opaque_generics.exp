Error ------------------------------------------------------------------------------------- importtest-polarity.js:10:12

Cannot return `x` because in type argument `T`, string is incompatible with number.

Error: importtest-polarity.js:10
 10:     return x;
                ^ Cannot return `x` because in type argument `T`, string [1] is incompatible with number [2].
  References:
    9: function test2(x: Covariant<number | string>) : Covariant<number> { // Error number | string ~> number
                                            ^^^^^^ [1]: string
    9: function test2(x: Covariant<number | string>) : Covariant<number> { // Error number | string ~> number
                                                                 ^^^^^^ [2]: number

Error ------------------------------------------------------------------------------------- importtest-polarity.js:18:12

Cannot return `x` because in type argument `T`, number is incompatible with string.

Error: importtest-polarity.js:18
 18:     return x;
                ^ Cannot return `x` because in type argument `T`, number [1] is incompatible with string [2].
  References:
   17: function test4(x: Contravariant<number>) : Contravariant<number | string> { // Error: number | string ~> number
                                       ^^^^^^ [1]: number
   17: function test4(x: Contravariant<number>) : Contravariant<number | string> { // Error: number | string ~> number
                                                                         ^^^^^^ [2]: string

Error ------------------------------------------------------------------------------------- importtest-polarity.js:26:12

Cannot return `x` because in type argument `T`, number is incompatible with string.

Error: importtest-polarity.js:26
 26:     return x;
                ^ Cannot return `x` because in type argument `T`, number [1] is incompatible with string [2].
  References:
   25: function test6(x: Invariant<number>) : Invariant<number | string> { // Error: number ~> number | string
                                   ^^^^^^ [1]: number
   25: function test6(x: Invariant<number>) : Invariant<number | string> { // Error: number ~> number | string
                                                                 ^^^^^^ [2]: string

Error ------------------------------------------------------------------------------------- importtest-polarity.js:30:12

Cannot return `x` because in type argument `T`, string is incompatible with number.

Error: importtest-polarity.js:30
 30:     return x;
                ^ Cannot return `x` because in type argument `T`, string [1] is incompatible with number [2].
  References:
   29: function test7(x: Invariant<number | string>) : Invariant<number> { // Error: number | string != number
                                            ^^^^^^ [1]: string
   29: function test7(x: Invariant<number | string>) : Invariant<number> { // Error: number | string != number
                                                                 ^^^^^^ [2]: number

Error: importtest-polarity.js:39
 39:     return x;
                ^ All. This type is incompatible with the expected return type of
 38: function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ All
  Type argument `U` is incompatible:
     38: function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                                                                                           ^^^^ null. This type is incompatible with
     38: function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                        ^^^^^^^^^^^^^^^ union: number | string
      Member 1:
       38: function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                          ^^^^^^ number
      Error:
       38: function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                                                                                             ^^^^ null. This type is incompatible with
       38: function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                          ^^^^^^ number
      Member 2:
       38: function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                                   ^^^^^^ string
      Error:
       38: function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                                                                                             ^^^^ null. This type is incompatible with
       38: function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                                   ^^^^^^ string

Error ------------------------------------------------------------------------------------- importtest-polarity.js:39:12

Cannot return `x` because in type argument `S`, number is incompatible with string.

Error: importtest-polarity.js:39
 39:     return x;
                ^ Cannot return `x` because in type argument `S`, number [1] is incompatible with string [2].
  References:
   38: function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                             ^^^^^^ [1]: number
   38: function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                                                       ^^^^^^ [2]: string

Error ------------------------------------------------------------------------------------- importtest-polarity.js:39:12

Cannot return `x` because in type argument `T`, string is incompatible with number.

Error: importtest-polarity.js:39
 39:     return x;
                ^ Cannot return `x` because in type argument `T`, string [1] is incompatible with number [2].
  References:
   38: function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                              ^^^^^^ [1]: string
   38: function test9(x: All<number, number | string, number | string>) : All<number | string, number, number | string | null> { // Errors: number != number | string (invariant), number | string ~> number (covariant), number | string ~> number | string | null (contravariant)
                                                                                               ^^^^^^ [2]: number

Error ----------------------------------------------------------------------------------------------- importtest.js:7:12

Cannot return `x` because in type argument `T`, string is incompatible with number.

Error: importtest.js:7
  7:     return x;
                ^ Cannot return `x` because in type argument `T`, string [1] is incompatible with number [2].
  References:
    6: function test1(x : Box<string>) : Box<number> { // Error: string ~> number
                              ^^^^^^ [1]: string
    6: function test1(x : Box<string>) : Box<number> { // Error: string ~> number
                                             ^^^^^^ [2]: number

Error ---------------------------------------------------------------------------------------------- importtest.js:15:12

Cannot return `x` because in type argument `T`, string is incompatible with number.

Error: importtest.js:15
 15:     return x;
                ^ Cannot return `x` because in type argument `T`, string [1] is incompatible with number [2].
  References:
   14: function test3(x : Container<string>) : Container<number> { // Error: string ~> number
                                    ^^^^^^ [1]: string
   14: function test3(x : Container<string>) : Container<number> { // Error: string ~> number
                                                         ^^^^^^ [2]: number

Error ---------------------------------------------------------------------------------------------- importtest.js:23:12

Cannot return `x` because `Container` is incompatible with `Box`.

Error: importtest.js:23
 23:     return x;
                ^ Cannot return `x` because `Container` [1] is incompatible with `Box` [2].
  References:
   22: function test5(x : Container<string>) : Box<string> { // Error: Container ~> Box
                          ^^^^^^^^^^^^^^^^^ [1]: `Container`
   22: function test5(x : Container<string>) : Box<string> { // Error: Container ~> Box
                                               ^^^^^^^^^^^ [2]: `Box`

Error ---------------------------------------------------------------------------------------------- importtest.js:27:12

Cannot return `x` because `Box` is incompatible with `Container`.

Error: importtest.js:27
 27:     return x;
                ^ Cannot return `x` because `Box` [1] is incompatible with `Container` [2].
  References:
   26: function test6(x : Box<string>) : Container<string> { // Error: Box ~> Container
                          ^^^^^^^^^^^ [1]: `Box`
   26: function test6(x : Box<string>) : Container<string> { // Error: Box ~> Container
                                         ^^^^^^^^^^^^^^^^^ [2]: `Container`

Error ------------------------------------------------------------------------------------------- test-polarity.js:12:28

Cannot use `T` in an output position because `T` is expected to occur only in input positions.

Error: test-polarity.js:12
 12: opaque type Bad1<-T> = Foo<T>; // Error: Foo expects covariant type
                                ^ Cannot use `T` [1] in an output position because `T` [1] is expected to occur only in input positions.
  References:
   12: opaque type Bad1<-T> = Foo<T>; // Error: Foo expects covariant type
                         ^ [1]: `T`

Error ------------------------------------------------------------------------------------------- test-polarity.js:13:28

Cannot use `T` in an input position because `T` is expected to occur only in output positions.

Error: test-polarity.js:13
 13: opaque type Bad2<+T> = Bar<T>; // Error: Bar expects contravariant type
                                ^ Cannot use `T` [1] in an input position because `T` [1] is expected to occur only in output positions.
  References:
   13: opaque type Bad2<+T> = Bar<T>; // Error: Bar expects contravariant type
                         ^ [1]: `T`

Error ------------------------------------------------------------------------------------------- test-polarity.js:14:28

Cannot use `T` in an input/output position because `T` is expected to occur only in input positions.

Error: test-polarity.js:14
 14: opaque type Bad3<-T> = Baz<T>; // Error: Baz expects invariant type
                                ^ Cannot use `T` [1] in an input/output position because `T` [1] is expected to occur only in input positions.
  References:
   14: opaque type Bad3<-T> = Baz<T>; // Error: Baz expects invariant type
                         ^ [1]: `T`

Error ------------------------------------------------------------------------------------------- test-polarity.js:15:28

Cannot use `T` in an input/output position because `T` is expected to occur only in output positions.

Error: test-polarity.js:15
 15: opaque type Bad4<+T> = Baz<T>; // Error: Baz expects invariant type
                                ^ Cannot use `T` [1] in an input/output position because `T` [1] is expected to occur only in output positions.
  References:
   15: opaque type Bad4<+T> = Baz<T>; // Error: Baz expects invariant type
                         ^ [1]: `T`

Error ----------------------------------------------------------------------------------------------------- test.js:7:12

Cannot return `x` because in type argument `T`, string is incompatible with number.

Error: test.js:7
  7:     return x;
                ^ Cannot return `x` because in type argument `T`, string [1] is incompatible with number [2].
  References:
    6: function test1(x : Box<string>) : Box<number> { // Error: string ~> number
                              ^^^^^^ [1]: string
    6: function test1(x : Box<string>) : Box<number> { // Error: string ~> number
                                             ^^^^^^ [2]: number

Error ---------------------------------------------------------------------------------------------------- test.js:15:12

Cannot return `x` because in type argument `T`, string is incompatible with number.

Error: test.js:15
 15:     return x;
                ^ Cannot return `x` because in type argument `T`, string [1] is incompatible with number [2].
  References:
   14: function test3(x : Container<string>) : Container<number> { // Error: string ~> number
                                    ^^^^^^ [1]: string
   14: function test3(x : Container<string>) : Container<number> { // Error: string ~> number
                                                         ^^^^^^ [2]: number


Found 17 errors
