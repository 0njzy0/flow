Error: generic.js:1
  1: function x<T>(x: T = 0) {}
                          ^ number [1] is incompatible with `T` [2].
  References:
    1: function x<T>(x: T = 0) {}
                            ^ [1]: number
    1: function x<T>(x: T = 0) {}
                        ^ [2]: `T`

Error: generic.js:4
  4:   x<T>(x: T = 0) {}
                   ^ number [1] is incompatible with `T` [2].
  References:
    4:   x<T>(x: T = 0) {}
                     ^ [1]: number
    4:   x<T>(x: T = 0) {}
                 ^ [2]: `T`

Error: loop.js:5
  5: function f<T:*>(x:T,y?:T) { x = y }
                                     ^ Cannot assign `y` to `x` because undefined [1] is incompatible with `T` [2].
  References:
    5: function f<T:*>(x:T,y?:T) { x = y }
                              ^ [1]: undefined
    5: function f<T:*>(x:T,y?:T) { x = y }
                         ^ [2]: `T`

Error: nullable.js:17
 17:     x.y++; // should error
         ^^^ null or undefined. The operand of an arithmetic operation must be a number.

Error: nullable.js:17
 17:     x.y++; // should error
         ^^^ undefined. The operand of an arithmetic operation must be a number.

Error: nullable.js:23
 23:     x.y++; // should error
         ^^^ null or undefined. The operand of an arithmetic operation must be a number.

Error: nullable.js:23
 23:     x.y++; // should error
         ^^^ undefined. The operand of an arithmetic operation must be a number.

Error: nullable.js:29
 29:     x.y++; // should error
         ^^^ null or undefined. The operand of an arithmetic operation must be a number.

Error: nullable.js:29
 29:     x.y++; // should error
         ^^^ undefined. The operand of an arithmetic operation must be a number.

Error: nullable.js:35
 35:     x.y++; // should error
         ^^^ null or undefined. The operand of an arithmetic operation must be a number.

Error: nullable.js:35
 35:     x.y++; // should error
         ^^^ undefined. The operand of an arithmetic operation must be a number.

Error: optional.js:1
  1: function bar(x?,y?) { x * 0; }
                           ^ undefined. The operand of an arithmetic operation must be a number.

Error: optional.js:7
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                  ^ x. Missing annotation

Error: optional.js:7
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                               ^ rest parameter `y`. Missing annotation

Error: optional.js:7
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                                               ^ string. This type is incompatible with the expected param type of
  4: var foo:(x?:number)=>void = bar;
                 ^^^^^^ number

Error: optional.js:7
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                                                          ^^^^ number. This type is incompatible with the expected return type of
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                                  ^^^^^^ string

Error: optional_param2.js:7
  7: var j:I<number> = i.map(id => id);
                                   ^^ Cannot assign `i.map(...)` to `j` because in type argument `V`, undefined [1] is incompatible with number [2].
  References:
    3:         mapper: (value?: V) => M
                                ^ [1]: undefined
    7: var j:I<number> = i.map(id => id);
               ^^^^^^ [2]: number

Error: optional_param4.js:12
 12: foo(true); // ERROR boolean ~> number
         ^^^^ boolean. This type is incompatible with the expected param type of
  3: function foo(x?: number, ...y: Array<string>): [?number, Array<string>] {
                      ^^^^^^ number

Error: optional_param4.js:13
 13: foo(123, true); // ERROR boolean ~> string
              ^^^^ Cannot call `foo` because in the rest argument and then type argument `T`, boolean [1] is incompatible with string [2].
  References:
   13: foo(123, true); // ERROR boolean ~> string
                ^^^^ [1]: boolean
    3: function foo(x?: number, ...y: Array<string>): [?number, Array<string>] {
                                            ^^^^^^ [2]: string

Error: undefined.js:8
  8:     return x.duck;
                  ^^^^ property `duck`. Property cannot be accessed on possibly undefined value
  8:     return x.duck;
                ^ undefined

Error: undefined2.js:8
  8:     return x.duck;
                  ^^^^ property `duck`. Property cannot be accessed on possibly undefined value
  8:     return x.duck;
                ^ undefined


Found 21 errors
