Error ---------------------------------------------------------- generic.js:1:22

Error: generic.js:1
  1: function x<T>(x: T = 0) {}
                          ^ number [1] is incompatible with `T` [2].
  References:
    1: function x<T>(x: T = 0) {}
                            ^ [1]: number
    1: function x<T>(x: T = 0) {}
                        ^ [2]: `T`

Error ---------------------------------------------------------- generic.js:4:15

Error: generic.js:4
  4:   x<T>(x: T = 0) {}
                   ^ number [1] is incompatible with `T` [2].
  References:
    4:   x<T>(x: T = 0) {}
                     ^ [1]: number
    4:   x<T>(x: T = 0) {}
                 ^ [2]: `T`

Error ------------------------------------------------------------- loop.js:5:33

Error: loop.js:5
  5: function f<T:*>(x:T,y?:T) { x = y }
                                     ^ Cannot assign `y` to `x` because undefined [1] is incompatible with `T` [2].
  References:
    5: function f<T:*>(x:T,y?:T) { x = y }
                              ^ [1]: undefined
    5: function f<T:*>(x:T,y?:T) { x = y }
                         ^ [2]: `T`

Error --------------------------------------------------------- nullable.js:17:5

Error: nullable.js:17
 17:     x.y++; // should error
         ^^^ Cannot perform arithmetic operation because null or undefined [1] is not a number.
  References:
   15: function optionalNullable3(x: {y?: ?number}) {
                                          ^^^^^^^ [1]: null or undefined

Error --------------------------------------------------------- nullable.js:17:5

Error: nullable.js:17
 17:     x.y++; // should error
         ^^^ Cannot perform arithmetic operation because undefined [1] is not a number.
  References:
   15: function optionalNullable3(x: {y?: ?number}) {
                                          ^^^^^^^ [1]: undefined

Error --------------------------------------------------------- nullable.js:23:5

Error: nullable.js:23
 23:     x.y++; // should error
         ^^^ Cannot perform arithmetic operation because null or undefined [1] is not a number.
  References:
   21: function optionalNullable4(x: {y?: ?number}) {
                                          ^^^^^^^ [1]: null or undefined

Error --------------------------------------------------------- nullable.js:23:5

Error: nullable.js:23
 23:     x.y++; // should error
         ^^^ Cannot perform arithmetic operation because undefined [1] is not a number.
  References:
   21: function optionalNullable4(x: {y?: ?number}) {
                                          ^^^^^^^ [1]: undefined

Error --------------------------------------------------------- nullable.js:29:5

Error: nullable.js:29
 29:     x.y++; // should error
         ^^^ Cannot perform arithmetic operation because null or undefined [1] is not a number.
  References:
   27: function optionalNullable5(x: {y?: ?number}) {
                                          ^^^^^^^ [1]: null or undefined

Error --------------------------------------------------------- nullable.js:29:5

Error: nullable.js:29
 29:     x.y++; // should error
         ^^^ Cannot perform arithmetic operation because undefined [1] is not a number.
  References:
   27: function optionalNullable5(x: {y?: ?number}) {
                                          ^^^^^^^ [1]: undefined

Error --------------------------------------------------------- nullable.js:35:5

Error: nullable.js:35
 35:     x.y++; // should error
         ^^^ Cannot perform arithmetic operation because null or undefined [1] is not a number.
  References:
   33: function optionalNullable6(x: {y?: ?number}) {
                                          ^^^^^^^ [1]: null or undefined

Error --------------------------------------------------------- nullable.js:35:5

Error: nullable.js:35
 35:     x.y++; // should error
         ^^^ Cannot perform arithmetic operation because undefined [1] is not a number.
  References:
   33: function optionalNullable6(x: {y?: ?number}) {
                                          ^^^^^^^ [1]: undefined

Error --------------------------------------------------------- optional.js:1:23

Error: optional.js:1
  1: function bar(x?,y?) { x * 0; }
                           ^ Cannot perform arithmetic operation because undefined [1] is not a number.
  References:
    1: function bar(x?,y?) { x * 0; }
                    ^^ [1]: undefined

Error --------------------------------------------------------- optional.js:7:14

Error: optional.js:7
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                  ^ Missing type annotation for `x`.

Error --------------------------------------------------------- optional.js:7:27

Error: optional.js:7
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                               ^ Missing type annotation for rest parameter `y`.

Error --------------------------------------------------------- optional.js:7:43

Error: optional.js:7
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                                               ^ Cannot call `foo` with `x` bound to `x` because string [1] is incompatible with number [2].
  References:
    7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                      ^^^^^^^ [1]: string
    4: var foo:(x?:number)=>void = bar;
                   ^^^^^^ [2]: number

Error --------------------------------------------------------- optional.js:7:54

Error: optional.js:7
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                                                          ^^^^ Cannot return `y[0]` because number [1] is incompatible with string [2].
  References:
    9: qux(0,0); // Error, number ~> string
             ^ [1]: number
    7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                                    ^^^^^^ [2]: string

Error --------------------------------------------------------- optional.js:7:54

Error: optional.js:7
  7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                                                          ^^^^ Cannot return `y[0]` because number [1] is incompatible with string [2].
  References:
   10: qux(0,...[42, ""]); // Error, number ~> string
                 ^^ [1]: number
    7: function qux(x="hello",...y):string { foo(x); return y[0]; }
                                    ^^^^^^ [2]: string

Error -------------------------------------------------- optional_param2.js:7:31

Error: optional_param2.js:7
  7: var j:I<number> = i.map(id => id);
                                   ^^ Cannot assign `i.map(...)` to `j` because in type argument `V`, undefined [1] is incompatible with number [2].
  References:
    3:         mapper: (value?: V) => M
                                ^ [1]: undefined
    7: var j:I<number> = i.map(id => id);
               ^^^^^^ [2]: number

Error -------------------------------------------------- optional_param4.js:12:5

Error: optional_param4.js:12
 12: foo(true); // ERROR boolean ~> number
         ^^^^ Cannot call `foo` with `true` bound to `x` because boolean [1] is incompatible with number [2].
  References:
   12: foo(true); // ERROR boolean ~> number
           ^^^^ [1]: boolean
    3: function foo(x?: number, ...y: Array<string>): [?number, Array<string>] {
                        ^^^^^^ [2]: number

Error ------------------------------------------------- optional_param4.js:13:10

Error: optional_param4.js:13
 13: foo(123, true); // ERROR boolean ~> string
              ^^^^ Cannot call `foo` because in the rest argument and then type argument `T`, boolean [1] is incompatible with string [2].
  References:
   13: foo(123, true); // ERROR boolean ~> string
                ^^^^ [1]: boolean
    3: function foo(x?: number, ...y: Array<string>): [?number, Array<string>] {
                                            ^^^^^^ [2]: string

Error -------------------------------------------------------- undefined.js:8:14

Error: undefined.js:8
  8:     return x.duck;
                  ^^^^ Cannot get `x.duck` because property `duck` is missing in undefined [1].
  References:
   13: declare var undefined: void;
                              ^^^^ [1]: undefined. See lib: <BUILTINS>/core.js:13

Error ------------------------------------------------------- undefined2.js:8:14

Error: undefined2.js:8
  8:     return x.duck;
                  ^^^^ Cannot get `x.duck` because property `duck` is missing in undefined [1].
  References:
    3: function foo(bar?) {
                    ^^^^ [1]: undefined


Found 22 errors
