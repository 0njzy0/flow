Error: type.js:10
 10: (o1: {||}); // Error: missing x
      ^^ Cannot cast `o1` to object type because property `x` is missing in object type [1] but exists in object type [2].
  References:
   10: (o1: {||}); // Error: missing x
            ^^^^ [1]: object type
    9: declare var o1: O1;
                       ^^ [2]: object type

Error: type.js:12
 12: (o1: {|x?: X|}); // Error: x is not optional
      ^^ Cannot cast `o1` to object type because in property `x`, `X` [1] is incompatible with undefined [2].
  References:
    8: type O1 = $Rest<{|x: X, y: Y|}, {|y: Y|}>;
                            ^ [1]: `X`
   12: (o1: {|x?: X|}); // Error: x is not optional
                  ^ [2]: undefined

Error: type.js:13
 13: (o1: {|x: X, y?: Y|}); // Error: y is not in O1
      ^^ Cannot cast `o1` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
    9: declare var o1: O1;
                       ^^ [1]: object type
   13: (o1: {|x: X, y?: Y|}); // Error: y is not in O1
            ^^^^^^^^^^^^^^^ [2]: object type

Error: type.js:14
 14: (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
      ^^ Cannot cast `o1` to object type because in property `x`, `X` [1] is incompatible with undefined [2].
  References:
    8: type O1 = $Rest<{|x: X, y: Y|}, {|y: Y|}>;
                            ^ [1]: `X`
   14: (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
                  ^ [2]: undefined

Error: type.js:14
 14: (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
      ^^ Cannot cast `o1` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
    9: declare var o1: O1;
                       ^^ [1]: object type
   14: (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
            ^^^^^^^^^^^^^^^^ [2]: object type

Error: type.js:15
 15: (o1: {|x: Y|}); // Error: X = Y
      ^^ Cannot cast `o1` to object type because in property `x`, `X` [1] is incompatible with `Y` [2].
  References:
    8: type O1 = $Rest<{|x: X, y: Y|}, {|y: Y|}>;
                            ^ [1]: `X`
   15: (o1: {|x: Y|}); // Error: X = Y
                 ^ [2]: `Y`

Error: type.js:16
 16: ({}: O1); // Error: missing x
      ^^ object literal. Inexact type is incompatible with exact type
 16: ({}: O1); // Error: missing x
          ^^ object type

Error: type.js:16
 16: ({}: O1); // Error: missing x
      ^^ Cannot cast object literal to `O1` because property `x` is missing in object literal [1] but exists in object type [2].
  References:
   16: ({}: O1); // Error: missing x
        ^^ [1]: object literal
   16: ({}: O1); // Error: missing x
            ^^ [2]: object type

Error: type.js:18
 18: ({x, y}: O1); // Error: y is not in O1
      ^^^^^^ Cannot cast object literal to `O1` because property `y` is missing in object type [1] but exists in object literal [2].
  References:
   18: ({x, y}: O1); // Error: y is not in O1
                ^^ [1]: object type
   18: ({x, y}: O1); // Error: y is not in O1
        ^^^^^^ [2]: object literal

Error: type.js:19
 19: ({x: y}: O1); // Error: Y ~> X
          ^ Cannot cast object literal to `O1` because in property `x`, `Y` [1] is incompatible with `X` [2].
  References:
    6: declare var y: Y;
                      ^ [1]: `Y`
    8: type O1 = $Rest<{|x: X, y: Y|}, {|y: Y|}>;
                            ^ [2]: `X`

Error: type.js:21
 21: type O2 = $Rest<{|x: X, y: Y|}, {|y: X|}>;
                                ^ Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2].
  References:
   21: type O2 = $Rest<{|x: X, y: Y|}, {|y: X|}>;
                                  ^ [1]: `Y`
   21: type O2 = $Rest<{|x: X, y: Y|}, {|y: X|}>;
                                            ^ [2]: `X`

Error: type.js:27
 27: (o3: {||}); // Error: missing x and y
      ^^ Cannot cast `o3` to object type because property `x` is missing in object type [1] but exists in object type [2].
  References:
   27: (o3: {||}); // Error: missing x and y
            ^^^^ [1]: object type
   26: declare var o3: O3;
                       ^^ [2]: object type

Error: type.js:27
 27: (o3: {||}); // Error: missing x and y
      ^^ Cannot cast `o3` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
   27: (o3: {||}); // Error: missing x and y
            ^^^^ [1]: object type
   26: declare var o3: O3;
                       ^^ [2]: object type

Error: type.js:28
 28: (o3: {|x: X|}); // Error: x is optional and missing y
      ^^ Cannot cast `o3` to object type because in property `x`, undefined [1] is incompatible with `X` [2].
  References:
   25: type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                            ^ [1]: undefined
   28: (o3: {|x: X|}); // Error: x is optional and missing y
                 ^ [2]: `X`

Error: type.js:28
 28: (o3: {|x: X|}); // Error: x is optional and missing y
      ^^ Cannot cast `o3` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
   28: (o3: {|x: X|}); // Error: x is optional and missing y
            ^^^^^^^^ [1]: object type
   26: declare var o3: O3;
                       ^^ [2]: object type

Error: type.js:29
 29: (o3: {|x?: X|}); // Error: missing y
      ^^ Cannot cast `o3` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
   29: (o3: {|x?: X|}); // Error: missing y
            ^^^^^^^^^ [1]: object type
   26: declare var o3: O3;
                       ^^ [2]: object type

Error: type.js:30
 30: (o3: {|x: X, y?: Y|}); // Error: x is optional
      ^^ Cannot cast `o3` to object type because in property `x`, undefined [1] is incompatible with `X` [2].
  References:
   25: type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                            ^ [1]: undefined
   30: (o3: {|x: X, y?: Y|}); // Error: x is optional
                 ^ [2]: `X`

Error: type.js:32
 32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
      ^^ Cannot cast `o3` to object type because in property `x`, `X` [1] is incompatible with `Y` [2].
  References:
   25: type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                            ^ [1]: `X`
   32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
                 ^ [2]: `Y`

Error: type.js:32
 32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
      ^^ Cannot cast `o3` to object type because in property `x`, undefined [1] is incompatible with `Y` [2].
  References:
   25: type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                            ^ [1]: undefined
   32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
                 ^ [2]: `Y`

Error: type.js:32
 32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
      ^^ Cannot cast `o3` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
   32: (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
            ^^^^^^^^ [1]: object type
   26: declare var o3: O3;
                       ^^ [2]: object type

Error: type.js:33
 33: ({}: O3); // OK
      ^^ object literal. Inexact type is incompatible with exact type
 33: ({}: O3); // OK
          ^^ object type

Error: type.js:36
 36: ({x: y}: O3); // Error: Y ~> X
          ^ Cannot cast object literal to `O3` because in property `x`, `Y` [1] is incompatible with `X` [2].
  References:
    6: declare var y: Y;
                      ^ [1]: `Y`
   25: type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                            ^ [2]: `X`

Error: type.js:40
 40: (o4: {||}); // Error: missing x and y
      ^^ Cannot cast `o4` to object type because property `x` is missing in object type [1] but exists in object type [2].
  References:
   40: (o4: {||}); // Error: missing x and y
            ^^^^ [1]: object type
   39: declare var o4: O4;
                       ^^ [2]: object type

Error: type.js:40
 40: (o4: {||}); // Error: missing x and y
      ^^ Cannot cast `o4` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
   40: (o4: {||}); // Error: missing x and y
            ^^^^ [1]: object type
   39: declare var o4: O4;
                       ^^ [2]: object type

Error: type.js:41
 41: (o4: {|x: X|}); // Error: missing y
      ^^ Cannot cast `o4` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
   41: (o4: {|x: X|}); // Error: missing y
            ^^^^^^^^ [1]: object type
   39: declare var o4: O4;
                       ^^ [2]: object type

Error: type.js:42
 42: (o4: {|x?: X|}); // Error: x is not optional and missing y
      ^^ Cannot cast `o4` to object type because in property `x`, `X` [1] is incompatible with undefined [2].
  References:
   38: type O4 = $Rest<{|x: X, y: Y|}, {|y?: Y|}>;
                            ^ [1]: `X`
   42: (o4: {|x?: X|}); // Error: x is not optional and missing y
                  ^ [2]: undefined

Error: type.js:42
 42: (o4: {|x?: X|}); // Error: x is not optional and missing y
      ^^ Cannot cast `o4` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
   42: (o4: {|x?: X|}); // Error: x is not optional and missing y
            ^^^^^^^^^ [1]: object type
   39: declare var o4: O4;
                       ^^ [2]: object type

Error: type.js:44
 44: (o4: {|x?: X, y?: Y|}); // Error: x is not optional
      ^^ Cannot cast `o4` to object type because in property `x`, `X` [1] is incompatible with undefined [2].
  References:
   38: type O4 = $Rest<{|x: X, y: Y|}, {|y?: Y|}>;
                            ^ [1]: `X`
   44: (o4: {|x?: X, y?: Y|}); // Error: x is not optional
                  ^ [2]: undefined

Error: type.js:45
 45: (o4: {|x: Y|}); // Error: X = Y, and missing y
      ^^ Cannot cast `o4` to object type because in property `x`, `X` [1] is incompatible with `Y` [2].
  References:
   38: type O4 = $Rest<{|x: X, y: Y|}, {|y?: Y|}>;
                            ^ [1]: `X`
   45: (o4: {|x: Y|}); // Error: X = Y, and missing y
                 ^ [2]: `Y`

Error: type.js:45
 45: (o4: {|x: Y|}); // Error: X = Y, and missing y
      ^^ Cannot cast `o4` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
   45: (o4: {|x: Y|}); // Error: X = Y, and missing y
            ^^^^^^^^ [1]: object type
   39: declare var o4: O4;
                       ^^ [2]: object type

Error: type.js:46
 46: ({}: O4); // Error: missing x
      ^^ object literal. Inexact type is incompatible with exact type
 46: ({}: O4); // Error: missing x
          ^^ object type

Error: type.js:46
 46: ({}: O4); // Error: missing x
      ^^ Cannot cast object literal to `O4` because property `x` is missing in object literal [1] but exists in object type [2].
  References:
   46: ({}: O4); // Error: missing x
        ^^ [1]: object literal
   46: ({}: O4); // Error: missing x
            ^^ [2]: object type

Error: type.js:49
 49: ({x: y}: O4); // Error: Y ~> X
          ^ Cannot cast object literal to `O4` because in property `x`, `Y` [1] is incompatible with `X` [2].
  References:
    6: declare var y: Y;
                      ^ [1]: `Y`
   38: type O4 = $Rest<{|x: X, y: Y|}, {|y?: Y|}>;
                            ^ [2]: `X`

Error: type.js:53
 53: (o5: {|x?: X|}); // Error: inexact ~> exact
      ^^ object type. Inexact type is incompatible with exact type
 53: (o5: {|x?: X|}); // Error: inexact ~> exact
          ^^^^^^^^^ object type

Error: type.js:55
 55: (o5: {x: X}); // Error: x is optional
      ^^ Cannot cast `o5` to object type because in property `x`, undefined [1] is incompatible with `X` [2].
  References:
   51: type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                           ^ [1]: undefined
   55: (o5: {x: X}); // Error: x is optional
                ^ [2]: `X`

Error: type.js:57
 57: (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
      ^^ Cannot cast `o5` to object type because in property `x`, undefined [1] is incompatible with `X` [2].
  References:
   51: type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                           ^ [1]: undefined
   57: (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
                ^ [2]: `X`

Error: type.js:57
 57: (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
      ^^ Cannot cast `o5` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
   52: declare var o5: O5;
                       ^^ [1]: object type
   57: (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
            ^^^^^^^^^^^^^ [2]: object type

Error: type.js:58
 58: (o5: {x?: X, y?: Y}); // Error: y is not in O5
      ^^ Cannot cast `o5` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
   52: declare var o5: O5;
                       ^^ [1]: object type
   58: (o5: {x?: X, y?: Y}); // Error: y is not in O5
            ^^^^^^^^^^^^^^ [2]: object type

Error: type.js:59
 59: (o5: {x: Y}); // Error: x is optional and X = Y
      ^^ Cannot cast `o5` to object type because in property `x`, `X` [1] is incompatible with `Y` [2].
  References:
   51: type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                           ^ [1]: `X`
   59: (o5: {x: Y}); // Error: x is optional and X = Y
                ^ [2]: `Y`

Error: type.js:59
 59: (o5: {x: Y}); // Error: x is optional and X = Y
      ^^ Cannot cast `o5` to object type because in property `x`, undefined [1] is incompatible with `Y` [2].
  References:
   51: type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                           ^ [1]: undefined
   59: (o5: {x: Y}); // Error: x is optional and X = Y
                ^ [2]: `Y`

Error: type.js:63
 63: ({x: y}: O5); // Error: Y ~> X
          ^ Cannot cast object literal to `O5` because in property `x`, `Y` [1] is incompatible with `X` [2].
  References:
    6: declare var y: Y;
                      ^ [1]: `Y`
   51: type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                           ^ [2]: `X`

Error: type.js:67
 67: (o6: {|x?: X, y?: Y|}); // Error: inexact ~> exact
      ^^ object type. Inexact type is incompatible with exact type
 67: (o6: {|x?: X, y?: Y|}); // Error: inexact ~> exact
          ^^^^^^^^^^^^^^^^ object type

Error: type.js:69
 69: (o6: {x: X}); // Error: x is optional
      ^^ Cannot cast `o6` to object type because in property `x`, undefined [1] is incompatible with `X` [2].
  References:
   65: type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                           ^ [1]: undefined
   69: (o6: {x: X}); // Error: x is optional
                ^ [2]: `X`

Error: type.js:71
 71: (o6: {x: X, y?: Y}); // Error: x is optional
      ^^ Cannot cast `o6` to object type because in property `x`, undefined [1] is incompatible with `X` [2].
  References:
   65: type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                           ^ [1]: undefined
   71: (o6: {x: X, y?: Y}); // Error: x is optional
                ^ [2]: `X`

Error: type.js:73
 73: (o6: {x: Y}); // Error: X = Y, x is optional
      ^^ Cannot cast `o6` to object type because in property `x`, `X` [1] is incompatible with `Y` [2].
  References:
   65: type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                           ^ [1]: `X`
   73: (o6: {x: Y}); // Error: X = Y, x is optional
                ^ [2]: `Y`

Error: type.js:73
 73: (o6: {x: Y}); // Error: X = Y, x is optional
      ^^ Cannot cast `o6` to object type because in property `x`, undefined [1] is incompatible with `Y` [2].
  References:
   65: type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                           ^ [1]: undefined
   73: (o6: {x: Y}); // Error: X = Y, x is optional
                ^ [2]: `Y`

Error: type.js:77
 77: ({x: y}: O6); // Error: Y ~> X
          ^ Cannot cast object literal to `O6` because in property `x`, `Y` [1] is incompatible with `X` [2].
  References:
    6: declare var y: Y;
                      ^ [1]: `Y`
   65: type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                           ^ [2]: `X`

Error: type.js:81
 81: (o7: {|x?: X, y?: Y|}); // Error: inexact ~> exact
      ^^ object type. Inexact type is incompatible with exact type
 81: (o7: {|x?: X, y?: Y|}); // Error: inexact ~> exact
          ^^^^^^^^^^^^^^^^ object type

Error: type.js:83
 83: (o7: {x: X}); // Error: x is optional
      ^^ Cannot cast `o7` to object type because in property `x`, undefined [1] is incompatible with `X` [2].
  References:
   79: type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                           ^ [1]: undefined
   83: (o7: {x: X}); // Error: x is optional
                ^ [2]: `X`

Error: type.js:85
 85: (o7: {x: X, y?: Y}); // Error: x is optional
      ^^ Cannot cast `o7` to object type because in property `x`, undefined [1] is incompatible with `X` [2].
  References:
   79: type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                           ^ [1]: undefined
   85: (o7: {x: X, y?: Y}); // Error: x is optional
                ^ [2]: `X`

Error: type.js:87
 87: (o7: {x: Y}); // Error: X = Y and x is optional
      ^^ Cannot cast `o7` to object type because in property `x`, `X` [1] is incompatible with `Y` [2].
  References:
   79: type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                           ^ [1]: `X`
   87: (o7: {x: Y}); // Error: X = Y and x is optional
                ^ [2]: `Y`

Error: type.js:87
 87: (o7: {x: Y}); // Error: X = Y and x is optional
      ^^ Cannot cast `o7` to object type because in property `x`, undefined [1] is incompatible with `Y` [2].
  References:
   79: type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                           ^ [1]: undefined
   87: (o7: {x: Y}); // Error: X = Y and x is optional
                ^ [2]: `Y`

Error: type.js:91
 91: ({x: y}: O7); // Error: Y ~> X
          ^ Cannot cast object literal to `O7` because in property `x`, `Y` [1] is incompatible with `X` [2].
  References:
    6: declare var y: Y;
                      ^ [1]: `Y`
   79: type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                           ^ [2]: `X`

Error: type.js:93
 93: type O8 = $Rest<{x: X, y: Y}, {|y: X|}>; // Error: Y ~> X
                               ^ Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2].
  References:
   93: type O8 = $Rest<{x: X, y: Y}, {|y: X|}>; // Error: Y ~> X
                                 ^ [1]: `Y`
   93: type O8 = $Rest<{x: X, y: Y}, {|y: X|}>; // Error: Y ~> X
                                          ^ [2]: `X`

Error: type.js:97
 97: type O9 = $Rest<{|x: X, y: Y|}, {y: X}>; // Error: Y ~> X
                                ^ Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2].
  References:
   97: type O9 = $Rest<{|x: X, y: Y|}, {y: X}>; // Error: Y ~> X
                                  ^ [1]: `Y`
   97: type O9 = $Rest<{|x: X, y: Y|}, {y: X}>; // Error: Y ~> X
                                           ^ [2]: `X`

Error: type.js:101
101: type O10 = $Rest<{|x: X, y: Y|}, {|y?: X|}>; // Error: Y ~> X
                                 ^ Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2].
  References:
  101: type O10 = $Rest<{|x: X, y: Y|}, {|y?: X|}>; // Error: Y ~> X
                                   ^ [1]: `Y`
  101: type O10 = $Rest<{|x: X, y: Y|}, {|y?: X|}>; // Error: Y ~> X
                                              ^ [2]: `X`

Error: type.js:105
105: type O11 = $Rest<{|x: X, y?: Y|}, {|y: Y|}>; // Error: void ~> Y
                                  ^ Cannot instantiate `$Rest` because undefined [1] is incompatible with `Y` [2].
  References:
  105: type O11 = $Rest<{|x: X, y?: Y|}, {|y: Y|}>; // Error: void ~> Y
                                    ^ [1]: undefined
  105: type O11 = $Rest<{|x: X, y?: Y|}, {|y: Y|}>; // Error: void ~> Y
                                              ^ [2]: `Y`

Error: type.js:109
109: type O12 = $Rest<{|x: X|}, {|y: Y|}>; // Error: void ~> Y
                      ^^^^^^^^ Cannot instantiate `$Rest` because undefined property `y` [1] is incompatible with `Y` [2].
  References:
  109: type O12 = $Rest<{|x: X|}, {|y: Y|}>; // Error: void ~> Y
                        ^^^^^^^^ [1]: undefined property `y`
  109: type O12 = $Rest<{|x: X|}, {|y: Y|}>; // Error: void ~> Y
                                       ^ [2]: `Y`

Error: type_dict.js:10
 10: (o1: {||}); // Error: missing y
      ^^ Cannot cast `o1` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
   10: (o1: {||}); // Error: missing y
            ^^^^ [1]: object type
    9: declare var o1: O1;
                       ^^ [2]: object type

Error: type_dict.js:11
 11: (o1: {|y: Y|}); // Error: y is optional
      ^^ Cannot cast `o1` to object type because in property `y`, undefined [1] is incompatible with `Y` [2].
  References:
    8: type O1 = $Rest<{|y: Y|}, {|[string]: Y|}>;
                            ^ [1]: undefined
   11: (o1: {|y: Y|}); // Error: y is optional
                 ^ [2]: `Y`

Error: type_dict.js:13
 13: (o1: {|y?: X|}); // Error: Y = X
      ^^ Cannot cast `o1` to object type because in property `y`, `Y` [1] is incompatible with `X` [2].
  References:
    8: type O1 = $Rest<{|y: Y|}, {|[string]: Y|}>;
                            ^ [1]: `Y`
   13: (o1: {|y?: X|}); // Error: Y = X
                  ^ [2]: `X`

Error: type_dict.js:14
 14: ({}: O1); // OK
      ^^ object literal. Inexact type is incompatible with exact type
 14: ({}: O1); // OK
          ^^ object type

Error: type_dict.js:16
 16: ({y: x}: O1); // Error: X ~> Y
          ^ Cannot cast object literal to `O1` because in property `y`, `X` [1] is incompatible with `Y` [2].
  References:
    5: declare var x: X;
                      ^ [1]: `X`
    8: type O1 = $Rest<{|y: Y|}, {|[string]: Y|}>;
                            ^ [2]: `Y`

Error: type_dict.js:18
 18: type O2 = $Rest<{|y: Y|}, {|[string]: X|}>; // Error: Y ~> X
                          ^ Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2].
  References:
   18: type O2 = $Rest<{|y: Y|}, {|[string]: X|}>; // Error: Y ~> X
                            ^ [1]: `Y`
   18: type O2 = $Rest<{|y: Y|}, {|[string]: X|}>; // Error: Y ~> X
                                             ^ [2]: `X`

Error: type_dict.js:24
 24: (o3: {||}); // Error: missing y
      ^^ Cannot cast `o3` to object type because property `y` is missing in object type [1] but exists in object type [2].
  References:
   24: (o3: {||}); // Error: missing y
            ^^^^ [1]: object type
   23: declare var o3: O3;
                       ^^ [2]: object type

Error: type_dict.js:25
 25: (o3: {|y: Y|}); // Error: y is optional
      ^^ Cannot cast `o3` to object type because in property `y`, undefined [1] is incompatible with `Y` [2].
  References:
   22: type O3 = $Rest<{|y: Y|}, {[string]: Y}>;
                            ^ [1]: undefined
   25: (o3: {|y: Y|}); // Error: y is optional
                 ^ [2]: `Y`

Error: type_dict.js:27
 27: (o3: {|y?: X|}); // Error: Y = X
      ^^ Cannot cast `o3` to object type because in property `y`, `Y` [1] is incompatible with `X` [2].
  References:
   22: type O3 = $Rest<{|y: Y|}, {[string]: Y}>;
                            ^ [1]: `Y`
   27: (o3: {|y?: X|}); // Error: Y = X
                  ^ [2]: `X`

Error: type_dict.js:28
 28: ({}: O3); // OK
      ^^ object literal. Inexact type is incompatible with exact type
 28: ({}: O3); // OK
          ^^ object type

Error: type_dict.js:30
 30: ({y: x}: O3); // Error: X ~> Y
          ^ Cannot cast object literal to `O3` because in property `y`, `X` [1] is incompatible with `Y` [2].
  References:
    5: declare var x: X;
                      ^ [1]: `X`
   22: type O3 = $Rest<{|y: Y|}, {[string]: Y}>;
                            ^ [2]: `Y`

Error: type_dict.js:34
 34: (o4: {|y?: Y|}); // Error: inexact ~> exact
      ^^ object type. Inexact type is incompatible with exact type
 34: (o4: {|y?: Y|}); // Error: inexact ~> exact
          ^^^^^^^^^ object type

Error: type_dict.js:36
 36: (o4: {y: Y}); // Error: y is optional
      ^^ Cannot cast `o4` to object type because in property `y`, undefined [1] is incompatible with `Y` [2].
  References:
   32: type O4 = $Rest<{y: Y}, {|[string]: Y|}>;
                           ^ [1]: undefined
   36: (o4: {y: Y}); // Error: y is optional
                ^ [2]: `Y`

Error: type_dict.js:38
 38: (o4: {y?: X}); // Error: Y = X
      ^^ Cannot cast `o4` to object type because in property `y`, `Y` [1] is incompatible with `X` [2].
  References:
   32: type O4 = $Rest<{y: Y}, {|[string]: Y|}>;
                           ^ [1]: `Y`
   38: (o4: {y?: X}); // Error: Y = X
                 ^ [2]: `X`

Error: type_dict.js:42
 42: ({y: x}: O4); // Error: X ~> Y
          ^ Cannot cast object literal to `O4` because in property `y`, `X` [1] is incompatible with `Y` [2].
  References:
    5: declare var x: X;
                      ^ [1]: `X`
   32: type O4 = $Rest<{y: Y}, {|[string]: Y|}>;
                           ^ [2]: `Y`

Error: type_dict.js:46
 46: (o5: {|y?: Y|}); // Error: inexact ~> exact
      ^^ object type. Inexact type is incompatible with exact type
 46: (o5: {|y?: Y|}); // Error: inexact ~> exact
          ^^^^^^^^^ object type

Error: type_dict.js:48
 48: (o5: {y: Y}); // Error: y is optional
      ^^ Cannot cast `o5` to object type because in property `y`, undefined [1] is incompatible with `Y` [2].
  References:
   44: type O5 = $Rest<{y: Y}, {[string]: Y}>;
                           ^ [1]: undefined
   48: (o5: {y: Y}); // Error: y is optional
                ^ [2]: `Y`

Error: type_dict.js:50
 50: (o5: {y?: X}); // Error: Y = X
      ^^ Cannot cast `o5` to object type because in property `y`, `Y` [1] is incompatible with `X` [2].
  References:
   44: type O5 = $Rest<{y: Y}, {[string]: Y}>;
                           ^ [1]: `Y`
   50: (o5: {y?: X}); // Error: Y = X
                 ^ [2]: `X`

Error: type_dict.js:54
 54: ({y: x}: O5); // Error: X ~> Y
          ^ Cannot cast object literal to `O5` because in property `y`, `X` [1] is incompatible with `Y` [2].
  References:
    5: declare var x: X;
                      ^ [1]: `X`
   44: type O5 = $Rest<{y: Y}, {[string]: Y}>;
                           ^ [2]: `Y`

Error: type_dict.js:56
 56: type O6 = $Rest<{y: Y}, {|[string]: X|}>; // Error: Y ~> X
                         ^ Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2].
  References:
   56: type O6 = $Rest<{y: Y}, {|[string]: X|}>; // Error: Y ~> X
                           ^ [1]: `Y`
   56: type O6 = $Rest<{y: Y}, {|[string]: X|}>; // Error: Y ~> X
                                           ^ [2]: `X`

Error: type_dict.js:60
 60: type O7 = $Rest<{|y: Y|}, {[string]: X}>; // Error: Y ~> X
                          ^ Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2].
  References:
   60: type O7 = $Rest<{|y: Y|}, {[string]: X}>; // Error: Y ~> X
                            ^ [1]: `Y`
   60: type O7 = $Rest<{|y: Y|}, {[string]: X}>; // Error: Y ~> X
                                            ^ [2]: `X`

Error: type_dict.js:84
 84: type O13 = $Rest<{|[string]: X|}, {|[string]: Y|}>; // Error: X ~> Y
                                  ^ Cannot instantiate `$Rest` because `X` [1] is incompatible with `Y` [2].
  References:
   84: type O13 = $Rest<{|[string]: X|}, {|[string]: Y|}>; // Error: X ~> Y
                                    ^ [1]: `X`
   84: type O13 = $Rest<{|[string]: X|}, {|[string]: Y|}>; // Error: X ~> Y
                                                     ^ [2]: `Y`

Error: type_dict.js:96
 96: type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                  ^ Cannot instantiate `$Rest` because `X` [1] is incompatible with `Y` [2].
  References:
   96: type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                    ^ [1]: `X`
   96: type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                              ^ [2]: `Y`

Error: type_dict.js:96
 96: type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                  ^ Cannot instantiate `$Rest` because undefined [1] is incompatible with `Y` [2].
  References:
   96: type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                    ^ [1]: undefined
   96: type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                              ^ [2]: `Y`

Error: type_generic.js:1
  1: function remove<A, B>(a: A): [$Rest<A, {p: B}>, B] {
                                         ^ Cannot instantiate `$Rest` because `A` [1] is incompatible with `B` [2].
  References:
    1: function remove<A, B>(a: A): [$Rest<A, {p: B}>, B] {
                                           ^ [1]: `A`
    1: function remove<A, B>(a: A): [$Rest<A, {p: B}>, B] {
                                                  ^ [2]: `B`

Error: type_generic.js:2
  2:   const {p, ...o} = a;
              ^ Property `p` is missing in `A` [1].
  References:
    1: function remove<A, B>(a: A): [$Rest<A, {p: B}>, B] {
                                ^ [1]: `A`

Error: type_generic.js:2
  2:   const {p, ...o} = a;
                 ^^^^ `A` [1] is not an object.
  References:
    1: function remove<A, B>(a: A): [$Rest<A, {p: B}>, B] {
                                ^ [1]: `A`

Error: type_generic.js:7
  7: (o: {|x: string|});
      ^ Cannot cast `o` to object type because in property `x`, undefined [1] is incompatible with string [2].
  References:
    6: const [o, p] = remove({x: 'foo', p: 42});
                                 ^^^^^ [1]: undefined
    7: (o: {|x: string|});
                ^^^^^^ [2]: string

Error: type_generic.js:7
  7: (o: {|x: string|});
      ^ Cannot cast `o` to object type because property `p` is missing in object type [1] but exists in object literal [2].
  References:
    7: (o: {|x: string|});
           ^^^^^^^^^^^^^ [1]: object type
    6: const [o, p] = remove({x: 'foo', p: 42});
                             ^^^^^^^^^^^^^^^^^ [2]: object literal

Error: type_union.js:14
 14: ({x}: O1<X, Y>); // Error: x is not allowed
      ^^^ object literal. This type is incompatible with
 14: ({x}: O1<X, Y>); // Error: x is not allowed
           ^^^^^^^^ union: `O1`(s)
  Member 1:
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O1
  Error:
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   14: ({x}: O1<X, Y>); // Error: x is not allowed
        ^^^ object literal
    Property `x` is incompatible:
       14: ({x}: O1<X, Y>); // Error: x is not allowed
            ^^^ property `x`. Property not found in
       12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O1
  Error:
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   14: ({x}: O1<X, Y>); // Error: x is not allowed
        ^^^ object literal
    Property `x` is incompatible:
       14: ({x}: O1<X, Y>); // Error: x is not allowed
            ^^^ property `x`. Property not found in
       12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:16
 16: ({x, y}: O1<X, Y>); // Error: x is not allowed
      ^^^^^^ object literal. This type is incompatible with
 16: ({x, y}: O1<X, Y>); // Error: x is not allowed
              ^^^^^^^^ union: `O1`(s)
  Member 1:
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O1
  Error:
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   16: ({x, y}: O1<X, Y>); // Error: x is not allowed
        ^^^^^^ object literal
    Property `x` is incompatible:
       16: ({x, y}: O1<X, Y>); // Error: x is not allowed
            ^^^^^^ property `x`. Property not found in
       12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O1
  Error:
   12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   16: ({x, y}: O1<X, Y>); // Error: x is not allowed
        ^^^^^^ object literal
    Property `x` is incompatible:
       16: ({x, y}: O1<X, Y>); // Error: x is not allowed
            ^^^^^^ property `x`. Property not found in
       12: type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:21
 21: ({y}: O2<X, Y>); // Error: y is not allowed
      ^^^ object literal. This type is incompatible with
 21: ({y}: O2<X, Y>); // Error: y is not allowed
           ^^^^^^^^ union: `O2`(s)
  Member 1:
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O2
  Error:
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   21: ({y}: O2<X, Y>); // Error: y is not allowed
        ^^^ object literal
    Property `y` is incompatible:
       21: ({y}: O2<X, Y>); // Error: y is not allowed
            ^^^ property `y`. Property not found in
       18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O2
  Error:
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   21: ({y}: O2<X, Y>); // Error: y is not allowed
        ^^^ object literal
    Property `y` is incompatible:
       21: ({y}: O2<X, Y>); // Error: y is not allowed
            ^^^ property `y`. Property not found in
       18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:22
 22: ({x, y}: O2<X, Y>); // Error: y is not allowed
      ^^^^^^ object literal. This type is incompatible with
 22: ({x, y}: O2<X, Y>); // Error: y is not allowed
              ^^^^^^^^ union: `O2`(s)
  Member 1:
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O2
  Error:
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   22: ({x, y}: O2<X, Y>); // Error: y is not allowed
        ^^^^^^ object literal
    Property `y` is incompatible:
       22: ({x, y}: O2<X, Y>); // Error: y is not allowed
            ^^^^^^ property `y`. Property not found in
       18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O2
  Error:
   18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   22: ({x, y}: O2<X, Y>); // Error: y is not allowed
        ^^^^^^ object literal
    Property `x` is incompatible:
       22: ({x, y}: O2<X, Y>); // Error: y is not allowed
            ^^^^^^ property `x`. Property not found in
       18: type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:25
 25: (o: O3); // OK
      ^ object type. This type is incompatible with
 25: (o: O3); // OK
         ^^ union: `O3`(s)
  Member 1:
   24: type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O3
  Error:
   24: type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                       ^^^^^^^^ undefined property `y`. This type is incompatible with
   24: type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                                                       ^ Y
  Member 2:
   24: type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O3
  Error:
   24: type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                                  ^^^^^^^^ undefined property `x`. This type is incompatible with
   24: type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                                                 ^ X

Error: type_union.js:29
 29: ({x}: O4); // Error: x is not allowed
      ^^^ object literal. This type is incompatible with
 29: ({x}: O4); // Error: x is not allowed
           ^^ union: `O4`(s)
  Member 1:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O4
  Error:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   29: ({x}: O4); // Error: x is not allowed
        ^^^ object literal
    Property `x` is incompatible:
       29: ({x}: O4); // Error: x is not allowed
            ^^^ property `x`. Property not found in
       27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O4
  Error:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   29: ({x}: O4); // Error: x is not allowed
        ^^^ object literal
    Property `x` is incompatible:
       29: ({x}: O4); // Error: x is not allowed
            ^^^ property `x`. Property not found in
       27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:30
 30: ({y}: O4); // Error: y is not allowed
      ^^^ object literal. This type is incompatible with
 30: ({y}: O4); // Error: y is not allowed
           ^^ union: `O4`(s)
  Member 1:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O4
  Error:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   30: ({y}: O4); // Error: y is not allowed
        ^^^ object literal
    Property `y` is incompatible:
       30: ({y}: O4); // Error: y is not allowed
            ^^^ property `y`. Property not found in
       27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O4
  Error:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   30: ({y}: O4); // Error: y is not allowed
        ^^^ object literal
    Property `y` is incompatible:
       30: ({y}: O4); // Error: y is not allowed
            ^^^ property `y`. Property not found in
       27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:31
 31: ({x, y}: O4); // Error: x and y are not allowed
      ^^^^^^ object literal. This type is incompatible with
 31: ({x, y}: O4); // Error: x and y are not allowed
              ^^ union: `O4`(s)
  Member 1:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O4
  Error:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   31: ({x, y}: O4); // Error: x and y are not allowed
        ^^^^^^ object literal
    Property `x` is incompatible:
       31: ({x, y}: O4); // Error: x and y are not allowed
            ^^^^^^ property `x`. Property not found in
       27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type
  Member 2:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O4
  Error:
   27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type. This type is incompatible with
   31: ({x, y}: O4); // Error: x and y are not allowed
        ^^^^^^ object literal
    Property `x` is incompatible:
       31: ({x, y}: O4); // Error: x and y are not allowed
            ^^^^^^ property `x`. Property not found in
       27: type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ object type

Error: type_union.js:34
 34: (o: O5); // Error: missing x and missing y
      ^ object type. This type is incompatible with
 34: (o: O5); // Error: missing x and missing y
         ^^ union: object type(s)
  Member 1:
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type
  Error:
   34: (o: O5); // Error: missing x and missing y
        ^ object type. This type is incompatible with
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type
    Property `x` is incompatible:
       33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                           ^^^^^^^^^^^^^^ property `x`. Property not found in
       34: (o: O5); // Error: missing x and missing y
            ^ object type
  Member 2:
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type
  Error:
   34: (o: O5); // Error: missing x and missing y
        ^ object type. This type is incompatible with
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type
    Property `y` is incompatible:
       33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                           ^^^^^^^^^^^^^^ property `y`. Property not found in
       34: (o: O5); // Error: missing x and missing y
            ^ object type

Error: type_union.js:37
 37: ({x, y}: O5); // Error: x and y are not allowed together
      ^^^^^^ object literal. This type is incompatible with
 37: ({x, y}: O5); // Error: x and y are not allowed together
              ^^ union: object type(s)
  Member 1:
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type
  Error:
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type. This type is incompatible with
   37: ({x, y}: O5); // Error: x and y are not allowed together
        ^^^^^^ object literal
    Property `y` is incompatible:
       37: ({x, y}: O5); // Error: x and y are not allowed together
            ^^^^^^ property `y`. Property not found in
       33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                           ^^^^^^^^^^^^^^ object type
  Member 2:
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type
  Error:
   33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ object type. This type is incompatible with
   37: ({x, y}: O5); // Error: x and y are not allowed together
        ^^^^^^ object literal
    Property `x` is incompatible:
       37: ({x, y}: O5); // Error: x and y are not allowed together
            ^^^^^^ property `x`. Property not found in
       33: type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                           ^^^^^^^^^^^^^^ object type

Error: type_union.js:39
 39: type O6 = $Rest<{|x: X|}, {|x: X|} | {|y: Y|}>; // Error: void ~> Y
                     ^^^^^^^^ Cannot instantiate `$Rest` because undefined property `y` [1] is incompatible with `Y` [2].
  References:
   39: type O6 = $Rest<{|x: X|}, {|x: X|} | {|y: Y|}>; // Error: void ~> Y
                       ^^^^^^^^ [1]: undefined property `y`
   39: type O6 = $Rest<{|x: X|}, {|x: X|} | {|y: Y|}>; // Error: void ~> Y
                                                 ^ [2]: `Y`

Error: type_union.js:44
 44: ({x}: O7); // Error: x is not allowed
      ^^^ object literal. This type is incompatible with
 44: ({x}: O7); // Error: x is not allowed
           ^^ union: object type(s)
  Member 1:
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type
  Error:
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type. This type is incompatible with
   44: ({x}: O7); // Error: x is not allowed
        ^^^ object literal
    Property `x` is incompatible:
       44: ({x}: O7); // Error: x is not allowed
            ^^^ property `x`. Property not found in
       42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                           ^^^^^^^^ object type
  Member 2:
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type
  Error:
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type. This type is incompatible with
   44: ({x}: O7); // Error: x is not allowed
        ^^^ object literal
    Property `x` is incompatible:
       44: ({x}: O7); // Error: x is not allowed
            ^^^ property `x`. Property not found in
       42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                           ^^^^^^^^ object type

Error: type_union.js:46
 46: ({x, y}: O7); // Error: x is not allowed
      ^^^^^^ object literal. This type is incompatible with
 46: ({x, y}: O7); // Error: x is not allowed
              ^^ union: object type(s)
  Member 1:
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type
  Error:
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type. This type is incompatible with
   46: ({x, y}: O7); // Error: x is not allowed
        ^^^^^^ object literal
    Property `x` is incompatible:
       46: ({x, y}: O7); // Error: x is not allowed
            ^^^^^^ property `x`. Property not found in
       42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                           ^^^^^^^^ object type
  Member 2:
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type
  Error:
   42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ object type. This type is incompatible with
   46: ({x, y}: O7); // Error: x is not allowed
        ^^^^^^ object literal
    Property `x` is incompatible:
       46: ({x, y}: O7); // Error: x is not allowed
            ^^^^^^ property `x`. Property not found in
       42: type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                           ^^^^^^^^ object type

Error: type_union.js:49
 49: (o: O8); // OK
      ^ object type. This type is incompatible with
 49: (o: O8); // OK
         ^^ union: `O8`(s)
  Member 1:
   48: type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O8
  Error:
   48: type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                       ^^^^^^^^ undefined property `y`. This type is incompatible with
   48: type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                                                            ^ Y
  Member 2:
   48: type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O8
  Error:
   48: type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                                  ^^^^^^^^ undefined property `x`. This type is incompatible with
   48: type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                                                 ^ X

Error: type_union.js:55
 55: ({x, y}: O9); // Error: x and y are not allowed together
      ^^^^^^ object literal. This type is incompatible with
 55: ({x, y}: O9); // Error: x and y are not allowed together
              ^^ union: `O9`(s)
  Member 1:
   51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O9
  Error:
   55: ({x, y}: O9); // Error: x and y are not allowed together
        ^^^^^^ object literal. This type is incompatible with
   51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: object type(s)
    Member 1:
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                         ^^^^^^^^ object type
    Error:
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                         ^^^^^^^^ object type. This type is incompatible with
     55: ({x, y}: O9); // Error: x and y are not allowed together
          ^^^^^^ object literal
      Property `y` is incompatible:
         55: ({x, y}: O9); // Error: x and y are not allowed together
              ^^^^^^ property `y`. Property not found in
         51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                             ^^^^^^^^ object type
    Member 2:
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                         ^^^^^^^^ object type
    Error:
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                         ^^^^^^^^ object type. This type is incompatible with
     55: ({x, y}: O9); // Error: x and y are not allowed together
          ^^^^^^ object literal
      Property `x` is incompatible:
         55: ({x, y}: O9); // Error: x and y are not allowed together
              ^^^^^^ property `x`. Property not found in
         51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                             ^^^^^^^^ object type
  Member 2:
   51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ O9
  Error:
   55: ({x, y}: O9); // Error: x and y are not allowed together
        ^^^^^^ object literal. This type is incompatible with
   51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ union: object type(s)
    Member 1:
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                                    ^^^^^^^^ object type
    Error:
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                                    ^^^^^^^^ object type. This type is incompatible with
     55: ({x, y}: O9); // Error: x and y are not allowed together
          ^^^^^^ object literal
      Property `x` is incompatible:
         55: ({x, y}: O9); // Error: x and y are not allowed together
              ^^^^^^ property `x`. Property not found in
         51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                                        ^^^^^^^^ object type
    Member 2:
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                                    ^^^^^^^^ object type
    Error:
     51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                                    ^^^^^^^^ object type. This type is incompatible with
     55: ({x, y}: O9); // Error: x and y are not allowed together
          ^^^^^^ object literal
      Property `x` is incompatible:
         55: ({x, y}: O9); // Error: x and y are not allowed together
              ^^^^^^ property `x`. Property not found in
         51: type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                                        ^^^^^^^^ object type


Found 102 errors
