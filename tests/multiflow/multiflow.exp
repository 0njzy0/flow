Error ----------------------------------------------------------- apply.js:12:22

Cannot call `apply` with array literal bound to `args` because in the second
argument, number is incompatible with number literal `123`.

Error: apply.js:12
 12: apply(noRest, ['hi', 456]); // Error - 456 ~> 123
                          ^^^ Cannot call `apply` with array literal bound to `args` because in the second argument, number [1] is incompatible with number literal `123` [2].
  References:
   12: apply(noRest, ['hi', 456]); // Error - 456 ~> 123
                            ^^^ [1]: number
   10: function noRest(x: 'hi', y: 123): true { return true; }
                                   ^^^ [2]: number literal `123`

Error ----------------------------------------------------------- apply.js:13:15

Cannot call `apply` with array literal bound to `args` because function requires
another argument from function type.

Error: apply.js:13
 13: apply(noRest, ['hi']); // Error - too few args
                   ^^^^^^ Cannot call `apply` with array literal bound to `args` because function [1] requires another argument from function type [2].
  References:
   10: function noRest(x: 'hi', y: 123): true { return true; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function
    4:   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [2]: function type

Error ----------------------------------------------------------- apply.js:19:17

Cannot call `apply` with array literal bound to `args` because in the rest
argument and then index 1, number is incompatible with number literal `123`.

Error: apply.js:19
 19: apply(withRest, ['hi', 456]); // Error - 456 ~> 123
                     ^^^^^^^^^^^ Cannot call `apply` with array literal bound to `args` because in the rest argument and then index 1, number [1] is incompatible with number literal `123` [2].
  References:
   19: apply(withRest, ['hi', 456]); // Error - 456 ~> 123
                              ^^^ [1]: number
   17: function withRest(...rest: ['hi', 123]): true { return true; }
                                         ^^^ [2]: number literal `123`

Error ----------------------------------------------------------- apply.js:20:17

Cannot call `apply` with array literal bound to `args` because in the rest
argument, rest array has an arity of 1 but tuple type has an arity of 2.

Error: apply.js:20
 20: apply(withRest, ['hi']); // Error - too few args
                     ^^^^^^ Cannot call `apply` with array literal bound to `args` because in the rest argument, rest array [1] has an arity of 1 but tuple type [2] has an arity of 2.
  References:
    4:   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]: rest array
   17: function withRest(...rest: ['hi', 123]): true { return true; }
                                  ^^^^^^^^^^^ [2]: tuple type

Error ----------------------------------------------------------- apply.js:21:17

Cannot call `apply` with array literal bound to `args` because in the rest
argument, rest array has an arity of 3 but tuple type has an arity of 2.

Error: apply.js:21
 21: apply(withRest, ['hi', 123, false]); // Error - too many args
                     ^^^^^^^^^^^^^^^^^^ Cannot call `apply` with array literal bound to `args` because in the rest argument, rest array [1] has an arity of 3 but tuple type [2] has an arity of 2.
  References:
    4:   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]: rest array
   17: function withRest(...rest: ['hi', 123]): true { return true; }
                                  ^^^^^^^^^^^ [2]: tuple type

Error ----------------------------------------------------------- apply.js:31:26

Cannot call `applyType` with array literal bound to `args` because in the second
argument, number is incompatible with number literal `123`.

Error: apply.js:31
 31: applyType(noRest, ['hi', 456]); // Error - 456 ~> 123
                              ^^^ Cannot call `applyType` with array literal bound to `args` because in the second argument, number [1] is incompatible with number literal `123` [2].
  References:
   31: applyType(noRest, ['hi', 456]); // Error - 456 ~> 123
                                ^^^ [1]: number
   10: function noRest(x: 'hi', y: 123): true { return true; }
                                   ^^^ [2]: number literal `123`

Error ----------------------------------------------------------- apply.js:32:19

Cannot call `applyType` with array literal bound to `args` because function
requires another argument from function type.

Error: apply.js:32
 32: applyType(noRest, ['hi']); // Error - too few args
                       ^^^^^^ Cannot call `applyType` with array literal bound to `args` because function [1] requires another argument from function type [2].
  References:
   10: function noRest(x: 'hi', y: 123): true { return true; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function
   25:   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [2]: function type

Error ----------------------------------------------------------- apply.js:38:21

Cannot call `applyType` with array literal bound to `args` because in the rest
argument and then index 1, number is incompatible with number literal `123`.

Error: apply.js:38
 38: applyType(withRest, ['hi', 456]); // Error - 456 ~> 123
                         ^^^^^^^^^^^ Cannot call `applyType` with array literal bound to `args` because in the rest argument and then index 1, number [1] is incompatible with number literal `123` [2].
  References:
   38: applyType(withRest, ['hi', 456]); // Error - 456 ~> 123
                                  ^^^ [1]: number
   17: function withRest(...rest: ['hi', 123]): true { return true; }
                                         ^^^ [2]: number literal `123`

Error ----------------------------------------------------------- apply.js:39:21

Cannot call `applyType` with array literal bound to `args` because in the rest
argument, rest array has an arity of 1 but tuple type has an arity of 2.

Error: apply.js:39
 39: applyType(withRest, ['hi']); // Error - too few args
                         ^^^^^^ Cannot call `applyType` with array literal bound to `args` because in the rest argument, rest array [1] has an arity of 1 but tuple type [2] has an arity of 2.
  References:
   25:   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]: rest array
   17: function withRest(...rest: ['hi', 123]): true { return true; }
                                  ^^^^^^^^^^^ [2]: tuple type

Error ----------------------------------------------------------- apply.js:40:21

Cannot call `applyType` with array literal bound to `args` because in the rest
argument, rest array has an arity of 3 but tuple type has an arity of 2.

Error: apply.js:40
 40: applyType(withRest, ['hi', 123, false]); // Error - too many args
                         ^^^^^^^^^^^^^^^^^^ Cannot call `applyType` with array literal bound to `args` because in the rest argument, rest array [1] has an arity of 3 but tuple type [2] has an arity of 2.
  References:
   25:   fn: (...Args) => Ret,
             ^^^^^^^^^^^^^^^^ [1]: rest array
   17: function withRest(...rest: ['hi', 123]): true { return true; }
                                  ^^^^^^^^^^^ [2]: tuple type

Error -------------------------------------------------------------- jsx.js:30:2

Cannot cast `<AcceptsWhatever />` to number because string is incompatible with
number.

Error: jsx.js:30
 30: (<AcceptsWhatever />: number); // Error string ~> number
      ^^^^^^^^^^^^^^^^^^^ Cannot cast `<AcceptsWhatever />` to number because string [1] is incompatible with number [2].
  References:
   29: declare function AcceptsWhatever(props: {} | null, children: any): string;
                                                                          ^^^^^^ [1]: string
   30: (<AcceptsWhatever />: number); // Error string ~> number
                             ^^^^^^ [2]: number

Error -------------------------------------------------------------- jsx.js:31:2

Cannot cast `<AcceptsWhatever />` to number because string is incompatible with
number.

Error: jsx.js:31
 31: (<AcceptsWhatever name="hi">Text</AcceptsWhatever>: number); // Error string ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `<AcceptsWhatever />` to number because string [1] is incompatible with number [2].
  References:
   29: declare function AcceptsWhatever(props: {} | null, children: any): string;
                                                                          ^^^^^^ [1]: string
   31: (<AcceptsWhatever name="hi">Text</AcceptsWhatever>: number); // Error string ~> number
                                                           ^^^^^^ [2]: number

Error -------------------------------------------------------------- jsx.js:34:3

Cannot create `ExpectsProps` element because in the first argument, property
`name` is missing in object type but exists in object type.

Error: jsx.js:34
 34: (<ExpectsProps />); // Error - missing prop
       ^^^^^^^^^^^^ Cannot create `ExpectsProps` element because in the first argument, property `name` is missing in object type [1] but exists in object type [2].
  References:
   10:   C: (props: {}, children: Children) => Elem
                    ^^ [1]: object type
   33: declare function ExpectsProps(props: { name: string }, children: any): string;
                                            ^^^^^^^^^^^^^^^^ [2]: object type

Error -------------------------------------------------------------- jsx.js:35:2

Cannot cast `<ExpectsProps />` to number because string is incompatible with
number.

Error: jsx.js:35
 35: (<ExpectsProps name="hi">Text</ExpectsProps>: number); // Error string ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `<ExpectsProps />` to number because string [1] is incompatible with number [2].
  References:
   33: declare function ExpectsProps(props: { name: string }, children: any): string;
                                                                              ^^^^^^ [1]: string
   35: (<ExpectsProps name="hi">Text</ExpectsProps>: number); // Error string ~> number
                                                     ^^^^^^ [2]: number

Error -------------------------------------------------------------- jsx.js:38:3

Cannot create `ExpectsChildrenTuple` element because in the rest argument, rest
array has an arity of 0 but tuple type has an arity of 1.

Error: jsx.js:38
 38: (<ExpectsChildrenTuple />); // Error - missing child
       ^^^^^^^^^^^^^^^^^^^^ Cannot create `ExpectsChildrenTuple` element because in the rest argument, rest array [1] has an arity of 0 but tuple type [2] has an arity of 1.
  References:
   38: (<ExpectsChildrenTuple />); // Error - missing child
        ^^^^^^^^^^^^^^^^^^^^^^^^ [1]: rest array
   37: declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                   ^^^^^^^^ [2]: tuple type

Error ------------------------------------------------------------- jsx.js:40:25

Cannot create `ExpectsChildrenTuple` element because in the rest argument and
then index 0, number is incompatible with string.

Error: jsx.js:40
 40: (<ExpectsChildrenTuple>{123}</ExpectsChildrenTuple>); // Error: number ~> string
                             ^^^ Cannot create `ExpectsChildrenTuple` element because in the rest argument and then index 0, number [1] is incompatible with string [2].
  References:
   40: (<ExpectsChildrenTuple>{123}</ExpectsChildrenTuple>); // Error: number ~> string
                               ^^^ [1]: number
   37: declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                    ^^^^^^ [2]: string

Error -------------------------------------------------------------- jsx.js:41:3

Cannot create `ExpectsChildrenTuple` element because in the rest argument, rest
array has an arity of 2 but tuple type has an arity of 1.

Error: jsx.js:41
 41: (<ExpectsChildrenTuple>Hi {"there"}</ExpectsChildrenTuple>); // Error: too many children
       ^^^^^^^^^^^^^^^^^^^^ Cannot create `ExpectsChildrenTuple` element because in the rest argument, rest array [1] has an arity of 2 but tuple type [2] has an arity of 1.
  References:
   41: (<ExpectsChildrenTuple>Hi {"there"}</ExpectsChildrenTuple>); // Error: too many children
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: rest array
   37: declare function ExpectsChildrenTuple(props: any, children: [string]): string;
                                                                   ^^^^^^^^ [2]: tuple type

Error ------------------------------------------------------------- jsx.js:46:25

Cannot create `ExpectsChildrenArray` element because in the rest argument and
then type argument `T`, number is incompatible with string.

Error: jsx.js:46
 46: (<ExpectsChildrenArray>{123}</ExpectsChildrenArray>); // Error: number ~> string
                             ^^^ Cannot create `ExpectsChildrenArray` element because in the rest argument and then type argument `T`, number [1] is incompatible with string [2].
  References:
   46: (<ExpectsChildrenArray>{123}</ExpectsChildrenArray>); // Error: number ~> string
                               ^^^ [1]: number
   43: declare function ExpectsChildrenArray(props: any, children: Array<string>): string;
                                                                         ^^^^^^ [2]: string

Error ----------------------------------------------------------- spread.js:7:37

Cannot call `fun` because no more than 2 arguments are expected by function.

Error: spread.js:7
  7: fun(...['hi'], ...[], ...[123], ...[true]); // Error - true is unused
                                         ^^^^ Cannot call `fun` because no more than 2 arguments are expected by function [1].
  References:
    3: function fun(x: 'hi', y: 123) {}
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function

Error ----------------------------------------------------------- spread.js:8:31

Cannot call `fun` because no more than 2 arguments are expected by function.

Error: spread.js:8
  8: fun(...['hi'], ...[true], ...[123]); // Error: true ~> 123 and 123 is unused
                                   ^^^ Cannot call `fun` because no more than 2 arguments are expected by function [1].
  References:
    3: function fun(x: 'hi', y: 123) {}
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: function

Error ----------------------------------------------------------- spread.js:8:20

Cannot call `fun` with boolean bound to `y` because boolean is incompatible with
number literal `123`.

Error: spread.js:8
  8: fun(...['hi'], ...[true], ...[123]); // Error: true ~> 123 and 123 is unused
                        ^^^^ Cannot call `fun` with boolean bound to `y` because boolean [1] is incompatible with number literal `123` [2].
  References:
    8: fun(...['hi'], ...[true], ...[123]); // Error: true ~> 123 and 123 is unused
                          ^^^^ [1]: boolean
    3: function fun(x: 'hi', y: 123) {}
                                ^^^ [2]: number literal `123`

Error ---------------------------------------------------------- spread.js:19:33

Cannot call `funWithRestArray` with boolean bound to `y` because boolean is
incompatible with number literal `123`.

Error: spread.js:19
 19: funWithRestArray(...['hi'], ...[true], ...[123]); // Error: true ~> 123
                                     ^^^^ Cannot call `funWithRestArray` with boolean bound to `y` because boolean [1] is incompatible with number literal `123` [2].
  References:
   19: funWithRestArray(...['hi'], ...[true], ...[123]); // Error: true ~> 123
                                       ^^^^ [1]: boolean
   14: function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                             ^^^ [2]: number literal `123`

Error ---------------------------------------------------------- spread.js:28:37

Cannot call `funWithRestArray` because in the rest argument and then type
argument `T`, string is incompatible with number.

Error: spread.js:28
 28: funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
                                         ^^^^^ Cannot call `funWithRestArray` because in the rest argument and then type argument `T`, string [1] is incompatible with number [2].
  References:
   28: funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
                                           ^^^^^ [1]: string
   14: function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                                                 ^^^^^^ [2]: number

Error ---------------------------------------------------------- spread.js:28:37

Cannot call `funWithRestArray` because in the rest argument, string is
incompatible with number literal `123`.

Error: spread.js:28
 28: funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
                                         ^^^^^ Cannot call `funWithRestArray` because in the rest argument, string [1] is incompatible with number literal `123` [2].
  References:
   28: funWithRestArray('hi', ...arrOf123, 'bye', ...arrOf123);
                                           ^^^^^ [1]: string
   14: function funWithRestArray(x: 'hi', y: 123, ...rest: Array<number>) {}
                                             ^^^ [2]: number literal `123`


Found 24 errors
