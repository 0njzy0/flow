Error: base_class.js:9
  9:   annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                  ^^^^^^ string [1] is incompatible with number [2].
  References:
    9:   annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                    ^^^^^^ [1]: string
    9:   annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                           ^^^^^^ [2]: number

Error: base_class.js:16
 16:   static annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                         ^^^^^^ string [1] is incompatible with number [2].
  References:
   16:   static annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                           ^^^^^^ [1]: string
   16:   static annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                  ^^^^^^ [2]: number

Error: base_class.js:33
 33: (o.annotatedField: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^ Cannot cast `o.annotatedField` to string because number [1] is incompatible with string [2].
  References:
   33: (o.annotatedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^ [1]: number
   33: (o.annotatedField: string); // Error: number ~> string
                          ^^^^^^ [2]: string

Error: base_class.js:35
 35: (Base.annotatedField: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^ Cannot cast `Base.annotatedField` to string because number [1] is incompatible with string [2].
  References:
   35: (Base.annotatedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^ [1]: number
   35: (Base.annotatedField: string); // Error: number ~> string
                             ^^^^^^ [2]: string

Error: base_class.js:41
 41: (o.initializedField: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^ Cannot cast `o.initializedField` to string because number [1] is incompatible with string [2].
  References:
   41: (o.initializedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^ [1]: number
   41: (o.initializedField: string); // Error: number ~> string
                            ^^^^^^ [2]: string

Error: base_class.js:43
 43: (Base.initializedField: number); // Error: string ~> number
      ^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Base.initializedField` to number because string [1] is incompatible with number [2].
  References:
   43: (Base.initializedField: number); // Error: string ~> number
        ^^^^^^^^^^^^^^^^^^^^^ [1]: string
   43: (Base.initializedField: number); // Error: string ~> number
                               ^^^^^^ [2]: number

Error: base_class.js:49
 49: (o.initializedFieldWithThis: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.initializedFieldWithThis` to string because number [1] is incompatible with string [2].
  References:
   49: (o.initializedFieldWithThis: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
   49: (o.initializedFieldWithThis: string); // Error: number ~> string
                                    ^^^^^^ [2]: string

Error: base_class.js:51
 51: (Base.initializedFieldWithThis: number); // Error: string ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Base.initializedFieldWithThis` to number because string [1] is incompatible with number [2].
  References:
   51: (Base.initializedFieldWithThis: number); // Error: string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: string
   51: (Base.initializedFieldWithThis: number); // Error: string ~> number
                                       ^^^^^^ [2]: number

Error: base_class.js:59
 59: (o.annotatedInitializedFieldValid: number); // Error: ?number ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.annotatedInitializedFieldValid` to number because null or undefined [1] is incompatible with number [2].
  References:
   59: (o.annotatedInitializedFieldValid: number); // Error: ?number ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: null or undefined
   59: (o.annotatedInitializedFieldValid: number); // Error: ?number ~> number
                                          ^^^^^^ [2]: number

Error: base_class.js:61
 61: (Base.annotatedInitializedFieldValid: number); // Error: ?number ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Base.annotatedInitializedFieldValid` to number because null or undefined [1] is incompatible with number [2].
  References:
   61: (Base.annotatedInitializedFieldValid: number); // Error: ?number ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: null or undefined
   61: (Base.annotatedInitializedFieldValid: number); // Error: ?number ~> number
                                             ^^^^^^ [2]: number

Error: base_class.js:70
 70: (o.annotatedInitializedFieldInvalid: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.annotatedInitializedFieldInvalid` to string because number [1] is incompatible with string [2].
  References:
   70: (o.annotatedInitializedFieldInvalid: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
   70: (o.annotatedInitializedFieldInvalid: string); // Error: number ~> string
                                            ^^^^^^ [2]: string

Error: base_class.js:72
 72: (Base.annotatedInitializedFieldInvalid: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Base.annotatedInitializedFieldInvalid` to string because number [1] is incompatible with string [2].
  References:
   72: (Base.annotatedInitializedFieldInvalid: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
   72: (Base.annotatedInitializedFieldInvalid: string); // Error: number ~> string
                                               ^^^^^^ [2]: string

Error: derived_class.js:9
  9:   base_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                       ^^^^^^ string [1] is incompatible with number [2].
  References:
    9:   base_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                         ^^^^^^ [1]: string
    9:   base_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                ^^^^^^ [2]: number

Error: derived_class.js:16
 16:   static base_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                              ^^^^^^ string [1] is incompatible with number [2].
  References:
   16:   static base_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                                ^^^^^^ [1]: string
   16:   static base_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                       ^^^^^^ [2]: number

Error: derived_class.js:28
 28:   child_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                        ^^^^^^ string [1] is incompatible with number [2].
  References:
   28:   child_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                          ^^^^^^ [1]: string
   28:   child_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                 ^^^^^^ [2]: number

Error: derived_class.js:35
 35:   static child_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                               ^^^^^^ string [1] is incompatible with number [2].
  References:
   35:   static child_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                                 ^^^^^^ [1]: string
   35:   static child_annotatedInitializedFieldInvalid: number = 'asdf'; // Error: string ~> number
                                                        ^^^^^^ [2]: number

Error: derived_class.js:61
 61: (o.base_annotatedField: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.base_annotatedField` to string because number [1] is incompatible with string [2].
  References:
   61: (o.base_annotatedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^ [1]: number
   61: (o.base_annotatedField: string); // Error: number ~> string
                               ^^^^^^ [2]: string

Error: derived_class.js:63
 63: (Child.base_annotatedField: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Child.base_annotatedField` to string because number [1] is incompatible with string [2].
  References:
   63: (Child.base_annotatedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
   63: (Child.base_annotatedField: string); // Error: number ~> string
                                   ^^^^^^ [2]: string

Error: derived_class.js:66
 66: (o.child_annotatedField: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.child_annotatedField` to string because number [1] is incompatible with string [2].
  References:
   66: (o.child_annotatedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^ [1]: number
   66: (o.child_annotatedField: string); // Error: number ~> string
                                ^^^^^^ [2]: string

Error: derived_class.js:68
 68: (Child.child_annotatedField: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Child.child_annotatedField` to string because number [1] is incompatible with string [2].
  References:
   68: (Child.child_annotatedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
   68: (Child.child_annotatedField: string); // Error: number ~> string
                                    ^^^^^^ [2]: string

Error: derived_class.js:74
 74: (o.base_initializedField: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.base_initializedField` to string because number [1] is incompatible with string [2].
  References:
   74: (o.base_initializedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
   74: (o.base_initializedField: string); // Error: number ~> string
                                 ^^^^^^ [2]: string

Error: derived_class.js:76
 76: (Child.base_initializedField: number); // Error: string ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Child.base_initializedField` to number because string [1] is incompatible with number [2].
  References:
   76: (Child.base_initializedField: number); // Error: string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: string
   76: (Child.base_initializedField: number); // Error: string ~> number
                                     ^^^^^^ [2]: number

Error: derived_class.js:79
 79: (o.child_initializedField: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.child_initializedField` to string because number [1] is incompatible with string [2].
  References:
   79: (o.child_initializedField: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
   79: (o.child_initializedField: string); // Error: number ~> string
                                  ^^^^^^ [2]: string

Error: derived_class.js:81
 81: (Child.child_initializedField: number); // Error: string ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Child.child_initializedField` to number because string [1] is incompatible with number [2].
  References:
   81: (Child.child_initializedField: number); // Error: string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: string
   81: (Child.child_initializedField: number); // Error: string ~> number
                                      ^^^^^^ [2]: number

Error: derived_class.js:87
 87: (o.base_initializedFieldWithThis: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.base_initializedFieldWithThis` to string because number [1] is incompatible with string [2].
  References:
   87: (o.base_initializedFieldWithThis: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
   87: (o.base_initializedFieldWithThis: string); // Error: number ~> string
                                         ^^^^^^ [2]: string

Error: derived_class.js:89
 89: (Child.base_initializedFieldWithThis: number); // Error: string ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Child.base_initializedFieldWithThis` to number because string [1] is incompatible with number [2].
  References:
   89: (Child.base_initializedFieldWithThis: number); // Error: string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: string
   89: (Child.base_initializedFieldWithThis: number); // Error: string ~> number
                                             ^^^^^^ [2]: number

Error: derived_class.js:92
 92: (o.child_initializedFieldWithThis: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.child_initializedFieldWithThis` to string because number [1] is incompatible with string [2].
  References:
   92: (o.child_initializedFieldWithThis: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
   92: (o.child_initializedFieldWithThis: string); // Error: number ~> string
                                          ^^^^^^ [2]: string

Error: derived_class.js:94
 94: (Child.child_initializedFieldWithThis: number); // Error: string ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Child.child_initializedFieldWithThis` to number because string [1] is incompatible with number [2].
  References:
   94: (Child.child_initializedFieldWithThis: number); // Error: string ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: string
   94: (Child.child_initializedFieldWithThis: number); // Error: string ~> number
                                              ^^^^^^ [2]: number

Error: derived_class.js:102
102: (o.base_annotatedInitializedFieldValid: number); // Error: ?number ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.base_annotatedInitializedFieldValid` to number because null or undefined [1] is incompatible with number [2].
  References:
  102: (o.base_annotatedInitializedFieldValid: number); // Error: ?number ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: null or undefined
  102: (o.base_annotatedInitializedFieldValid: number); // Error: ?number ~> number
                                               ^^^^^^ [2]: number

Error: derived_class.js:104
104: (Child.base_annotatedInitializedFieldValid: number); // Error: ?number ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Child.base_annotatedInitializedFieldValid` to number because null or undefined [1] is incompatible with number [2].
  References:
  104: (Child.base_annotatedInitializedFieldValid: number); // Error: ?number ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: null or undefined
  104: (Child.base_annotatedInitializedFieldValid: number); // Error: ?number ~> number
                                                   ^^^^^^ [2]: number

Error: derived_class.js:107
107: (o.child_annotatedInitializedFieldValid: number); // Error: ?number ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.child_annotatedInitializedFieldValid` to number because null or undefined [1] is incompatible with number [2].
  References:
  107: (o.child_annotatedInitializedFieldValid: number); // Error: ?number ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: null or undefined
  107: (o.child_annotatedInitializedFieldValid: number); // Error: ?number ~> number
                                                ^^^^^^ [2]: number

Error: derived_class.js:109
109: (Child.child_annotatedInitializedFieldValid: number); // Error: ?number ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Child.child_annotatedInitializedFieldValid` to number because null or undefined [1] is incompatible with number [2].
  References:
  109: (Child.child_annotatedInitializedFieldValid: number); // Error: ?number ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: null or undefined
  109: (Child.child_annotatedInitializedFieldValid: number); // Error: ?number ~> number
                                                    ^^^^^^ [2]: number

Error: derived_class.js:118
118: (o.base_annotatedInitializedFieldInvalid: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.base_annotatedInitializedFieldInvalid` to string because number [1] is incompatible with string [2].
  References:
  118: (o.base_annotatedInitializedFieldInvalid: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
  118: (o.base_annotatedInitializedFieldInvalid: string); // Error: number ~> string
                                                 ^^^^^^ [2]: string

Error: derived_class.js:120
120: (Child.base_annotatedInitializedFieldInvalid: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Child.base_annotatedInitializedFieldInvalid` to string because number [1] is incompatible with string [2].
  References:
  120: (Child.base_annotatedInitializedFieldInvalid: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
  120: (Child.base_annotatedInitializedFieldInvalid: string); // Error: number ~> string
                                                     ^^^^^^ [2]: string

Error: derived_class.js:123
123: (o.child_annotatedInitializedFieldInvalid: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.child_annotatedInitializedFieldInvalid` to string because number [1] is incompatible with string [2].
  References:
  123: (o.child_annotatedInitializedFieldInvalid: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
  123: (o.child_annotatedInitializedFieldInvalid: string); // Error: number ~> string
                                                  ^^^^^^ [2]: string

Error: derived_class.js:125
125: (Child.child_annotatedInitializedFieldInvalid: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Child.child_annotatedInitializedFieldInvalid` to string because number [1] is incompatible with string [2].
  References:
  125: (Child.child_annotatedInitializedFieldInvalid: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
  125: (Child.child_annotatedInitializedFieldInvalid: string); // Error: number ~> string
                                                      ^^^^^^ [2]: string

Error: derived_class.js:132
132: (o.inherited_initializer: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `o.inherited_initializer` to string because number [1] is incompatible with string [2].
  References:
  132: (o.inherited_initializer: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
  132: (o.inherited_initializer: string); // Error: number ~> string
                                 ^^^^^^ [2]: string

Error: derived_class.js:134
134: (Child.inherited_initializer: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `Child.inherited_initializer` to string because number [1] is incompatible with string [2].
  References:
  134: (Child.inherited_initializer: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: number
  134: (Child.inherited_initializer: string); // Error: number ~> string
                                     ^^^^^^ [2]: string

Error: generic_class.js:15
 15: (o1.p: string); // Error: number ~> string
      ^^^^ Cannot cast `o1.p` to string because number [1] is incompatible with string [2].
  References:
   15: (o1.p: string); // Error: number ~> string
        ^^^^ [1]: number
   15: (o1.p: string); // Error: number ~> string
              ^^^^^^ [2]: string

Error: generic_class.js:18
 18: (ClassAnnotated.p: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^^ Cannot cast `ClassAnnotated.p` to string because number [1] is incompatible with string [2].
  References:
   18: (ClassAnnotated.p: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^^ [1]: number
   18: (ClassAnnotated.p: string); // Error: number ~> string
                          ^^^^^^ [2]: string

Error: generic_class.js:26
 26:   invalid: T = 42; // Error: number ~> Generic<T>
                    ^^ number [1] is incompatible with `T` [2].
  References:
   26:   invalid: T = 42; // Error: number ~> Generic<T>
                      ^^ [1]: number
   26:   invalid: T = 42; // Error: number ~> Generic<T>
                  ^ [2]: `T`

Error: generic_class.js:29
 29:   static invalid: T = 42; // Error: number ~> Generic<T>
                           ^^ number [1] is incompatible with `T` [2].
  References:
   29:   static invalid: T = 42; // Error: number ~> Generic<T>
                             ^^ [1]: number
   29:   static invalid: T = 42; // Error: number ~> Generic<T>
                         ^ [2]: `T`

Error: scoping.js:24
 24: (new Foo().outer: string); // Error: number ~> string
      ^^^^^^^^^^^^^^^ Cannot cast `new Foo().outer` to string because number [1] is incompatible with string [2].
  References:
   24: (new Foo().outer: string); // Error: number ~> string
        ^^^^^^^^^^^^^^^ [1]: number
   24: (new Foo().outer: string); // Error: number ~> string
                         ^^^^^^ [2]: string

Error: scoping.js:26
 26: (Foo.outer: string); // Error: number ~> string
      ^^^^^^^^^ Cannot cast `Foo.outer` to string because number [1] is incompatible with string [2].
  References:
   26: (Foo.outer: string); // Error: number ~> string
        ^^^^^^^^^ [1]: number
   26: (Foo.outer: string); // Error: number ~> string
                   ^^^^^^ [2]: string

Error: scoping.js:33
 33: (new Foo().selfTyped: number); // Error: Foo ~> number
      ^^^^^^^^^^^^^^^^^^^ Cannot cast `new Foo().selfTyped` to number because `Foo` [1] is incompatible with number [2].
  References:
   33: (new Foo().selfTyped: number); // Error: Foo ~> number
        ^^^^^^^^^^^^^^^^^^^ [1]: `Foo`
   33: (new Foo().selfTyped: number); // Error: Foo ~> number
                             ^^^^^^ [2]: number

Error: scoping.js:35
 35: (Foo.selfTyped: number); // Error: Foo ~> number
      ^^^^^^^^^^^^^ Cannot cast `Foo.selfTyped` to number because `Foo` [1] is incompatible with number [2].
  References:
   35: (Foo.selfTyped: number); // Error: Foo ~> number
        ^^^^^^^^^^^^^ [1]: `Foo`
   35: (Foo.selfTyped: number); // Error: Foo ~> number
                       ^^^^^^ [2]: number

Error: scoping.js:38
 38: (new Foo().selfTypedInit: number); // Error: Foo ~> number
      ^^^^^^^^^^^^^^^^^^^^^^^ Cannot cast `new Foo().selfTypedInit` to number because `Foo` [1] is incompatible with number [2].
  References:
   38: (new Foo().selfTypedInit: number); // Error: Foo ~> number
        ^^^^^^^^^^^^^^^^^^^^^^^ [1]: `Foo`
   38: (new Foo().selfTypedInit: number); // Error: Foo ~> number
                                 ^^^^^^ [2]: number

Error: scoping.js:40
 40: (Foo.selfTypedInit: number); // Error: Foo ~> number
      ^^^^^^^^^^^^^^^^^ Cannot cast `Foo.selfTypedInit` to number because `Foo` [1] is incompatible with number [2].
  References:
   40: (Foo.selfTypedInit: number); // Error: Foo ~> number
        ^^^^^^^^^^^^^^^^^ [1]: `Foo`
   40: (Foo.selfTypedInit: number); // Error: Foo ~> number
                           ^^^^^^ [2]: number


Found 48 errors
