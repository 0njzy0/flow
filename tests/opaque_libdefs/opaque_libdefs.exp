Error: test.js:8
  8: function flowsSomethingToQueue(x: number): Queue { return x; } // Error number ~> Queue
                                                               ^ Cannot return `x` because number [1] is incompatible with `Queue` [2].
  References:
    8: function flowsSomethingToQueue(x: number): Queue { return x; } // Error number ~> Queue
                                         ^^^^^^ [1]: number
    8: function flowsSomethingToQueue(x: number): Queue { return x; } // Error number ~> Queue
                                                  ^^^^^ [2]: `Queue`

Error: test.js:9
  9: function flowsQueueToSomething(q: Queue): number {return q; } // Error Queue ~> number
                                                              ^ Cannot return `q` because `Queue` [1] is incompatible with number [2].
  References:
    9: function flowsQueueToSomething(q: Queue): number {return q; } // Error Queue ~> number
                                         ^^^^^ [1]: `Queue`
    9: function flowsQueueToSomething(q: Queue): number {return q; } // Error Queue ~> number
                                                 ^^^^^^ [2]: number

Error: test.js:13
 13: counter_to_number(y); // Error: number ~> Counter
                       ^ number. This type is incompatible with the expected param type of
  8: declare function counter_to_number(c: Counter): number;
                                           ^^^^^^^ Counter. See lib: flow-typed/decls.js:8

Error: test.js:22
 22:     return x; // Error: string ~> number, number ~> string
                ^ Cannot return `x` because in type argument `T`, number [1] is incompatible with string [2].
  References:
   21: function convertNumberToString(x: PolyStack<number>): PolyStack<string> {
                                                   ^^^^^^ [1]: number
   21: function convertNumberToString(x: PolyStack<number>): PolyStack<string> {
                                                                       ^^^^^^ [2]: string

Error: test.js:27
 27:     return x; // Error string ~> number
                ^ Cannot return `x` because in type argument `T`, number [1] is incompatible with string [2].
  References:
   26: function contraBad(x: Contra<number>): Contra<number | string> {
                                    ^^^^^^ [1]: number
   26: function contraBad(x: Contra<number>): Contra<number | string> {
                                                              ^^^^^^ [2]: string


Found 5 errors
