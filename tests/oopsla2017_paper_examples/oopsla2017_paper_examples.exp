Error: example1.js:3
  3: function pipe(x, f) { f(x); }
                           ^^^^ call of `f`. Function cannot be called on possibly null value
  3: function pipe(x, f) { f(x); }
                           ^ null

Error: example5.js:12
 12:   return x.kind; // error
                ^^^^ property `kind`. Property cannot be accessed on possibly null value
 12:   return x.kind; // error
              ^ null

Error: example6.js:9
  9: onString(id);
              ^^ function. Could not decide which case to select
  7: function onString(f: Ambiguous) { f(""); }
                          ^^^^^^^^^ Ambiguous
  Case 1 may work:
    5: type Ambiguous = IDString | IDNullableString;
                        ^^^^^^^^ IDString
  But if it doesn't, case 2 looks promising too:
    5: type Ambiguous = IDString | IDNullableString;
                                   ^^^^^^^^^^^^^^^^ IDNullableString
  Please provide additional annotation(s) to determine whether case 1 works (or consider merging it with case 2):
    8: let id = (x) => x;
                       ^ return
    8: let id = (x) => x;
                 ^ x

Error: example7.js:14
 14: stringIsString({ type: "string", val: 0 }); // error
                                           ^ Cannot call `stringIsString` with object literal bound to `x` because in property `val`, number [1] is incompatible with string [2].
  References:
   14: stringIsString({ type: "string", val: 0 }); // error
                                             ^ [1]: number
    6:   | { type: "string", val: string }
                                  ^^^^^^ [2]: string


Found 4 errors
