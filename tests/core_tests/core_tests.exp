Error ----------------------------------------------------------------------------------------------------- map.js:23:21

Cannot call `Map` with array literal bound to `iterable` because in property `@@iterator`, the return value, and then
type argument `Yield`; number is incompatible with tuple type.

Error: map.js:23
 23:     let x = new Map(['foo', 123]); // error
                         ^^^^^^^^^^^^ Cannot call `Map` with array literal bound to `iterable` because in property `@@iterator`, the return value, and then type argument `Yield`; number [1] is incompatible with tuple type [2].
  References:
   23:     let x = new Map(['foo', 123]); // error
                                   ^^^ [1]: number
  542:     constructor(iterable: ?Iterable<[K, V]>): void;
                                           ^^^^^^ [2]: tuple type. See lib: <BUILTINS>/core.js:542

Error ----------------------------------------------------------------------------------------------------- map.js:23:21

Cannot call `Map` with array literal bound to `iterable` because in property `@@iterator`, the return value, and then
type argument `Yield`; string is incompatible with tuple type.

Error: map.js:23
 23:     let x = new Map(['foo', 123]); // error
                         ^^^^^^^^^^^^ Cannot call `Map` with array literal bound to `iterable` because in property `@@iterator`, the return value, and then type argument `Yield`; string [1] is incompatible with tuple type [2].
  References:
   23:     let x = new Map(['foo', 123]); // error
                            ^^^^^ [1]: string
  542:     constructor(iterable: ?Iterable<[K, V]>): void;
                                           ^^^^^^ [2]: tuple type. See lib: <BUILTINS>/core.js:542

Error ----------------------------------------------------------------------------------------------------- map.js:24:44

Cannot assign `new Map(...)` to `y` because in type argument `K`, string is incompatible with number.

Error: map.js:24
 24:     let y: Map<number, string> = new Map([['foo', 123]]); // error
                                                ^^^^^ Cannot assign `new Map(...)` to `y` because in type argument `K`, string [1] is incompatible with number [2].
  References:
   24:     let y: Map<number, string> = new Map([['foo', 123]]); // error
                                                  ^^^^^ [1]: string
   24:     let y: Map<number, string> = new Map([['foo', 123]]); // error
                      ^^^^^^ [2]: number

Error ----------------------------------------------------------------------------------------------------- map.js:24:51

Cannot assign `new Map(...)` to `y` because in type argument `V`, number is incompatible with string.

Error: map.js:24
 24:     let y: Map<number, string> = new Map([['foo', 123]]); // error
                                                       ^^^ Cannot assign `new Map(...)` to `y` because in type argument `V`, number [1] is incompatible with string [2].
  References:
   24:     let y: Map<number, string> = new Map([['foo', 123]]); // error
                                                         ^^^ [1]: number
   24:     let y: Map<number, string> = new Map([['foo', 123]]); // error
                              ^^^^^^ [2]: string

Error ------------------------------------------------------------------------------------------------------ map.js:29:6

Cannot cast `x.get(...)` to boolean because number is incompatible with boolean.

Error: map.js:29
 29:     (x.get('foo'): boolean); // error, string | void
          ^^^^^^^^^^^^ Cannot cast `x.get(...)` to boolean because number [1] is incompatible with boolean [2].
  References:
   28:   function(x: Map<string, number>) {
                                 ^^^^^^ [1]: number
   29:     (x.get('foo'): boolean); // error, string | void
                          ^^^^^^^ [2]: boolean

Error ------------------------------------------------------------------------------------------------------ map.js:29:6

Cannot cast `x.get(...)` to boolean because undefined is incompatible with boolean.

Error: map.js:29
 29:     (x.get('foo'): boolean); // error, string | void
          ^^^^^^^^^^^^ Cannot cast `x.get(...)` to boolean because undefined [1] is incompatible with boolean [2].
  References:
  547:     get(key: K): V | void;
                            ^^^^ [1]: undefined. See lib: <BUILTINS>/core.js:547
   29:     (x.get('foo'): boolean); // error, string | void
                          ^^^^^^^ [2]: boolean

Error ----------------------------------------------------------------------------------------------------- map.js:30:11

Cannot call `x.get` with `123` bound to `key` because number is incompatible with string.

Error: map.js:30
 30:     x.get(123); // error, wrong key type
               ^^^ Cannot call `x.get` with `123` bound to `key` because number [1] is incompatible with string [2].
  References:
   30:     x.get(123); // error, wrong key type
                 ^^^ [1]: number
   28:   function(x: Map<string, number>) {
                         ^^^^^^ [2]: string

Error -------------------------------------------------------------------------------------------------- regexp.js:26:19

Cannot call `RegExp` with `'z'` bound to `flags` because string literal `z` is incompatible with `RegExp$flags` since
`z` is not a member of the set.

Error: regexp.js:26
 26:     RegExp('foo', 'z'); // error
                       ^^^ Cannot call `RegExp` with `'z'` bound to `flags` because string literal `z` [1] is incompatible with `RegExp$flags` [2] since `z` is not a member of the set.
  References:
   26:     RegExp('foo', 'z'); // error
                         ^^^ [1]: string literal `z`
  330: type RegExp$flags = $CharSet<"gimsuy">
                           ^^^^^^^^^^^^^^^^^^ [2]: `RegExp$flags`. See lib: <BUILTINS>/core.js:330

Error -------------------------------------------------------------------------------------------------- regexp.js:27:23

Cannot call `RegExp` with `'z'` bound to `flags` because string literal `z` is incompatible with `RegExp$flags` since
`z` is not a member of the set.

Error: regexp.js:27
 27:     new RegExp('foo', 'z'); // error
                           ^^^ Cannot call `RegExp` with `'z'` bound to `flags` because string literal `z` [1] is incompatible with `RegExp$flags` [2] since `z` is not a member of the set.
  References:
   27:     new RegExp('foo', 'z'); // error
                             ^^^ [1]: string literal `z`
  330: type RegExp$flags = $CharSet<"gimsuy">
                           ^^^^^^^^^^^^^^^^^^ [2]: `RegExp$flags`. See lib: <BUILTINS>/core.js:330

Error ------------------------------------------------------------------------------------------------- weakset.js:19:23

Cannot call `WeakSet` with array literal bound to `iterable` because in property `@@iterator`, the return value, and
then type argument `Yield`; number is incompatible with object type.

Error: weakset.js:19
 19: let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                           ^^^^^^^^^ Cannot call `WeakSet` with array literal bound to `iterable` because in property `@@iterator`, the return value, and then type argument `Yield`; number [1] is incompatible with object type [2].
  References:
   19: let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                              ^ [1]: number
  580: declare class WeakSet<T: Object> {
                                ^^^^^^ [2]: object type. See lib: <BUILTINS>/core.js:580

Error ------------------------------------------------------------------------------------------------- weakset.js:19:23

Cannot call `WeakSet` with array literal bound to `iterable` because in property `@@iterator`, the return value, and
then type argument `Yield`; number is incompatible with object type.

Error: weakset.js:19
 19: let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                           ^^^^^^^^^ Cannot call `WeakSet` with array literal bound to `iterable` because in property `@@iterator`, the return value, and then type argument `Yield`; number [1] is incompatible with object type [2].
  References:
   19: let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                                 ^ [1]: number
  580: declare class WeakSet<T: Object> {
                                ^^^^^^ [2]: object type. See lib: <BUILTINS>/core.js:580

Error ------------------------------------------------------------------------------------------------- weakset.js:19:23

Cannot call `WeakSet` with array literal bound to `iterable` because in property `@@iterator`, the return value, and
then type argument `Yield`; number is incompatible with object type.

Error: weakset.js:19
 19: let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                           ^^^^^^^^^ Cannot call `WeakSet` with array literal bound to `iterable` because in property `@@iterator`, the return value, and then type argument `Yield`; number [1] is incompatible with object type [2].
  References:
   19: let ws3 = new WeakSet([1, 2, 3]); // error, must be objects
                                    ^ [1]: number
  580: declare class WeakSet<T: Object> {
                                ^^^^^^ [2]: object type. See lib: <BUILTINS>/core.js:580

Error ------------------------------------------------------------------------------------------------- weakset.js:36:23

Cannot call `WeakSet` with `numbers()` bound to `iterable` because in type argument `Yield`, number is incompatible with
object type.

Error: weakset.js:36
 36: let ws5 = new WeakSet(numbers()); // error, must be objects
                           ^^^^^^^^^ Cannot call `WeakSet` with `numbers()` bound to `iterable` because in type argument `Yield`, number [1] is incompatible with object type [2].
  References:
   29: function* numbers(): Iterable<number> {
                                     ^^^^^^ [1]: number
  580: declare class WeakSet<T: Object> {
                                ^^^^^^ [2]: object type. See lib: <BUILTINS>/core.js:580


Found 13 errors
