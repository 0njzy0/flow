Error ------------------------------------------------------------- test.js:2:10

Cannot use `Out` in an input position because `Out` is expected to occur only in
output positions.

Error: test.js:2
  2:   foo(x: Out): Out { return x; }
              ^^^ Cannot use `Out` [1] in an input position because `Out` [1] is expected to occur only in output positions.
  References:
    1: class Variance<+Out,-In> {
                       ^^^ [1]: `Out`

Error ------------------------------------------------------------- test.js:3:15

Cannot use `In` in an output position because `In` is expected to occur only in
input positions.

Error: test.js:3
  3:   bar(y: In): In { return y; }
                   ^^ Cannot use `In` [1] in an output position because `In` [1] is expected to occur only in input positions.
  References:
    1: class Variance<+Out,-In> {
                            ^^ [1]: `In`

Error ------------------------------------------------------------- test.js:13:4

Cannot cast `v1` to `Variance` because in type argument `In`, `B` is
incompatible with `A`.

Error: test.js:13
 13:   (v1: Variance<B,A>); // error on both targs (A ~/~> B)
        ^^ Cannot cast `v1` to `Variance` because in type argument `In`, `B` [1] is incompatible with `A` [2].
  References:
   10:   v1: Variance<A,B>,
                        ^ [1]: `B`
   13:   (v1: Variance<B,A>); // error on both targs (A ~/~> B)
                         ^ [2]: `A`

Error ------------------------------------------------------------- test.js:13:4

Cannot cast `v1` to `Variance` because in type argument `Out`, `A` is
incompatible with `B`.

Error: test.js:13
 13:   (v1: Variance<B,A>); // error on both targs (A ~/~> B)
        ^^ Cannot cast `v1` to `Variance` because in type argument `Out`, `A` [1] is incompatible with `B` [2].
  References:
   10:   v1: Variance<A,B>,
                      ^ [1]: `A`
   13:   (v1: Variance<B,A>); // error on both targs (A ~/~> B)
                       ^ [2]: `B`

Error ------------------------------------------------------------- test.js:18:9

Cannot use `Out` in an input/output position because `Out` is expected to occur
only in output positions.

Error: test.js:18
 18:   inv1: Out; // error
             ^^^ Cannot use `Out` [1] in an input/output position because `Out` [1] is expected to occur only in output positions.
  References:
   17: class PropVariance<+Out,-In> {
                           ^^^ [1]: `Out`

Error ------------------------------------------------------------- test.js:19:9

Cannot use `In` in an input/output position because `In` is expected to occur
only in input positions.

Error: test.js:19
 19:   inv2: In; // error
             ^^ Cannot use `In` [1] in an input/output position because `In` [1] is expected to occur only in input positions.
  References:
   17: class PropVariance<+Out,-In> {
                                ^^ [1]: `In`

Error ------------------------------------------------------------- test.js:20:9

Cannot use `Out` in an input position because `Out` is expected to occur only in
output positions.

Error: test.js:20
 20:   -co1: Out; // error
             ^^^ Cannot use `Out` [1] in an input position because `Out` [1] is expected to occur only in output positions.
  References:
   17: class PropVariance<+Out,-In> {
                           ^^^ [1]: `Out`

Error ------------------------------------------------------------ test.js:23:10

Cannot use `In` in an output position because `In` is expected to occur only in
input positions.

Error: test.js:23
 23:   +con2: In; // error
              ^^ Cannot use `In` [1] in an output position because `In` [1] is expected to occur only in input positions.
  References:
   17: class PropVariance<+Out,-In> {
                                ^^ [1]: `In`

Error ------------------------------------------------------------ test.js:25:27

Cannot use `Out` in an input/output position because `Out` is expected to occur
only in output positions.

Error: test.js:25
 25:   inv_dict1: {[k:string]: Out}; // error
                               ^^^ Cannot use `Out` [1] in an input/output position because `Out` [1] is expected to occur only in output positions.
  References:
   17: class PropVariance<+Out,-In> {
                           ^^^ [1]: `Out`

Error ------------------------------------------------------------ test.js:26:27

Cannot use `In` in an input/output position because `In` is expected to occur
only in input positions.

Error: test.js:26
 26:   inv_dict2: {[k:string]: In}; // error
                               ^^ Cannot use `In` [1] in an input/output position because `In` [1] is expected to occur only in input positions.
  References:
   17: class PropVariance<+Out,-In> {
                                ^^ [1]: `In`

Error ------------------------------------------------------------ test.js:28:28

Cannot use `In` in an output position because `In` is expected to occur only in
input positions.

Error: test.js:28
 28:   +co_dict2: {+[k:string]: In}; // error
                                ^^ Cannot use `In` [1] in an output position because `In` [1] is expected to occur only in input positions.
  References:
   17: class PropVariance<+Out,-In> {
                                ^^ [1]: `In`

Error ------------------------------------------------------------ test.js:29:29

Cannot use `Out` in an input position because `Out` is expected to occur only in
output positions.

Error: test.js:29
 29:   +con_dict1: {-[k:string]: Out}; // error
                                 ^^^ Cannot use `Out` [1] in an input position because `Out` [1] is expected to occur only in output positions.
  References:
   17: class PropVariance<+Out,-In> {
                           ^^^ [1]: `Out`


Found 12 errors
