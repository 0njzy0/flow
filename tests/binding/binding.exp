Error: const.js:4
  4: x++;
     ^ Cannot reassign constant `x` [1].
  References:
    1: const x = 0;
             ^ [1]: `x`

Error: const.js:5
  5: x--;
     ^ Cannot reassign constant `x` [1].
  References:
    1: const x = 0;
             ^ [1]: `x`

Error: const.js:6
  6: x += 0;
     ^ Cannot reassign constant `x` [1].
  References:
    1: const x = 0;
             ^ [1]: `x`

Error: const.js:7
  7: x -= 0;
     ^ Cannot reassign constant `x` [1].
  References:
    1: const x = 0;
             ^ [1]: `x`

Error: const.js:8
  8: x /= 0;
     ^ Cannot reassign constant `x` [1].
  References:
    1: const x = 0;
             ^ [1]: `x`

Error: const.js:9
  9: x %= 0;
     ^ Cannot reassign constant `x` [1].
  References:
    1: const x = 0;
             ^ [1]: `x`

Error: const.js:10
 10: x <<= 0
     ^ Cannot reassign constant `x` [1].
  References:
    1: const x = 0;
             ^ [1]: `x`

Error: const.js:11
 11: x >>= 0;
     ^ Cannot reassign constant `x` [1].
  References:
    1: const x = 0;
             ^ [1]: `x`

Error: const.js:12
 12: x >>>= 0;
     ^ Cannot reassign constant `x` [1].
  References:
    1: const x = 0;
             ^ [1]: `x`

Error: const.js:13
 13: x |= 0;
     ^ Cannot reassign constant `x` [1].
  References:
    1: const x = 0;
             ^ [1]: `x`

Error: const.js:14
 14: x ^= 0;
     ^ Cannot reassign constant `x` [1].
  References:
    1: const x = 0;
             ^ [1]: `x`

Error: const.js:15
 15: x &= 0;
     ^ Cannot reassign constant `x` [1].
  References:
    1: const x = 0;
             ^ [1]: `x`

Error: const.js:21
 21: (foo: number); // error: string ~> number
      ^^^ Cannot cast `foo` to number because string [1] is incompatible with number [2].
  References:
   19: const { foo } = { foo: "foo" }
                              ^^^^^ [1]: string
   21: (foo: number); // error: string ~> number
             ^^^^^^ [2]: number

Error: const.js:22
 22: (bar: number); // error: string ~> number
      ^^^ Cannot cast `bar` to number because string [1] is incompatible with number [2].
  References:
   20: const [ bar ] = ["bar"];
                        ^^^^^ [1]: string
   22: (bar: number); // error: string ~> number
             ^^^^^^ [2]: number

Error: const.js:26
 26:   (baz: number); // error: string ~> number
        ^^^ Cannot cast `baz` to number because string [1] is incompatible with number [2].
  References:
   24: declare var bazzes: { baz: string }[];
                                  ^^^^^^ [1]: string
   26:   (baz: number); // error: string ~> number
               ^^^^^^ [2]: number

Error: rebinding.js:16
 16:   type A = number;  // error: name already bound
            ^ Cannot declare `A` [1] because the name is already bound.
  References:
   15:   type A = number;
              ^ [1]: `A`

Error: rebinding.js:21
 21:   class A {}        // error: name already bound
             ^ Cannot declare `A` [1] because the name is already bound.
  References:
   20:   type A = number;
              ^ [1]: `A`

Error: rebinding.js:26
 26:   let A = 0;        // error: name already bound
           ^ Cannot declare `A` [1] because the name is already bound.
  References:
   25:   type A = number;
              ^ [1]: `A`

Error: rebinding.js:31
 31:   const A = 0;     // error: name already bound
             ^ Cannot declare `A` [1] because the name is already bound.
  References:
   30:   type A = number;
              ^ [1]: `A`

Error: rebinding.js:36
 36:   var A = 0;        // error: name already bound
           ^ Cannot declare `A` [1] because the name is already bound.
  References:
   35:   type A = number;
              ^ [1]: `A`

Error: rebinding.js:41
 41:   A = 42;           // error: type alias ref'd from value pos
       ^ Cannot reference type `A` [1] from a value position.
  References:
   40:   type A = number;
              ^ [1]: `A`

Error: rebinding.js:48
 48:   type A = number;  // error: name already bound
            ^ Cannot declare `A` [1] because the name is already bound.
  References:
   47:   class A {}
               ^ [1]: `A`

Error: rebinding.js:53
 53:   class A {}        // error: name already bound
             ^ Cannot declare `A` [1] because the name is already bound.
  References:
   52:   class A {}
               ^ [1]: `A`

Error: rebinding.js:58
 58:   let A = 0;        // error: name already bound
           ^ Cannot declare `A` [1] because the name is already bound.
  References:
   57:   class A {}
               ^ [1]: `A`

Error: rebinding.js:63
 63:   const A = 0;     // error: name already bound
             ^ Cannot declare `A` [1] because the name is already bound.
  References:
   62:   class A {}
               ^ [1]: `A`

Error: rebinding.js:68
 68:   var A = 0;        // error: name already bound
           ^ Cannot declare `A` [1] because the name is already bound.
  References:
   67:   class A {}
               ^ [1]: `A`

Error: rebinding.js:75
 75:   type A = number;  // error: name already bound
            ^ Cannot declare `A` [1] because the name is already bound.
  References:
   74:   let A = 0;
             ^ [1]: `A`

Error: rebinding.js:80
 80:   class A {}        // error: name already bound
             ^ Cannot declare `A` [1] because the name is already bound.
  References:
   79:   let A = 0;
             ^ [1]: `A`

Error: rebinding.js:85
 85:   let A = 0;        // error: name already bound
           ^ Cannot declare `A` [1] because the name is already bound.
  References:
   84:   let A = 0;
             ^ [1]: `A`

Error: rebinding.js:90
 90:   const A = 0;     // error: name already bound
             ^ Cannot declare `A` [1] because the name is already bound.
  References:
   89:   let A = 0;
             ^ [1]: `A`

Error: rebinding.js:95
 95:   var A = 0;        // error: name already bound
           ^ Cannot declare `A` [1] because the name is already bound.
  References:
   94:   let A = 0;
             ^ [1]: `A`

Error: rebinding.js:102
102:   type A = number;  // error: name already bound
            ^ Cannot declare `A` [1] because the name is already bound.
  References:
  101:   const A = 0;
               ^ [1]: `A`

Error: rebinding.js:107
107:   class A {}        // error: name already bound
             ^ Cannot declare `A` [1] because the name is already bound.
  References:
  106:   const A = 0;
               ^ [1]: `A`

Error: rebinding.js:112
112:   let A = 0;        // error: name already bound
           ^ Cannot declare `A` [1] because the name is already bound.
  References:
  111:   const A = 0;
               ^ [1]: `A`

Error: rebinding.js:117
117:   const A = 0;     // error: name already bound
             ^ Cannot declare `A` [1] because the name is already bound.
  References:
  116:   const A = 0;
               ^ [1]: `A`

Error: rebinding.js:122
122:   var A = 0;        // error: name already bound
           ^ Cannot declare `A` [1] because the name is already bound.
  References:
  121:   const A = 0;
               ^ [1]: `A`

Error: rebinding.js:127
127:   A = 42;           // error: cannot be reassigned
       ^ Cannot reassign constant `A` [1].
  References:
  126:   const A = 0;
               ^ [1]: `A`

Error: rebinding.js:134
134:   type A = number;  // error: name already bound
            ^ Cannot declare `A` [1] because the name is already bound.
  References:
  133:   var A = 0;
             ^ [1]: `A`

Error: rebinding.js:139
139:   class A {}        // error: name already bound
             ^ Cannot declare `A` [1] because the name is already bound.
  References:
  138:   var A = 0;
             ^ [1]: `A`

Error: rebinding.js:144
144:   let A = 0;        // error: name already bound
           ^ Cannot declare `A` [1] because the name is already bound.
  References:
  143:   var A = 0;
             ^ [1]: `A`

Error: rebinding.js:149
149:   const A = 0;      // error: name already bound
             ^ Cannot declare `A` [1] because the name is already bound.
  References:
  148:   var A = 0;
             ^ [1]: `A`

Error: rebinding.js:167
167:     function a() {}; // error: name already bound
         ^^^^^^^^^^^^^^^ Cannot declare `a` [1] because the name is already bound.
  References:
  166:     function a() {};
           ^^^^^^^^^^^^^^^ [1]: `a`

Error: rebinding.js:177
177:       var x = 0; // error: name already bound
               ^ Cannot declare `x` [1] because the name is already bound.
  References:
  175:     let x = 0;
               ^ [1]: `x`

Error: rebinding.js:186
186:       type x = string; // error: name already bound
                ^ Cannot declare `x` [1] because the name is already bound.
  References:
  184:     let x = 0;
               ^ [1]: `x`

Error: rebinding.js:193
193: function fn_params_name_clash(x, x /* error: x already bound */) {}
                                      ^ Cannot declare `x` [1] because the name is already bound.
  References:
  193: function fn_params_name_clash(x, x /* error: x already bound */) {}
                                     ^ [1]: `x`

Error: rebinding.js:195
195:   let x = 0; // error: x already bound
           ^ Cannot declare `x` [1] because the name is already bound.
  References:
  194: function fn_params_clash_fn_binding(x,y) {
                                           ^ [1]: `x`

Error: scope.js:6
  6:     var b = ""; // error: string ~> number
                 ^^ Cannot assign empty string to `b` because string [1] is incompatible with number [2].
  References:
    6:     var b = ""; // error: string ~> number
                   ^^ [1]: string
    3:   var b: number = 0;
                ^^^^^^ [2]: number

Error: scope.js:16
 16:       var b = ""; // error: string ~> number
                   ^^ Cannot assign empty string to `b` because string [1] is incompatible with number [2].
  References:
   16:       var b = ""; // error: string ~> number
                     ^^ [1]: string
   12:   var b: number = 0;
                ^^^^^^ [2]: number

Error: scope.js:19
 19:       let a = ""; // error: a already bound in switch
               ^ Cannot declare `a` [1] because the name is already bound.
  References:
   15:       let a = ""; // ok: local to switch
                 ^ [1]: `a`

Error: scope.js:30
 30:      a = "";     // error: assign before declaration
          ^ Cannot use variable `a` [1] because the declaration either comes later or was skipped.
  References:
   36:       let a = "";
                 ^ [1]: `a`

Error: scope.js:33
 33:      var b = a;  // error: use before declaration
                  ^ Cannot use variable `a` [1] because the declaration either comes later or was skipped.
  References:
   36:       let a = "";
                 ^ [1]: `a`

Error: scope.js:39
 39:       a = "";     // error: skipped initializer
           ^ Cannot use variable `a` [1] because the declaration either comes later or was skipped.
  References:
   36:       let a = "";
                 ^ [1]: `a`

Error: scope.js:42
 42:       var c:string = a;  // error: skipped initializer
                          ^ Cannot use variable `a` [1] because the declaration either comes later or was skipped.
  References:
   36:       let a = "";
                 ^ [1]: `a`

Error: scope.js:45
 45:   a = ""; // error: a no longer in scope
       ^ Cannot resolve name `a`.

Error: scope.js:66
 66:   for (var a = "" /* error: string ~> number */;;) {}
                    ^^ Cannot assign empty string to `a` because string [1] is incompatible with number [2].
  References:
   66:   for (var a = "" /* error: string ~> number */;;) {}
                      ^^ [1]: string
   65:   var a: number = 0;
                ^^^^^^ [2]: number

Error: scope.js:66
 66:   for (var a = "" /* error: string ~> number */;;) {}
                    ^^ string [1] is incompatible with number [2].
  References:
   66:   for (var a = "" /* error: string ~> number */;;) {}
                      ^^ [1]: string
   65:   var a: number = 0;
                ^^^^^^ [2]: number

Error: scope.js:76
 76:   for (var a /* error: string ~> number */ in o) {}
                ^ Cannot assign string to `a` because string [1] is incompatible with number [2].
  References:
   76:   for (var a /* error: string ~> number */ in o) {}
                  ^ [1]: string
   75:   var a: number = 0;
                ^^^^^^ [2]: number

Error: scope.js:76
 76:   for (var a /* error: string ~> number */ in o) {}
                ^ string [1] is incompatible with number [2].
  References:
   76:   for (var a /* error: string ~> number */ in o) {}
                  ^ [1]: string
   75:   var a: number = 0;
                ^^^^^^ [2]: number

Error: scope.js:86
 86:   for (var a /* error: string ~> number */ of xs) {}
                                                   ^^ Cannot assign `a` to `a` because string [1] is incompatible with number [2].
  References:
   84: function for_of_scope_var(xs: string[]) {
                                     ^^^^^^ [1]: string
   85:   var a: number = 0;
                ^^^^^^ [2]: number

Error: scope.js:86
 86:   for (var a /* error: string ~> number */ of xs) {}
                                                   ^^ string [1] is incompatible with number [2].
  References:
   84: function for_of_scope_var(xs: string[]) {
                                     ^^^^^^ [1]: string
   85:   var a: number = 0;
                ^^^^^^ [2]: number

Error: scope.js:93
 93:   ): number {
          ^^^^^^ Cannot assign function to `f` because in the return value, number [1] is incompatible with string [2].
  References:
   93:   ): number {
            ^^^^^^ [1]: number
   92:     x: () => string = f // error: number ~> string
                    ^^^^^^ [2]: string

Error: scope.js:103
103:     return x(); // error: string ~> number
                ^^^ Cannot return `x()` because string [1] is incompatible with number [2].
  References:
  100:   let a = "";
                 ^^ [1]: string
  101:   function f0(x = () => a): number {
                                   ^^^^^^ [2]: number

Error: scope.js:105
105:   function f1(x = b /* error: cannot resolve b */): number {
                       ^ Cannot resolve name `b`.

Error: tdz.js:25
 25:   var v = x * c;  // errors, let + const referenced before decl
               ^ Cannot use variable `x` [1] because the declaration either comes later or was skipped.
  References:
   26:   let x = 0;
             ^ [1]: `x`

Error: tdz.js:25
 25:   var v = x * c;  // errors, let + const referenced before decl
                   ^ Cannot use variable `c` [1] because the declaration either comes later or was skipped.
  References:
   27:   const c = 0;
               ^ [1]: `c`

Error: tdz.js:31
 31:   x = 10;         // error, attempt to write to let before decl
       ^ Cannot use variable `x` [1] because the declaration either comes later or was skipped.
  References:
   32:   let x = 0;
             ^ [1]: `x`

Error: tdz.js:34
 34:     y = 10;       // error, attempt to write to let before decl
         ^ Cannot use variable `y` [1] because the declaration either comes later or was skipped.
  References:
   35:     let y = 0;
               ^ [1]: `y`

Error: tdz.js:41
 41:     var v = x * c; // errors, let + const referenced before decl
                 ^ Cannot use variable `x` [1] because the declaration either comes later or was skipped.
  References:
   43:   let x = 0;
             ^ [1]: `x`

Error: tdz.js:41
 41:     var v = x * c; // errors, let + const referenced before decl
                     ^ Cannot use variable `c` [1] because the declaration either comes later or was skipped.
  References:
   44:   const c = 0;
               ^ [1]: `c`

Error: tdz.js:80
 80: var y = new C(); // error: let ref before decl from value position
                 ^ Cannot use variable `C` [1] because the declaration either comes later or was skipped.
  References:
   82: class C {}
             ^ [1]: `C`

Error: tdz.js:96
 96: f(a); // error: undefined ~/> number
       ^ Cannot call `f` with `a` bound to `n` because uninitialized variable [1] is incompatible with number [2].
  References:
   92: var a: number;  // not an error per se - only if used before init
           ^ [1]: uninitialized variable
   94: function f(n: number) { return n; }
                     ^^^^^^ [2]: number


Found 71 errors
