Error: class.js:11
 11:   set goodSetterNoAnnotation(x) { z = x; } // TODO: bad error position
                                           ^ Cannot assign `x` to `z` because string [1] is incompatible with number [2].
  References:
   52: foo.goodSetterNoAnnotation = "hello"; // Error string ~> number
                                    ^^^^^^^ [1]: string
    5: var z: number = 123;
              ^^^^^^ [2]: number

Error: class.js:34
 34:   set [z](x: string) {}
       ^^^^^^^^^^^^^^^^^^^^^ computed property keys not supported

Error: class.js:35
 35:   get [z](): string { return string; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ computed property keys not supported

Error: class.js:44
 44: var testGetterWithError1: string = foo.goodGetterNoAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `foo.goodGetterNoAnnotation` to `testGetterWithError1` because number [1] is incompatible with string [2].
  References:
    8:   get goodGetterNoAnnotation() { return 4; }
                                               ^ [1]: number
   44: var testGetterWithError1: string = foo.goodGetterNoAnnotation; // Error number ~> string
                                 ^^^^^^ [2]: string

Error: class.js:45
 45: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `foo.goodGetterWithAnnotation` to `testGetterWithError2` because number [1] is incompatible with string [2].
  References:
    9:   get goodGetterWithAnnotation(): number { return 4; }
                                         ^^^^^^ [1]: number
   45: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                                 ^^^^^^ [2]: string

Error: class.js:53
 53: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                    ^^^^^^^ Cannot assign `"hello"` to `foo.goodSetterWithAnnotation` because string [1] is incompatible with number [2].
  References:
   53: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                      ^^^^^^^ [1]: string
   12:   set goodSetterWithAnnotation(x: number) { z = x; }
                                         ^^^^^^ [2]: number

Error: class.js:55
 55: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `foo.propWithSubtypingGetterAndSetter` to `testSubtypingGetterAndSetter` because null or undefined [1] is incompatible with number [2].
  References:
   18:   get propWithSubtypingGetterAndSetter(): ?number { return 4; }
                                                 ^^^^^^^ [1]: null or undefined
   55: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                         ^^^^^^ [2]: number

Error: class.js:57
 57: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `foo.propOverriddenWithGetter` to `testPropOverridenWithGetter` because string [1] is incompatible with number [2].
  References:
   29:   get propOverriddenWithGetter() { return "hello"; }
                                                 ^^^^^^^ [1]: string
   57: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                        ^^^^^^ [2]: number

Error: class.js:58
 58: foo.propOverriddenWithSetter = 123; // Error number ~> string
                                    ^^^ Cannot assign `123` to `foo.propOverriddenWithSetter` because number [1] is incompatible with string [2].
  References:
   58: foo.propOverriddenWithSetter = 123; // Error number ~> string
                                      ^^^ [1]: number
   32:   set propOverriddenWithSetter(x: string) { }
                                         ^^^^^^ [2]: string

Error: declare_class.js:37
 37: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `foo.goodGetterWithAnnotation` to `testGetterWithError2` because number [1] is incompatible with string [2].
  References:
    8:   get goodGetterWithAnnotation(): number;
                                         ^^^^^^ [1]: number
   37: var testGetterWithError2: string = foo.goodGetterWithAnnotation; // Error number ~> string
                                 ^^^^^^ [2]: string

Error: declare_class.js:42
 42: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                    ^^^^^^^ Cannot assign `"hello"` to `foo.goodSetterWithAnnotation` because string [1] is incompatible with number [2].
  References:
   42: foo.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                      ^^^^^^^ [1]: string
    9:   set goodSetterWithAnnotation(x: number): void;
                                         ^^^^^^ [2]: number

Error: declare_class.js:44
 44: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `foo.propWithSubtypingGetterAndSetter` to `testSubtypingGetterAndSetter` because null or undefined [1] is incompatible with number [2].
  References:
   15:   get propWithSubtypingGetterAndSetter(): ?number;
                                                 ^^^^^^^ [1]: null or undefined
   44: var testSubtypingGetterAndSetter: number = foo.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                         ^^^^^^ [2]: number

Error: declare_class.js:46
 46: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `foo.propOverriddenWithGetter` to `testPropOverridenWithGetter` because string [1] is incompatible with number [2].
  References:
   26:   get propOverriddenWithGetter(): string;
                                         ^^^^^^ [1]: string
   46: var testPropOverridenWithGetter: number = foo.propOverriddenWithGetter; // Error string ~> number
                                        ^^^^^^ [2]: number

Error: declare_class.js:47
 47: foo.propOverriddenWithSetter = 123; // Error number ~> string
                                    ^^^ Cannot assign `123` to `foo.propOverriddenWithSetter` because number [1] is incompatible with string [2].
  References:
   47: foo.propOverriddenWithSetter = 123; // Error number ~> string
                                      ^^^ [1]: number
   29:   set propOverriddenWithSetter(x: string): void;
                                         ^^^^^^ [2]: string

Error: object.js:15
 15:   set goodSetterNoAnnotation(x) { z = x; },
                                           ^ Cannot assign `x` to `z` because string [1] is incompatible with number [2].
  References:
   54: obj.goodSetterNoAnnotation = "hello"; // Error string ~> number
                                    ^^^^^^^ [1]: string
    5: var z: number = 123;
              ^^^^^^ [2]: number

Error: object.js:34
 34:   set [z](x: string) {},
       ^^^^^^^^^^^^^^^^^^^^^ computed getters and setters are not yet supported

Error: object.js:35
 35:   get [z](): string { return string; },
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ computed getters and setters are not yet supported

Error: object.js:47
 47: var testGetterWithError1: string = obj.goodGetterNoAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `obj.goodGetterNoAnnotation` to `testGetterWithError1` because number [1] is incompatible with string [2].
  References:
   12:   get goodGetterNoAnnotation() { return 4; },
                                               ^ [1]: number
   47: var testGetterWithError1: string = obj.goodGetterNoAnnotation; // Error number ~> string
                                 ^^^^^^ [2]: string

Error: object.js:48
 48: var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `obj.goodGetterWithAnnotation` to `testGetterWithError2` because number [1] is incompatible with string [2].
  References:
   13:   get goodGetterWithAnnotation(): number { return 4; },
                                         ^^^^^^ [1]: number
   48: var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                 ^^^^^^ [2]: string

Error: object.js:55
 55: obj.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                    ^^^^^^^ Cannot assign `"hello"` to `obj.goodSetterWithAnnotation` because string [1] is incompatible with number [2].
  References:
   55: obj.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                      ^^^^^^^ [1]: string
   16:   set goodSetterWithAnnotation(x: number) { z = x; },
                                         ^^^^^^ [2]: number

Error: object.js:57
 57: var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `obj.propWithSubtypingGetterAndSetter` to `testSubtypingGetterAndSetter` because null or undefined [1] is incompatible with number [2].
  References:
   22:   get propWithSubtypingGetterAndSetter(): ?number { return 4; }, // OK
                                                 ^^^^^^^ [1]: null or undefined
   57: var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                         ^^^^^^ [2]: number

Error: object.js:62
 62: obj.exampleOfOrderOfGetterAndSetter = new C(); // Error C ~> B
                                           ^^^^^^^ Cannot assign `new C()` to `obj.exampleOfOrderOfGetterAndSetter` because `C` [1] is incompatible with `B` [2].
  References:
   62: obj.exampleOfOrderOfGetterAndSetter = new C(); // Error C ~> B
                                             ^^^^^^^ [1]: `C`
   29:   set exampleOfOrderOfGetterAndSetter(x: B) {},
                                                ^ [2]: `B`

Error: object.js:66
 66:   obj.exampleOfOrderOfGetterAndSetterReordered; // Error A ~> B
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `obj.exampleOfOrderOfGetterAndSetterReordered` to `testExampleOrOrderOfGetterAndSetterReordered` because `A` [1] is incompatible with number [2].
  References:
   32:   get exampleOfOrderOfGetterAndSetterReordered(): A { return new A(); },
                                                         ^ [1]: `A`
   65: var testExampleOrOrderOfGetterAndSetterReordered: number =
                                                         ^^^^^^ [2]: number

Error: object.js:68
 68: (obj["stringLiteral"]: string); // err, num !~> string
      ^^^^^^^^^^^^^^^^^^^^ Cannot cast `obj["stringLiteral"]` to string because number [1] is incompatible with string [2].
  References:
   38:   get "stringLiteral"(): number { return 4; },
                                ^^^^^^ [1]: number
   68: (obj["stringLiteral"]: string); // err, num !~> string
                              ^^^^^^ [2]: string

Error: object.js:69
 69: obj["stringLiteral"] = "foo"; // err, string !~> num
                            ^^^^^ Cannot assign `"foo"` to `obj["stringLiteral"]` because string [1] is incompatible with number [2].
  References:
   69: obj["stringLiteral"] = "foo"; // err, string !~> num
                              ^^^^^ [1]: string
   37:   set "stringLiteral"(x: number) { },
                                ^^^^^^ [2]: number

Error: object_type.js:36
 36:   var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `obj.goodGetterWithAnnotation` to `testGetterWithError2` because number [1] is incompatible with string [2].
  References:
   12:   get goodGetterWithAnnotation(): number,
                                         ^^^^^^ [1]: number
   36:   var testGetterWithError2: string = obj.goodGetterWithAnnotation; // Error number ~> string
                                   ^^^^^^ [2]: string

Error: object_type.js:41
 41:   obj.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                      ^^^^^^^ Cannot assign `"hello"` to `obj.goodSetterWithAnnotation` because string [1] is incompatible with number [2].
  References:
   41:   obj.goodSetterWithAnnotation = "hello"; // Error string ~> number
                                        ^^^^^^^ [1]: string
   13:   set goodSetterWithAnnotation(x: number): void,
                                         ^^^^^^ [2]: number

Error: object_type.js:43
 43:   var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `obj.propWithSubtypingGetterAndSetter` to `testSubtypingGetterAndSetter` because null or undefined [1] is incompatible with number [2].
  References:
   19:   get propWithSubtypingGetterAndSetter(): ?number, // OK
                                                 ^^^^^^^ [1]: null or undefined
   43:   var testSubtypingGetterAndSetter: number = obj.propWithSubtypingGetterAndSetter; // Error ?number ~> number
                                           ^^^^^^ [2]: number

Error: object_type.js:48
 48:   obj.exampleOfOrderOfGetterAndSetter = new C(); // Error C ~> B
                                             ^^^^^^^ Cannot assign `new C()` to `obj.exampleOfOrderOfGetterAndSetter` because `C` [1] is incompatible with `B` [2].
  References:
   48:   obj.exampleOfOrderOfGetterAndSetter = new C(); // Error C ~> B
                                               ^^^^^^^ [1]: `C`
   26:   set exampleOfOrderOfGetterAndSetter(x: B): void,
                                                ^ [2]: `B`

Error: object_type.js:52
 52:     obj.exampleOfOrderOfGetterAndSetterReordered; // Error A ~> B
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Cannot assign `obj.exampleOfOrderOfGetterAndSetterReordered` to `testExampleOrOrderOfGetterAndSetterReordered` because `A` [1] is incompatible with number [2].
  References:
   29:   get exampleOfOrderOfGetterAndSetterReordered(): A,
                                                         ^ [1]: `A`
   51:   var testExampleOrOrderOfGetterAndSetterReordered: number =
                                                           ^^^^^^ [2]: number

Error: react.js:15
 15: (<Example />); // error: property `a` not found
       ^^^^^^^ Cannot create `Example` element because property `a` is missing in props [1] but exists in propTypes of React component [2].
  References:
   15: (<Example />); // error: property `a` not found
        ^^^^^^^^^^^ [1]: props
                    v
    8:   propTypes: {
    9:     get a() { return React.PropTypes.number.isRequired; },
   10:     set b(x: number) { this.c = x; },
   11:     c: React.PropTypes.string,
   12:   }
         ^ [2]: propTypes of React component

Error: react.js:17
 17: (<Example a="bad" />); // error: number ~> string
                 ^^^^^ Cannot create `Example` element because in property `a`, string [1] is incompatible with number [2].
  References:
   17: (<Example a="bad" />); // error: number ~> string
                   ^^^^^ [1]: string
  294:   number: React$PropType$Primitive<number>;
                                          ^^^^^^ [2]: number. See lib: <BUILTINS>/react.js:294

Error: react.js:18
 18: (<Example a={0} c={0} />); // error: number ~> string
                        ^ Cannot create `Example` element because in property `c`, number [1] is incompatible with string [2].
  References:
   18: (<Example a={0} c={0} />); // error: number ~> string
                          ^ [1]: number
  296:   string: React$PropType$Primitive<string>;
                                          ^^^^^^ [2]: string. See lib: <BUILTINS>/react.js:296

Error: variance.js:21
      v-------------------
 21: (class extends Base {
 22:   // error: getter incompatible with read/write property
 23:   get x(): B { return b }
 24: });
     ^ `<<anonymous class>>`. Cannot extend
 21: (class extends Base {
                    ^^^^ Base
  Property `x` is incompatible:
          v-------------------
     21: (class extends Base {
     22:   // error: getter incompatible with read/write property
     23:   get x(): B { return b }
     24: });
         ^ `<<anonymous class>>`. Covariant property `x` incompatible with invariant use in
     21: (class extends Base {
                        ^^^^ Base

Error: variance.js:26
      v-------------------
 26: (class extends Base {
 27:   // error: setter incompatible with read/write property
 28:   set x(value: B): void {}
 29: });
     ^ `<<anonymous class>>`. Cannot extend
 26: (class extends Base {
                    ^^^^ Base
  Property `x` is incompatible:
          v-------------------
     26: (class extends Base {
     27:   // error: setter incompatible with read/write property
     28:   set x(value: B): void {}
     29: });
         ^ `<<anonymous class>>`. Contravariant property `x` incompatible with invariant use in
     26: (class extends Base {
                        ^^^^ Base

Error: variance.js:37
      v-------------------
 37: (class extends Base {
 38:   // error: setter incompatible with read-only property
 39:   set pos(value: B): void {}
 40: });
     ^ `<<anonymous class>>`. Cannot extend
 37: (class extends Base {
                    ^^^^ Base
  Property `pos` is incompatible:
          v-------------------
     37: (class extends Base {
     38:   // error: setter incompatible with read-only property
     39:   set pos(value: B): void {}
     40: });
         ^ `<<anonymous class>>`. Contravariant property `pos` incompatible with covariant use in
     37: (class extends Base {
                        ^^^^ Base

Error: variance.js:47
      v-------------------
 47: (class extends Base {
 48:   // error: getter incompatible with write-only property
 49:   get neg(): B { return b }
 50: });
     ^ `<<anonymous class>>`. Cannot extend
 47: (class extends Base {
                    ^^^^ Base
  Property `neg` is incompatible:
          v-------------------
     47: (class extends Base {
     48:   // error: getter incompatible with write-only property
     49:   get neg(): B { return b }
     50: });
         ^ `<<anonymous class>>`. Covariant property `neg` incompatible with contravariant use in
     47: (class extends Base {
                        ^^^^ Base


Found 37 errors
