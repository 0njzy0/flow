Error: annot.js:3
  3: (o.p: empty); // error: number ~> empty
      ^^^ Cannot cast `o.p` to empty because number [1] is incompatible with empty [2].
  References:
    1: type O = {p: number, __proto__: {q: string}};
                    ^^^^^^ [1]: number
    3: (o.p: empty); // error: number ~> empty
             ^^^^^ [2]: empty

Error: annot.js:4
  4: (o.q: empty); // error: string ~> empty
      ^^^ Cannot cast `o.q` to empty because string [1] is incompatible with empty [2].
  References:
    1: type O = {p: number, __proto__: {q: string}};
                                           ^^^^^^ [1]: string
    4: (o.q: empty); // error: string ~> empty
             ^^^^^ [2]: empty

Error: annot.js:8
  8: ({p: 0, q: 0}: O); // error: number ~> string
                ^ Cannot cast object literal to `O` because in property `q`, number [1] is incompatible with string [2].
  References:
    8: ({p: 0, q: 0}: O); // error: number ~> string
                  ^ [1]: number
    1: type O = {p: number, __proto__: {q: string}};
                                           ^^^^^^ [2]: string

Error: annot.js:9
  9: ({p: 0, __proto__: {q: 0}}: O); // error: number ~> string
                            ^ Cannot cast object literal to `O` because in property `q`, number [1] is incompatible with string [2].
  References:
    9: ({p: 0, __proto__: {q: 0}}: O); // error: number ~> string
                              ^ [1]: number
    1: type O = {p: number, __proto__: {q: string}};
                                           ^^^^^^ [2]: string

Error: annot.js:10
 10: ({p: 0}: O); // error, property `q` not found
      ^^^^^^ Cannot cast object literal to `O` because property `q` is missing in object literal [1] but exists in object type [2].
  References:
   10: ({p: 0}: O); // error, property `q` not found
        ^^^^^^ [1]: object literal
   10: ({p: 0}: O); // error, property `q` not found
                ^ [2]: object type

Error: annot.js:15
 15: (o_optional.q: empty); // error: property `q` not found
                 ^ Cannot get `o_optional.q` because property `q` is missing in `O_optional` [1].
  References:
   14: declare var o_optional: O_optional;
                               ^^^^^^^^^^ [1]: `O_optional`

Error: annot.js:16
 16: (o_optional.__proto__: empty); // error: void ~> empty, object type ~> empty
      ^^^^^^^^^^^^^^^^^^^^ Cannot cast `o_optional.__proto__` to empty because object type [1] is incompatible with empty [2].
  References:
   13: type O_optional = { __proto__?: { q: 0 } };
                                       ^^^^^^^^ [1]: object type
   16: (o_optional.__proto__: empty); // error: void ~> empty, object type ~> empty
                              ^^^^^ [2]: empty

Error: annot.js:16
 16: (o_optional.__proto__: empty); // error: void ~> empty, object type ~> empty
      ^^^^^^^^^^^^^^^^^^^^ Cannot cast `o_optional.__proto__` to empty because undefined [1] is incompatible with empty [2].
  References:
   13: type O_optional = { __proto__?: { q: 0 } };
                                       ^^^^^^^^ [1]: undefined
   16: (o_optional.__proto__: empty); // error: void ~> empty, object type ~> empty
                              ^^^^^ [2]: empty

Error: annot.js:21
 21: (o_variance.q: empty); // error: property `q` not found
                 ^ Cannot get `o_variance.q` because property `q` is missing in `O_variance` [1].
  References:
   20: declare var o_variance: O_variance;
                               ^^^^^^^^^^ [1]: `O_variance`

Error: annot.js:22
 22: (o_variance.__proto__: empty); // error: object type ~> empty
      ^^^^^^^^^^^^^^^^^^^^ Cannot cast `o_variance.__proto__` to empty because object type [1] is incompatible with empty [2].
  References:
   19: type O_variance = { +__proto__: { q: 0 } };
                                       ^^^^^^^^ [1]: object type
   22: (o_variance.__proto__: empty); // error: object type ~> empty
                              ^^^^^ [2]: empty

Error: annot.js:27
 27: (o_callable.q: empty); // error: property `q` not found
                 ^ Cannot get `o_callable.q` because property `q` is missing in `O_callable` [1].
  References:
   26: declare var o_callable: O_callable;
                               ^^^^^^^^^^ [1]: `O_callable`

Error: annot.js:28
 28: (o_callable.__proto__: empty); // error: object type ~> empty
      ^^^^^^^^^^^^^^^^^^^^ Cannot cast `o_callable.__proto__` to empty because object type [1] is incompatible with empty [2].
  References:
   25: type O_callable = { (): void, __proto__: {} };
                                                ^^ [1]: object type
   28: (o_callable.__proto__: empty); // error: object type ~> empty
                              ^^^^^ [2]: empty

Error: annot.js:33
 33: (o_method.__proto__: empty); // error: function ~> empty
      ^^^^^^^^^^^^^^^^^^ Cannot cast `o_method.__proto__` to empty because function type [1] is incompatible with empty [2].
  References:
   31: type O_method = { __proto__(): void };
                         ^^^^^^^^^^^^^^^^^ [1]: function type
   33: (o_method.__proto__: empty); // error: function ~> empty
                            ^^^^^ [2]: empty

Error: annot.js:37
 37: (o_loop.p: empty); // error: number ~> empty
      ^^^^^^^^ Cannot cast `o_loop.p` to empty because number literal `0` [1] is incompatible with empty [2].
  References:
   35: type O_loop = { p: 0, __proto__: O_loop };
                          ^ [1]: number literal `0`
   37: (o_loop.p: empty); // error: number ~> empty
                  ^^^^^ [2]: empty

Error: annot.js:40
 40: type O_invalid = { __proto__: number }; // error: number is not a valid proto
                                   ^^^^^^ number. Invalid prototype. Expected an object or null.

Error: literal.js:2
  2: (o.p: empty); // error: number ~> empty
      ^^^ Cannot cast `o.p` to empty because number [1] is incompatible with empty [2].
  References:
    1: var o = { p: 0, __proto__: { q: 1 } };
                    ^ [1]: number
    2: (o.p: empty); // error: number ~> empty
             ^^^^^ [2]: empty

Error: literal.js:3
  3: (o.q: empty); // error: number ~> empty
      ^^^ Cannot cast `o.q` to empty because number [1] is incompatible with empty [2].
  References:
    1: var o = { p: 0, __proto__: { q: 1 } };
                                       ^ [1]: number
    3: (o.q: empty); // error: number ~> empty
             ^^^^^ [2]: empty

Error: literal.js:6
  6: (o_get.q: empty); // error: property `q` not found
            ^ Cannot get `o_get.q` because property `q` is missing in object literal [1].
  References:
    5: var o_get = { get __proto__() { return { q: 1 } } };
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: object literal

Error: literal.js:10
 10: (o_set.__proto__: empty); // error: read from contravariant prop
            ^^^^^^^^^ Cannot get `o_set.__proto__` because property `__proto__` is not readable.

Error: literal.js:13
 13: (o_method.__proto__: empty); // error: function ~> empty
      ^^^^^^^^^^^^^^^^^^ Cannot cast `o_method.__proto__` to empty because function [1] is incompatible with empty [2].
  References:
   12: var o_method = { __proto__() {} };
                                 ^^ [1]: function
   13: (o_method.__proto__: empty); // error: function ~> empty
                            ^^^^^ [2]: empty

Error: literal.js:17
 17: (o_shorthand.q: empty); // error: property `q` not found
                  ^ Cannot get `o_shorthand.q` because property `q` is missing in object literal [1].
  References:
   16: var o_shorthand = { __proto__ };
                         ^^^^^^^^^^^^^ [1]: object literal

Error: literal.js:20
 20: var o_computed = { ["__proto__"]: 0 }; // TODO: computed props use SetElem :/
                      ^^^^^^^^^^^^^^^^^^^^ object literal. Prototype mutation not allowed

Error: literal.js:21
 21: (o_computed.__proto__: empty); // TODO: error: number ~> empty
      ^^^^^^^^^^^^^^^^^^^^ Cannot cast `o_computed.__proto__` to empty because object literal [1] is incompatible with empty [2].
  References:
   20: var o_computed = { ["__proto__"]: 0 }; // TODO: computed props use SetElem :/
                        ^^^^^^^^^^^^^^^^^^^^ [1]: object literal
   21: (o_computed.__proto__: empty); // TODO: error: number ~> empty
                              ^^^^^ [2]: empty

Error: literal.js:23
 23: var o_loop = { p: 0, __proto__: o_loop }; // error: void (undefined o_loop) is not a valid proto
                                     ^^^^^^ uninitialized variable. Invalid prototype. Expected an object or null.

Error: literal.js:24
 24: (o_loop.p: empty); // error: number ~> empty
      ^^^^^^^^ Cannot cast `o_loop.p` to empty because number [1] is incompatible with empty [2].
  References:
   23: var o_loop = { p: 0, __proto__: o_loop }; // error: void (undefined o_loop) is not a valid proto
                         ^ [1]: number
   24: (o_loop.p: empty); // error: number ~> empty
                  ^^^^^ [2]: empty

Error: literal.js:25
 25: (o_loop.q: empty); // error: property `q` not found
             ^ Cannot get `o_loop.q` because property `q` is missing in object literal [1].
  References:
   23: var o_loop = { p: 0, __proto__: o_loop }; // error: void (undefined o_loop) is not a valid proto
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: object literal

Error: literal.js:27
 27: var o_invalid = { __proto__: 0 }; // error: 0 is not a valid proto
                                  ^ number. Invalid prototype. Expected an object or null.

Error: null.js:5
  5: o_null.toString(); // property `toString` not found
            ^^^^^^^^ Cannot call `o_null.toString` because property `toString` is missing in object literal [1].
  References:
    4: var o_null = { p: 0, __proto__: null }
                    ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]: object literal

Error: null.js:13
 13: (o_shadow.p: string);
      ^^^^^^^^^^ Cannot cast `o_shadow.p` to string because number [1] is incompatible with string [2].
  References:
   14: o_shadow.p = 0; // error: number ~> string
                    ^ [1]: number
   13: (o_shadow.p: string);
                    ^^^^^^ [2]: string

Error: null.js:18
 18:   (o_nonstrict.p: empty); // error: mixed ~> empty
        ^^^^^^^^^^^^^ Cannot cast `o_nonstrict.p` to empty because property `p` of unknown type [1] is incompatible with empty [2].
  References:
   17: if (o_nonstrict.p) {
           ^^^^^^^^^^^^^ [1]: property `p` of unknown type
   18:   (o_nonstrict.p: empty); // error: mixed ~> empty
                         ^^^^^ [2]: empty


Found 30 errors
