# needed to corrrecly join file paths instead of string concatenation
import os.path

CODE_DIR = 'hphp/hack/src/h2tp'

def mk_sources(p):
  return util.files(p + '/*.ml') + util.files(p + '/*.mli')

def mk_hackdeps(ds):
  return ['@/hphp/hack/src/' + d for d in ds]

def mk_localdeps(ds):
  return [CODE_DIR + ':' + d for d in ds]

def library(name, path=None, local_deps=[]):
  path = path or name
  ocaml_library(
    name=name,
    srcs=mk_sources(path),
    deps=
      mk_hackdeps(['heap', 'naming', 'parsing','utils']) +
      mk_localdeps(local_deps),
  )

def binary(name, path=None, local_deps=[]):
  path = path or name
  ocaml_binary(
    name=name,
    srcs=mk_sources(path),
    deps=
      mk_hackdeps(['parsing','utils','heap', 'facebook/debug']) +
      mk_localdeps(local_deps),
  )


library(name='common')

library(
  name='mapper',
  local_deps=['common']
)

library(
  name='unparser',
  local_deps=['common']
)

binary(
  name='h2tp',
  path=".",
  local_deps=[
    'common',
    'unparser',
    'mapper',
  ]
)

binary(
  name='test_unparser',
  path="test",
  local_deps=[
    'common',
    'unparser',
    'mapper',
  ]
)

TEST_INPUTS = (util.files('test/input/**/*.*') +
  util.files('test/unparser_input/**/*.*'))
TEST_OUTPUTS = (util.files('test/output/**/*.*') +
  util.files('test/unparser_output/**/*.*'))

python_binary (
  name = "generate_tests",
  main_module = os.path.join(CODE_DIR,
    "test/test_generation/generate_tests").replace("/", "."),
  srcs = util.files('test/test_generation/*.py'),
)

custom_rule (
  name = "gen_tests",
  output_gen_files = [
    "test/generated_tests.py",
  ],
  build_script = "generate_tests.par",
  build_script_path = os.path.join("_bin", CODE_DIR),
  build_args = """ \
    --binary=h2tp \
    --unparser_binary=test_unparser \
    --gen_file_name=generated_tests.py \
    --code_dir={} \
    """.format(CODE_DIR),
  deps = [
    ":h2tp",
    ":generate_tests",
  ],
  srcs = TEST_INPUTS + TEST_OUTPUTS,
)

python_unittest(
  name="h2tp_tests",
  gen_srcs = [
    "test/generated_tests.py"
  ],
  srcs = util.files('test/*.py') + TEST_INPUTS + TEST_OUTPUTS,
  deps = [
    ":h2tp",
    ":test_unparser",
    ":gen_tests",
  ],
)
